
mqtt_dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b64  08004b64  00005b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b6c  08004b6c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00005b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000005b8  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000614  20000614  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009313  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4d  00000000  00000000  0000f39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00010df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bd  00000000  00000000  00011578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020651  00000000  00000000  00011b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009929  00000000  00000000  00032186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3499  00000000  00000000  0003baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fef48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000238c  00000000  00000000  000fef8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00101318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004954 	.word	0x08004954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004954 	.word	0x08004954

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ESP8266_Init>:
  * @brief  Initialize ESP8266 module
  * @param  huart: UART handle to use for communication
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_Init(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    if (huart == NULL) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ESP8266_Init+0x12>
        return ESP8266_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	e067      	b.n	80006ae <ESP8266_Init+0xe2>
    }
    
    esp8266_uart = huart;
 80005de:	4a36      	ldr	r2, [pc, #216]	@ (80006b8 <ESP8266_Init+0xec>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6013      	str	r3, [r2, #0]
    ESP8266_ClearBuffer();
 80005e4:	f000 f9d0 	bl	8000988 <ESP8266_ClearBuffer>
    
    // Start DMA reception in circular mode
    if (HAL_UART_Receive_DMA(esp8266_uart, esp8266_dma_buffer, ESP8266_DMA_BUFFER_SIZE) != HAL_OK) {
 80005e8:	4b33      	ldr	r3, [pc, #204]	@ (80006b8 <ESP8266_Init+0xec>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005f0:	4932      	ldr	r1, [pc, #200]	@ (80006bc <ESP8266_Init+0xf0>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fb77 	bl	8002ce6 <HAL_UART_Receive_DMA>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <ESP8266_Init+0x36>
        return ESP8266_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e055      	b.n	80006ae <ESP8266_Init+0xe2>
    }
    
    // Wait for ESP8266 to boot (it sends startup messages)
    HAL_Delay(3000);
 8000602:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000606:	f000 ff0d 	bl	8001424 <HAL_Delay>
    
    // Clear any startup messages
    ESP8266_ClearBuffer();
 800060a:	f000 f9bd 	bl	8000988 <ESP8266_ClearBuffer>
    dma_old_pos = ESP8266_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(esp8266_uart->hdmarx);
 800060e:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <ESP8266_Init+0xec>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	b29b      	uxth	r3, r3
 800061a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <ESP8266_Init+0xf4>)
 8000622:	801a      	strh	r2, [r3, #0]
    
    // Test basic communication - multiple attempts with proper delays
    ESP8266_Status_t status = ESP8266_TIMEOUT;
 8000624:	2302      	movs	r3, #2
 8000626:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 5; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	e011      	b.n	8000652 <ESP8266_Init+0x86>
        status = ESP8266_SendCommand(AT_CMD_TEST, AT_RESP_OK, AT_TIMEOUT_DEFAULT);
 800062e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000632:	4924      	ldr	r1, [pc, #144]	@ (80006c4 <ESP8266_Init+0xf8>)
 8000634:	4824      	ldr	r0, [pc, #144]	@ (80006c8 <ESP8266_Init+0xfc>)
 8000636:	f000 f923 	bl	8000880 <ESP8266_SendCommand>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
        if (status == ESP8266_OK) {
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00a      	beq.n	800065a <ESP8266_Init+0x8e>
            break;
        }
        HAL_Delay(2000); // Longer delay between attempts
 8000644:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000648:	f000 feec 	bl	8001424 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3301      	adds	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	2b04      	cmp	r3, #4
 8000656:	ddea      	ble.n	800062e <ESP8266_Init+0x62>
 8000658:	e000      	b.n	800065c <ESP8266_Init+0x90>
            break;
 800065a:	bf00      	nop
    }
    
    if (status != ESP8266_OK) {
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <ESP8266_Init+0x9a>
        return ESP8266_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e023      	b.n	80006ae <ESP8266_Init+0xe2>
    }
    
    // Reset ESP8266 to ensure clean state
    ESP8266_UART_Transmit(AT_CMD_RESET);
 8000666:	4819      	ldr	r0, [pc, #100]	@ (80006cc <ESP8266_Init+0x100>)
 8000668:	f000 f9e8 	bl	8000a3c <ESP8266_UART_Transmit>
    HAL_Delay(5000);
 800066c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000670:	f000 fed8 	bl	8001424 <HAL_Delay>

    // Disable echo to reduce noise - CRITICAL for clean communication
    if (ESP8266_SendCommand(AT_CMD_ECHO_OFF, AT_RESP_OK, AT_TIMEOUT_DEFAULT) != ESP8266_OK) {
 8000674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000678:	4912      	ldr	r1, [pc, #72]	@ (80006c4 <ESP8266_Init+0xf8>)
 800067a:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <ESP8266_Init+0x104>)
 800067c:	f000 f900 	bl	8000880 <ESP8266_SendCommand>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <ESP8266_Init+0xbe>
        return ESP8266_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e011      	b.n	80006ae <ESP8266_Init+0xe2>
    }
    
    // Disconnect from any existing WiFi connection (ignore response - might not be connected)
    ESP8266_SendCommand(AT_CMD_WIFI_DISCONNECT, AT_RESP_OK, AT_TIMEOUT_DEFAULT);
 800068a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800068e:	490d      	ldr	r1, [pc, #52]	@ (80006c4 <ESP8266_Init+0xf8>)
 8000690:	4810      	ldr	r0, [pc, #64]	@ (80006d4 <ESP8266_Init+0x108>)
 8000692:	f000 f8f5 	bl	8000880 <ESP8266_SendCommand>

    // Set WiFi mode to station mode
    if (ESP8266_SendCommand(AT_CMD_WIFI_MODE_STA, AT_RESP_OK, AT_TIMEOUT_DEFAULT) != ESP8266_OK) {
 8000696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800069a:	490a      	ldr	r1, [pc, #40]	@ (80006c4 <ESP8266_Init+0xf8>)
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <ESP8266_Init+0x10c>)
 800069e:	f000 f8ef 	bl	8000880 <ESP8266_SendCommand>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <ESP8266_Init+0xe0>
        return ESP8266_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e000      	b.n	80006ae <ESP8266_Init+0xe2>
    }

    return ESP8266_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000027c 	.word	0x2000027c
 80006bc:	20000280 	.word	0x20000280
 80006c0:	20000380 	.word	0x20000380
 80006c4:	0800496c 	.word	0x0800496c
 80006c8:	08004970 	.word	0x08004970
 80006cc:	08004978 	.word	0x08004978
 80006d0:	08004984 	.word	0x08004984
 80006d4:	0800498c 	.word	0x0800498c
 80006d8:	08004998 	.word	0x08004998

080006dc <ESP8266_ConnectWiFi>:
  * @param  ssid: WiFi network name
  * @param  password: WiFi password
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_ConnectWiFi(const char* ssid, const char* password)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0a4      	sub	sp, #144	@ 0x90
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
    char command[128];
    snprintf(command, sizeof(command), AT_CMD_WIFI_CONNECT, ssid, password);
 80006e6:	f107 0008 	add.w	r0, r7, #8
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <ESP8266_ConnectWiFi+0x38>)
 80006f2:	2180      	movs	r1, #128	@ 0x80
 80006f4:	f003 fc2e 	bl	8003f54 <sniprintf>
    
    // WiFi connection can take a while and generates multiple responses
    return ESP8266_SendCommand(command, AT_RESP_OK, AT_TIMEOUT_WIFI_CONNECT);
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000700:	4905      	ldr	r1, [pc, #20]	@ (8000718 <ESP8266_ConnectWiFi+0x3c>)
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f8bc 	bl	8000880 <ESP8266_SendCommand>
 8000708:	4603      	mov	r3, r0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3788      	adds	r7, #136	@ 0x88
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	080049a8 	.word	0x080049a8
 8000718:	0800496c 	.word	0x0800496c

0800071c <ESP8266_ConnectMQTT>:
  * @param  port: MQTT broker port
  * @param  client_id: MQTT client ID
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_ConnectMQTT(const char* broker_ip, uint16_t port, const char* client_id)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0c6      	sub	sp, #280	@ 0x118
 8000720:	af02      	add	r7, sp, #8
 8000722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800072a:	6018      	str	r0, [r3, #0]
 800072c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000730:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800073e:	460a      	mov	r2, r1
 8000740:	801a      	strh	r2, [r3, #0]
    char command[256];
    
    // Set MQTT user configuration
    snprintf(command, sizeof(command), AT_CMD_MQTT_USER_CFG, client_id);
 8000742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800074a:	f107 0010 	add.w	r0, r7, #16
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1a      	ldr	r2, [pc, #104]	@ (80007bc <ESP8266_ConnectMQTT+0xa0>)
 8000752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000756:	f003 fbfd 	bl	8003f54 <sniprintf>
    if (ESP8266_SendCommand(command, AT_RESP_OK, AT_TIMEOUT_MQTT_CONFIG) != ESP8266_OK) {
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000762:	4917      	ldr	r1, [pc, #92]	@ (80007c0 <ESP8266_ConnectMQTT+0xa4>)
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f88b 	bl	8000880 <ESP8266_SendCommand>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <ESP8266_ConnectMQTT+0x58>
        return ESP8266_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	e01e      	b.n	80007b2 <ESP8266_ConnectMQTT+0x96>
    }
    
    HAL_Delay(1000);
 8000774:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000778:	f000 fe54 	bl	8001424 <HAL_Delay>
    
    // Connect to MQTT broker
    snprintf(command, sizeof(command), AT_CMD_MQTT_CONNECT, broker_ip, port);
 800077c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000780:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800078a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800078e:	f107 0010 	add.w	r0, r7, #16
 8000792:	9200      	str	r2, [sp, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <ESP8266_ConnectMQTT+0xa8>)
 8000798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079c:	f003 fbda 	bl	8003f54 <sniprintf>
    return ESP8266_SendCommand(command, AT_RESP_OK, AT_TIMEOUT_MQTT_CONNECT);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80007a8:	4905      	ldr	r1, [pc, #20]	@ (80007c0 <ESP8266_ConnectMQTT+0xa4>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f868 	bl	8000880 <ESP8266_SendCommand>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	080049c0 	.word	0x080049c0
 80007c0:	0800496c 	.word	0x0800496c
 80007c4:	080049e8 	.word	0x080049e8

080007c8 <ESP8266_SubscribeMQTT>:
  * @brief  Subscribe to MQTT topic
  * @param  topic: MQTT topic to subscribe
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_SubscribeMQTT(const char* topic)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0a4      	sub	sp, #144	@ 0x90
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    char command[128];
    snprintf(command, sizeof(command), AT_CMD_MQTT_SUBSCRIBE, topic);
 80007d0:	f107 000c 	add.w	r0, r7, #12
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <ESP8266_SubscribeMQTT+0x48>)
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	f003 fbbb 	bl	8003f54 <sniprintf>
    ESP8266_Status_t status = ESP8266_SendCommand(command, AT_RESP_OK, AT_TIMEOUT_DEFAULT * 2);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007e6:	490b      	ldr	r1, [pc, #44]	@ (8000814 <ESP8266_SubscribeMQTT+0x4c>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f849 	bl	8000880 <ESP8266_SendCommand>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    
    if (status == ESP8266_OK) {
 80007f4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <ESP8266_SubscribeMQTT+0x3a>
        mqtt_subscribed = true;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <ESP8266_SubscribeMQTT+0x50>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
    }
    
    return status;
 8000802:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8000806:	4618      	mov	r0, r3
 8000808:	3790      	adds	r7, #144	@ 0x90
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08004a04 	.word	0x08004a04
 8000814:	0800496c 	.word	0x0800496c
 8000818:	2000027a 	.word	0x2000027a

0800081c <ESP8266_PublishMQTT>:
  * @param  topic: MQTT topic
  * @param  message: Message to publish
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_PublishMQTT(const char* topic, const char* message)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0c4      	sub	sp, #272	@ 0x110
 8000820:	af02      	add	r7, sp, #8
 8000822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800082a:	6018      	str	r0, [r3, #0]
 800082c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000834:	6019      	str	r1, [r3, #0]
    char command[256];
    snprintf(command, sizeof(command), AT_CMD_MQTT_PUBLISH, topic, message);
 8000836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800083a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800083e:	f107 0008 	add.w	r0, r7, #8
 8000842:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000846:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800084a:	6812      	ldr	r2, [r2, #0]
 800084c:	9200      	str	r2, [sp, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <ESP8266_PublishMQTT+0x5c>)
 8000852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000856:	f003 fb7d 	bl	8003f54 <sniprintf>
    return ESP8266_SendCommand(command, AT_RESP_OK, AT_TIMEOUT_DEFAULT);
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000862:	4906      	ldr	r1, [pc, #24]	@ (800087c <ESP8266_PublishMQTT+0x60>)
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f80b 	bl	8000880 <ESP8266_SendCommand>
 800086a:	4603      	mov	r3, r0
}
 800086c:	4618      	mov	r0, r3
 800086e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08004a1c 	.word	0x08004a1c
 800087c:	0800496c 	.word	0x0800496c

08000880 <ESP8266_SendCommand>:
  * @param  expected_response: Expected response
  * @param  timeout: Timeout in milliseconds
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_SendCommand(const char* command, const char* expected_response, uint32_t timeout)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
    if (esp8266_uart == NULL) {
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <ESP8266_SendCommand+0x4c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <ESP8266_SendCommand+0x18>
        return ESP8266_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e014      	b.n	80008c2 <ESP8266_SendCommand+0x42>
    }
    
    // Clear both DMA processing buffer AND internal buffer
    ESP8266_ClearBuffer();
 8000898:	f000 f876 	bl	8000988 <ESP8266_ClearBuffer>
    
    // Reset DMA position to start fresh
    dma_old_pos = ESP8266_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(esp8266_uart->hdmarx);
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <ESP8266_SendCommand+0x4c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <ESP8266_SendCommand+0x50>)
 80008b0:	801a      	strh	r2, [r3, #0]
    
    // Send command
    ESP8266_UART_Transmit(command);
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f8c2 	bl	8000a3c <ESP8266_UART_Transmit>
    
    // Wait for response with continuous DMA processing
    return ESP8266_WaitForResponse(expected_response, timeout);
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	68b8      	ldr	r0, [r7, #8]
 80008bc:	f000 f876 	bl	80009ac <ESP8266_WaitForResponse>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000027c 	.word	0x2000027c
 80008d0:	20000380 	.word	0x20000380

080008d4 <ESP8266_ProcessDMAData>:
/**
  * @brief  Process DMA data from ESP8266
  * @retval None
  */
void ESP8266_ProcessDMAData(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
    if (esp8266_uart == NULL) {
 80008da:	4b28      	ldr	r3, [pc, #160]	@ (800097c <ESP8266_ProcessDMAData+0xa8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d048      	beq.n	8000974 <ESP8266_ProcessDMAData+0xa0>
        return;
    }
    
    uint16_t pos = ESP8266_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(esp8266_uart->hdmarx);
 80008e2:	4b26      	ldr	r3, [pc, #152]	@ (800097c <ESP8266_ProcessDMAData+0xa8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80008f2:	803b      	strh	r3, [r7, #0]
    
    if (pos != dma_old_pos) {
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <ESP8266_ProcessDMAData+0xac>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	883a      	ldrh	r2, [r7, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d03b      	beq.n	8000976 <ESP8266_ProcessDMAData+0xa2>
        if (pos > dma_old_pos) {
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <ESP8266_ProcessDMAData+0xac>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	883a      	ldrh	r2, [r7, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d911      	bls.n	800092c <ESP8266_ProcessDMAData+0x58>
            // Linear case - no buffer wrap
            for (uint16_t i = dma_old_pos; i < pos; i++) {
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <ESP8266_ProcessDMAData+0xac>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	80fb      	strh	r3, [r7, #6]
 800090e:	e008      	b.n	8000922 <ESP8266_ProcessDMAData+0x4e>
                ESP8266_ProcessDMAByte(esp8266_dma_buffer[i]);
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <ESP8266_ProcessDMAData+0xb0>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f924 	bl	8000b64 <ESP8266_ProcessDMAByte>
            for (uint16_t i = dma_old_pos; i < pos; i++) {
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	3301      	adds	r3, #1
 8000920:	80fb      	strh	r3, [r7, #6]
 8000922:	88fa      	ldrh	r2, [r7, #6]
 8000924:	883b      	ldrh	r3, [r7, #0]
 8000926:	429a      	cmp	r2, r3
 8000928:	d3f2      	bcc.n	8000910 <ESP8266_ProcessDMAData+0x3c>
 800092a:	e01f      	b.n	800096c <ESP8266_ProcessDMAData+0x98>
            }
        } else {
            // Wrap-around case - buffer has wrapped
            for (uint16_t i = dma_old_pos; i < ESP8266_DMA_BUFFER_SIZE; i++) {
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <ESP8266_ProcessDMAData+0xac>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	80bb      	strh	r3, [r7, #4]
 8000932:	e008      	b.n	8000946 <ESP8266_ProcessDMAData+0x72>
                ESP8266_ProcessDMAByte(esp8266_dma_buffer[i]);
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	4a13      	ldr	r2, [pc, #76]	@ (8000984 <ESP8266_ProcessDMAData+0xb0>)
 8000938:	5cd3      	ldrb	r3, [r2, r3]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f912 	bl	8000b64 <ESP8266_ProcessDMAByte>
            for (uint16_t i = dma_old_pos; i < ESP8266_DMA_BUFFER_SIZE; i++) {
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	80bb      	strh	r3, [r7, #4]
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	2bff      	cmp	r3, #255	@ 0xff
 800094a:	d9f3      	bls.n	8000934 <ESP8266_ProcessDMAData+0x60>
            }
            for (uint16_t i = 0; i < pos; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	807b      	strh	r3, [r7, #2]
 8000950:	e008      	b.n	8000964 <ESP8266_ProcessDMAData+0x90>
                ESP8266_ProcessDMAByte(esp8266_dma_buffer[i]);
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <ESP8266_ProcessDMAData+0xb0>)
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f903 	bl	8000b64 <ESP8266_ProcessDMAByte>
            for (uint16_t i = 0; i < pos; i++) {
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	3301      	adds	r3, #1
 8000962:	807b      	strh	r3, [r7, #2]
 8000964:	887a      	ldrh	r2, [r7, #2]
 8000966:	883b      	ldrh	r3, [r7, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3f2      	bcc.n	8000952 <ESP8266_ProcessDMAData+0x7e>
            }
        }
        dma_old_pos = pos;
 800096c:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <ESP8266_ProcessDMAData+0xac>)
 800096e:	883b      	ldrh	r3, [r7, #0]
 8000970:	8013      	strh	r3, [r2, #0]
 8000972:	e000      	b.n	8000976 <ESP8266_ProcessDMAData+0xa2>
        return;
 8000974:	bf00      	nop
    }
}
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000027c 	.word	0x2000027c
 8000980:	20000380 	.word	0x20000380
 8000984:	20000280 	.word	0x20000280

08000988 <ESP8266_ClearBuffer>:
/**
  * @brief  Clear ESP8266 buffer
  * @retval None
  */
void ESP8266_ClearBuffer(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    memset(esp8266_buffer, 0, ESP8266_BUFFER_SIZE);
 800098c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000990:	2100      	movs	r1, #0
 8000992:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <ESP8266_ClearBuffer+0x1c>)
 8000994:	f003 fb14 	bl	8003fc0 <memset>
    esp8266_buffer_index = 0;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <ESP8266_ClearBuffer+0x20>)
 800099a:	2200      	movs	r2, #0
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000078 	.word	0x20000078
 80009a8:	20000278 	.word	0x20000278

080009ac <ESP8266_WaitForResponse>:
  * @param  expected: Expected response string
  * @param  timeout: Timeout in milliseconds
  * @retval ESP8266_Status_t
  */
static ESP8266_Status_t ESP8266_WaitForResponse(const char* expected, uint32_t timeout)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    uint32_t start_time = HAL_GetTick();
 80009b6:	f000 fd29 	bl	800140c <HAL_GetTick>
 80009ba:	60f8      	str	r0, [r7, #12]
    
    while ((HAL_GetTick() - start_time) < timeout) {
 80009bc:	e029      	b.n	8000a12 <ESP8266_WaitForResponse+0x66>
        // Process incoming DMA data continuously
        ESP8266_ProcessDMAData();
 80009be:	f7ff ff89 	bl	80008d4 <ESP8266_ProcessDMAData>
        
        // Check if we got the expected response
        if (strstr(esp8266_buffer, expected) != NULL) {
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	4819      	ldr	r0, [pc, #100]	@ (8000a2c <ESP8266_WaitForResponse+0x80>)
 80009c6:	f003 fb39 	bl	800403c <strstr>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <ESP8266_WaitForResponse+0x32>
            // Give a small delay to catch any trailing data
            HAL_Delay(100);
 80009d0:	2064      	movs	r0, #100	@ 0x64
 80009d2:	f000 fd27 	bl	8001424 <HAL_Delay>
            ESP8266_ProcessDMAData();
 80009d6:	f7ff ff7d 	bl	80008d4 <ESP8266_ProcessDMAData>
            return ESP8266_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e022      	b.n	8000a24 <ESP8266_WaitForResponse+0x78>
        }
        
        // Check for error responses
        if (strstr(esp8266_buffer, AT_RESP_ERROR) != NULL || 
 80009de:	4914      	ldr	r1, [pc, #80]	@ (8000a30 <ESP8266_WaitForResponse+0x84>)
 80009e0:	4812      	ldr	r0, [pc, #72]	@ (8000a2c <ESP8266_WaitForResponse+0x80>)
 80009e2:	f003 fb2b 	bl	800403c <strstr>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10d      	bne.n	8000a08 <ESP8266_WaitForResponse+0x5c>
            strstr(esp8266_buffer, AT_RESP_FAIL) != NULL ||
 80009ec:	4911      	ldr	r1, [pc, #68]	@ (8000a34 <ESP8266_WaitForResponse+0x88>)
 80009ee:	480f      	ldr	r0, [pc, #60]	@ (8000a2c <ESP8266_WaitForResponse+0x80>)
 80009f0:	f003 fb24 	bl	800403c <strstr>
 80009f4:	4603      	mov	r3, r0
        if (strstr(esp8266_buffer, AT_RESP_ERROR) != NULL || 
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <ESP8266_WaitForResponse+0x5c>
            strstr(esp8266_buffer, AT_RESP_DISCONNECT) != NULL) {
 80009fa:	490f      	ldr	r1, [pc, #60]	@ (8000a38 <ESP8266_WaitForResponse+0x8c>)
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <ESP8266_WaitForResponse+0x80>)
 80009fe:	f003 fb1d 	bl	800403c <strstr>
 8000a02:	4603      	mov	r3, r0
            strstr(esp8266_buffer, AT_RESP_FAIL) != NULL ||
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <ESP8266_WaitForResponse+0x60>
            return ESP8266_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e00b      	b.n	8000a24 <ESP8266_WaitForResponse+0x78>
        }
        
        // More frequent processing for better responsiveness
        HAL_Delay(50);
 8000a0c:	2032      	movs	r0, #50	@ 0x32
 8000a0e:	f000 fd09 	bl	8001424 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < timeout) {
 8000a12:	f000 fcfb 	bl	800140c <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d8cd      	bhi.n	80009be <ESP8266_WaitForResponse+0x12>
    }
    
    return ESP8266_TIMEOUT;
 8000a22:	2302      	movs	r3, #2
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000078 	.word	0x20000078
 8000a30:	08004a3c 	.word	0x08004a3c
 8000a34:	08004a44 	.word	0x08004a44
 8000a38:	08004a4c 	.word	0x08004a4c

08000a3c <ESP8266_UART_Transmit>:
  * @brief  Transmit data via UART
  * @param  data: Data to transmit
  * @retval None
  */
static void ESP8266_UART_Transmit(const char* data)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    if (esp8266_uart == NULL) {
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <ESP8266_UART_Transmit+0x3c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d010      	beq.n	8000a6e <ESP8266_UART_Transmit+0x32>
        return;
    }
    
    // Send command
    HAL_UART_Transmit(esp8266_uart, (uint8_t*)data, strlen(data), AT_TIMEOUT_DEFAULT);
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <ESP8266_UART_Transmit+0x3c>)
 8000a4e:	681c      	ldr	r4, [r3, #0]
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fbc7 	bl	80001e4 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	4620      	mov	r0, r4
 8000a62:	f002 f8b5 	bl	8002bd0 <HAL_UART_Transmit>
    
    // Small delay for ESP8266 to process
    HAL_Delay(200);
 8000a66:	20c8      	movs	r0, #200	@ 0xc8
 8000a68:	f000 fcdc 	bl	8001424 <HAL_Delay>
 8000a6c:	e000      	b.n	8000a70 <ESP8266_UART_Transmit+0x34>
        return;
 8000a6e:	bf00      	nop
}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000027c 	.word	0x2000027c

08000a7c <ESP8266_ProcessBuffer>:
/**
  * @brief  Process received buffer for MQTT messages
  * @retval None
  */
static void ESP8266_ProcessBuffer(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	@ 0x78
 8000a80:	af00      	add	r7, sp, #0
    // Check for MQTT message reception: +MQTTSUBRECV:0,"led/control",2,on
    char* mqtt_msg = strstr(esp8266_buffer, AT_RESP_MQTT_RECV);
 8000a82:	4936      	ldr	r1, [pc, #216]	@ (8000b5c <ESP8266_ProcessBuffer+0xe0>)
 8000a84:	4836      	ldr	r0, [pc, #216]	@ (8000b60 <ESP8266_ProcessBuffer+0xe4>)
 8000a86:	f003 fad9 	bl	800403c <strstr>
 8000a8a:	6738      	str	r0, [r7, #112]	@ 0x70
    if (mqtt_msg != NULL) {
 8000a8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d060      	beq.n	8000b54 <ESP8266_ProcessBuffer+0xd8>
        // First, find the message content (after the last comma) BEFORE modifying the string
        char* msg_start = strrchr(mqtt_msg, ',');
 8000a92:	212c      	movs	r1, #44	@ 0x2c
 8000a94:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000a96:	f003 fabb 	bl	8004010 <strrchr>
 8000a9a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (msg_start != NULL) {
 8000a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d058      	beq.n	8000b54 <ESP8266_ProcessBuffer+0xd8>
            msg_start++; // Skip the comma
 8000aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
            
            // Now find the topic (first quoted string)
            char* topic_start = strchr(mqtt_msg, '"');
 8000aa8:	2122      	movs	r1, #34	@ 0x22
 8000aaa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000aac:	f003 fa90 	bl	8003fd0 <strchr>
 8000ab0:	66b8      	str	r0, [r7, #104]	@ 0x68
            if (topic_start != NULL) {
 8000ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d04d      	beq.n	8000b54 <ESP8266_ProcessBuffer+0xd8>
                topic_start++; // Skip the opening quote
 8000ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000aba:	3301      	adds	r3, #1
 8000abc:	66bb      	str	r3, [r7, #104]	@ 0x68
                char* topic_end = strchr(topic_start, '"');
 8000abe:	2122      	movs	r1, #34	@ 0x22
 8000ac0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000ac2:	f003 fa85 	bl	8003fd0 <strchr>
 8000ac6:	6678      	str	r0, [r7, #100]	@ 0x64
                if (topic_end != NULL) {
 8000ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d042      	beq.n	8000b54 <ESP8266_ProcessBuffer+0xd8>
                    // Temporarily null terminate topic for copying
                    char saved_char = *topic_end;
 8000ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    *topic_end = '\0';
 8000ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
                    
                    // Remove any trailing whitespace/newlines from message
                    char* msg_end = msg_start + strlen(msg_start) - 1;
 8000adc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000ade:	f7ff fb81 	bl	80001e4 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ae8:	4413      	add	r3, r2
 8000aea:	677b      	str	r3, [r7, #116]	@ 0x74
                    while (msg_end > msg_start && (*msg_end == '\r' || *msg_end == '\n' || *msg_end == ' ')) {
 8000aec:	e005      	b.n	8000afa <ESP8266_ProcessBuffer+0x7e>
                        *msg_end = '\0';
 8000aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
                        msg_end--;
 8000af4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000af6:	3b01      	subs	r3, #1
 8000af8:	677b      	str	r3, [r7, #116]	@ 0x74
                    while (msg_end > msg_start && (*msg_end == '\r' || *msg_end == '\n' || *msg_end == ' ')) {
 8000afa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d90b      	bls.n	8000b1a <ESP8266_ProcessBuffer+0x9e>
 8000b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b0d      	cmp	r3, #13
 8000b08:	d0f1      	beq.n	8000aee <ESP8266_ProcessBuffer+0x72>
 8000b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d0ed      	beq.n	8000aee <ESP8266_ProcessBuffer+0x72>
 8000b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b20      	cmp	r3, #32
 8000b18:	d0e9      	beq.n	8000aee <ESP8266_ProcessBuffer+0x72>
                    }
                    
                    // Make local copies to avoid buffer clearing issues
                    char topic_copy[64];
                    char message_copy[32];
                    strncpy(topic_copy, topic_start, sizeof(topic_copy) - 1);
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	223f      	movs	r2, #63	@ 0x3f
 8000b20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fa61 	bl	8003fea <strncpy>
                    topic_copy[sizeof(topic_copy) - 1] = '\0';
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                    strncpy(message_copy, msg_start, sizeof(message_copy) - 1);
 8000b2e:	463b      	mov	r3, r7
 8000b30:	221f      	movs	r2, #31
 8000b32:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 fa58 	bl	8003fea <strncpy>
                    message_copy[sizeof(message_copy) - 1] = '\0';
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	77fb      	strb	r3, [r7, #31]
                    
                    // Restore the original character (good practice)
                    *topic_end = saved_char;
 8000b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b40:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8000b44:	701a      	strb	r2, [r3, #0]
                    
                    // Call callback function with safe copies
                    ESP8266_OnMQTTMessageReceived(topic_copy, message_copy);
 8000b46:	463a      	mov	r2, r7
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f9f4 	bl	8000f3c <ESP8266_OnMQTTMessageReceived>
                }
            }
        }
    }
}
 8000b54:	bf00      	nop
 8000b56:	3778      	adds	r7, #120	@ 0x78
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08004a58 	.word	0x08004a58
 8000b60:	20000078 	.word	0x20000078

08000b64 <ESP8266_ProcessDMAByte>:
  * @brief  Process a single byte from DMA buffer
  * @param  data: Received byte
  * @retval None
  */
static void ESP8266_ProcessDMAByte(uint8_t data)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
    // Filter characters - only process printable ASCII and CR/LF
    if ((data >= 0x20 && data <= 0x7E) || data == '\r' || data == '\n') {
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b1f      	cmp	r3, #31
 8000b72:	d902      	bls.n	8000b7a <ESP8266_ProcessDMAByte+0x16>
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b7e      	cmp	r3, #126	@ 0x7e
 8000b78:	d905      	bls.n	8000b86 <ESP8266_ProcessDMAByte+0x22>
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b0d      	cmp	r3, #13
 8000b7e:	d002      	beq.n	8000b86 <ESP8266_ProcessDMAByte+0x22>
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d136      	bne.n	8000bf4 <ESP8266_ProcessDMAByte+0x90>
        if (esp8266_buffer_index < ESP8266_BUFFER_SIZE - 1) {
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8000b8e:	d81f      	bhi.n	8000bd0 <ESP8266_ProcessDMAByte+0x6c>
            esp8266_buffer[esp8266_buffer_index++] = data;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	b291      	uxth	r1, r2
 8000b98:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000b9a:	8011      	strh	r1, [r2, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <ESP8266_ProcessDMAByte+0x9c>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	5453      	strb	r3, [r2, r1]
            esp8266_buffer[esp8266_buffer_index] = '\0';
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <ESP8266_ProcessDMAByte+0x9c>)
 8000bac:	2100      	movs	r1, #0
 8000bae:	5499      	strb	r1, [r3, r2]
            
            // Process complete lines
            if (data == '\n') {
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d11e      	bne.n	8000bf4 <ESP8266_ProcessDMAByte+0x90>
                if (mqtt_subscribed) {
 8000bb6:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <ESP8266_ProcessDMAByte+0xa0>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <ESP8266_ProcessDMAByte+0x5e>
                    ESP8266_ProcessBuffer();
 8000bbe:	f7ff ff5d 	bl	8000a7c <ESP8266_ProcessBuffer>
                }
                // Only clear buffer if it's getting large to avoid interfering with AT responses
                if (esp8266_buffer_index > 100) {
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	2b64      	cmp	r3, #100	@ 0x64
 8000bc8:	d914      	bls.n	8000bf4 <ESP8266_ProcessDMAByte+0x90>
                    ESP8266_ClearBuffer();
 8000bca:	f7ff fedd 	bl	8000988 <ESP8266_ClearBuffer>
            ESP8266_ClearBuffer();
            esp8266_buffer[esp8266_buffer_index++] = data;
            esp8266_buffer[esp8266_buffer_index] = '\0';
        }
    }
}
 8000bce:	e011      	b.n	8000bf4 <ESP8266_ProcessDMAByte+0x90>
            ESP8266_ClearBuffer();
 8000bd0:	f7ff feda 	bl	8000988 <ESP8266_ClearBuffer>
            esp8266_buffer[esp8266_buffer_index++] = data;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000bde:	8011      	strh	r1, [r2, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <ESP8266_ProcessDMAByte+0x9c>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	5453      	strb	r3, [r2, r1]
            esp8266_buffer[esp8266_buffer_index] = '\0';
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <ESP8266_ProcessDMAByte+0x98>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <ESP8266_ProcessDMAByte+0x9c>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	5499      	strb	r1, [r3, r2]
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000278 	.word	0x20000278
 8000c00:	20000078 	.word	0x20000078
 8000c04:	2000027a 	.word	0x2000027a

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fb98 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f86e 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f91a 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c18:	f000 f8f0 	bl	8000dfc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c1c:	f000 f8c4 	bl	8000da8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Initialize LED to OFF state
  LED_Control(false);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f965 	bl	8000ef0 <LED_Control>
  
  // Initialize ESP8266 WiFi module with UART2
  if (ESP8266_Init(&huart2) == ESP8266_OK) {
 8000c26:	4823      	ldr	r0, [pc, #140]	@ (8000cb4 <main+0xac>)
 8000c28:	f7ff fcd0 	bl	80005cc <ESP8266_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d125      	bne.n	8000c7e <main+0x76>
    // Connect to WiFi
    if (ESP8266_ConnectWiFi(WIFI_SSID, WIFI_PASSWORD) == ESP8266_OK) {        // Connect to MQTT broker
 8000c32:	4921      	ldr	r1, [pc, #132]	@ (8000cb8 <main+0xb0>)
 8000c34:	4821      	ldr	r0, [pc, #132]	@ (8000cbc <main+0xb4>)
 8000c36:	f7ff fd51 	bl	80006dc <ESP8266_ConnectWiFi>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11e      	bne.n	8000c7e <main+0x76>
        if (ESP8266_ConnectMQTT(MQTT_BROKER_IP, MQTT_BROKER_PORT, MQTT_CLIENT_ID) == ESP8266_OK) {
 8000c40:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc0 <main+0xb8>)
 8000c42:	f240 715b 	movw	r1, #1883	@ 0x75b
 8000c46:	481f      	ldr	r0, [pc, #124]	@ (8000cc4 <main+0xbc>)
 8000c48:	f7ff fd68 	bl	800071c <ESP8266_ConnectMQTT>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d115      	bne.n	8000c7e <main+0x76>
          // Subscribe to LED control topic
          ESP8266_SubscribeMQTT(MQTT_TOPIC_LED_CONTROL);
 8000c52:	481d      	ldr	r0, [pc, #116]	@ (8000cc8 <main+0xc0>)
 8000c54:	f7ff fdb8 	bl	80007c8 <ESP8266_SubscribeMQTT>
          
          // Subscribe to status request topic (optional enhancement)
          ESP8266_SubscribeMQTT(MQTT_TOPIC_STATUS_REQUEST);
 8000c58:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <main+0xc4>)
 8000c5a:	f7ff fdb5 	bl	80007c8 <ESP8266_SubscribeMQTT>
          
          // Publish initial status (LED starts OFF)
          snprintf(status_message, sizeof(status_message), "STM32 Connected - LED: %s", led_state ? "ON" : "OFF");
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <main+0xc8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <main+0x62>
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <main+0xcc>)
 8000c68:	e000      	b.n	8000c6c <main+0x64>
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <main+0xd0>)
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <main+0xd4>)
 8000c6e:	2132      	movs	r1, #50	@ 0x32
 8000c70:	481b      	ldr	r0, [pc, #108]	@ (8000ce0 <main+0xd8>)
 8000c72:	f003 f96f 	bl	8003f54 <sniprintf>
          ESP8266_PublishMQTT(MQTT_TOPIC_LED_STATUS, status_message);
 8000c76:	491a      	ldr	r1, [pc, #104]	@ (8000ce0 <main+0xd8>)
 8000c78:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <main+0xdc>)
 8000c7a:	f7ff fdcf 	bl	800081c <ESP8266_PublishMQTT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Process DMA data from ESP8266
    ESP8266_ProcessDMAData();
 8000c7e:	f7ff fe29 	bl	80008d4 <ESP8266_ProcessDMAData>
    
    // Handle deferred status updates (avoid sending from interrupt context)
    if (status_update_pending) {
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <main+0xe0>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <main+0x76>
      status_update_pending = false;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <main+0xe0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
      snprintf(status_message, sizeof(status_message), "LED: %s", led_state ? "ON" : "OFF");
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <main+0xc8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <main+0x94>
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <main+0xcc>)
 8000c9a:	e000      	b.n	8000c9e <main+0x96>
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <main+0xd0>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	@ (8000cec <main+0xe4>)
 8000ca0:	2132      	movs	r1, #50	@ 0x32
 8000ca2:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <main+0xd8>)
 8000ca4:	f003 f956 	bl	8003f54 <sniprintf>
      ESP8266_PublishMQTT(MQTT_TOPIC_LED_STATUS, status_message);
 8000ca8:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <main+0xd8>)
 8000caa:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <main+0xdc>)
 8000cac:	f7ff fdb6 	bl	800081c <ESP8266_PublishMQTT>
    ESP8266_ProcessDMAData();
 8000cb0:	e7e5      	b.n	8000c7e <main+0x76>
 8000cb2:	bf00      	nop
 8000cb4:	20000384 	.word	0x20000384
 8000cb8:	08004a68 	.word	0x08004a68
 8000cbc:	08004a74 	.word	0x08004a74
 8000cc0:	08004a80 	.word	0x08004a80
 8000cc4:	08004a98 	.word	0x08004a98
 8000cc8:	08004aa8 	.word	0x08004aa8
 8000ccc:	08004ab4 	.word	0x08004ab4
 8000cd0:	2000048c 	.word	0x2000048c
 8000cd4:	08004ac8 	.word	0x08004ac8
 8000cd8:	08004acc 	.word	0x08004acc
 8000cdc:	08004ad0 	.word	0x08004ad0
 8000ce0:	20000490 	.word	0x20000490
 8000ce4:	08004aec 	.word	0x08004aec
 8000ce8:	200004c2 	.word	0x200004c2
 8000cec:	08004af8 	.word	0x08004af8

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	@ 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2230      	movs	r2, #48	@ 0x30
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 f95e 	bl	8003fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <SystemClock_Config+0xb0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a20      	ldr	r2, [pc, #128]	@ (8000da0 <SystemClock_Config+0xb0>)
 8000d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <SystemClock_Config+0xb0>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <SystemClock_Config+0xb4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <SystemClock_Config+0xb4>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <SystemClock_Config+0xb4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fa4e 	bl	8002200 <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d6a:	f000 f945 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fcb1 	bl	80026f0 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d94:	f000 f930 	bl	8000ff8 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	@ 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <MX_USART2_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000de0:	f001 fea6 	bl	8002b30 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 f905 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000384 	.word	0x20000384
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2010      	movs	r0, #16
 8000e24:	f000 fbfd 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e28:	2010      	movs	r0, #16
 8000e2a:	f000 fc16 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2011      	movs	r0, #17
 8000e34:	f000 fbf5 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e38:	2011      	movs	r0, #17
 8000e3a:	f000 fc0e 	bl	800165a <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_GPIO_Init+0x9c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000ebc:	480b      	ldr	r0, [pc, #44]	@ (8000eec <MX_GPIO_Init+0xa0>)
 8000ebe:	f001 f985 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000ec2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_GPIO_Init+0xa0>)
 8000edc:	f000 ffda 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <LED_Control>:
  * @brief  Control LED state
  * @param  state: true to turn on, false to turn off
  * @retval None
  */
void LED_Control(bool state)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    led_state = state;
 8000efa:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LED_Control+0x40>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	7013      	strb	r3, [r2, #0]
    
    if (state) {
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <LED_Control+0x24>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <LED_Control+0x44>)
 8000f0e:	f001 f95d 	bl	80021cc <HAL_GPIO_WritePin>
 8000f12:	e005      	b.n	8000f20 <LED_Control+0x30>
    } else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <LED_Control+0x44>)
 8000f1c:	f001 f956 	bl	80021cc <HAL_GPIO_WritePin>
    }
    
    // Set flag for deferred status update (avoid sending from interrupt context)
    status_update_pending = true;
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <LED_Control+0x48>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000048c 	.word	0x2000048c
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	200004c2 	.word	0x200004c2

08000f3c <ESP8266_OnMQTTMessageReceived>:
  * @param  topic: MQTT topic
  * @param  message: MQTT message
  * @retval None
  */
void ESP8266_OnMQTTMessageReceived(const char* topic, const char* message)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    if (strcmp(topic, MQTT_TOPIC_LED_CONTROL) == 0) {
 8000f46:	4923      	ldr	r1, [pc, #140]	@ (8000fd4 <ESP8266_OnMQTTMessageReceived+0x98>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff f941 	bl	80001d0 <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d131      	bne.n	8000fb8 <ESP8266_OnMQTTMessageReceived+0x7c>
        // Handle both uppercase and lowercase commands
        if (strcmp(message, "ON") == 0 || strcmp(message, "on") == 0 || 
 8000f54:	4920      	ldr	r1, [pc, #128]	@ (8000fd8 <ESP8266_OnMQTTMessageReceived+0x9c>)
 8000f56:	6838      	ldr	r0, [r7, #0]
 8000f58:	f7ff f93a 	bl	80001d0 <strcmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00d      	beq.n	8000f7e <ESP8266_OnMQTTMessageReceived+0x42>
 8000f62:	491e      	ldr	r1, [pc, #120]	@ (8000fdc <ESP8266_OnMQTTMessageReceived+0xa0>)
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f7ff f933 	bl	80001d0 <strcmp>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <ESP8266_OnMQTTMessageReceived+0x42>
            strcmp(message, "1") == 0) {
 8000f70:	491b      	ldr	r1, [pc, #108]	@ (8000fe0 <ESP8266_OnMQTTMessageReceived+0xa4>)
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f7ff f92c 	bl	80001d0 <strcmp>
 8000f78:	4603      	mov	r3, r0
        if (strcmp(message, "ON") == 0 || strcmp(message, "on") == 0 || 
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <ESP8266_OnMQTTMessageReceived+0x4a>

            LED_Control(true);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ffb6 	bl	8000ef0 <LED_Control>
        }
    } else if (strcmp(topic, MQTT_TOPIC_STATUS_REQUEST) == 0) {
        // Handle status request - immediately publish current status
        status_update_pending = true;
    }
}
 8000f84:	e022      	b.n	8000fcc <ESP8266_OnMQTTMessageReceived+0x90>
        } else if (strcmp(message, "OFF") == 0 || strcmp(message, "off") == 0 || 
 8000f86:	4917      	ldr	r1, [pc, #92]	@ (8000fe4 <ESP8266_OnMQTTMessageReceived+0xa8>)
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f7ff f921 	bl	80001d0 <strcmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00d      	beq.n	8000fb0 <ESP8266_OnMQTTMessageReceived+0x74>
 8000f94:	4914      	ldr	r1, [pc, #80]	@ (8000fe8 <ESP8266_OnMQTTMessageReceived+0xac>)
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff f91a 	bl	80001d0 <strcmp>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <ESP8266_OnMQTTMessageReceived+0x74>
                   strcmp(message, "0") == 0) {
 8000fa2:	4912      	ldr	r1, [pc, #72]	@ (8000fec <ESP8266_OnMQTTMessageReceived+0xb0>)
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f7ff f913 	bl	80001d0 <strcmp>
 8000faa:	4603      	mov	r3, r0
        } else if (strcmp(message, "OFF") == 0 || strcmp(message, "off") == 0 || 
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10d      	bne.n	8000fcc <ESP8266_OnMQTTMessageReceived+0x90>
            LED_Control(false);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ff9d 	bl	8000ef0 <LED_Control>
}
 8000fb6:	e009      	b.n	8000fcc <ESP8266_OnMQTTMessageReceived+0x90>
    } else if (strcmp(topic, MQTT_TOPIC_STATUS_REQUEST) == 0) {
 8000fb8:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <ESP8266_OnMQTTMessageReceived+0xb4>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff f908 	bl	80001d0 <strcmp>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <ESP8266_OnMQTTMessageReceived+0x90>
        status_update_pending = true;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <ESP8266_OnMQTTMessageReceived+0xb8>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08004aa8 	.word	0x08004aa8
 8000fd8:	08004ac8 	.word	0x08004ac8
 8000fdc:	08004b00 	.word	0x08004b00
 8000fe0:	08004b04 	.word	0x08004b04
 8000fe4:	08004acc 	.word	0x08004acc
 8000fe8:	08004b08 	.word	0x08004b08
 8000fec:	08004b0c 	.word	0x08004b0c
 8000ff0:	08004ab4 	.word	0x08004ab4
 8000ff4:	200004c2 	.word	0x200004c2

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <Error_Handler+0x8>

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <HAL_MspInit+0x4c>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_MspInit+0x4c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_UART_MspInit+0x150>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 8091 	bne.w	800119a <HAL_UART_MspInit+0x146>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <HAL_UART_MspInit+0x154>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	4a49      	ldr	r2, [pc, #292]	@ (80011a8 <HAL_UART_MspInit+0x154>)
 8001082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001086:	6413      	str	r3, [r2, #64]	@ 0x40
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <HAL_UART_MspInit+0x154>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_UART_MspInit+0x154>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a42      	ldr	r2, [pc, #264]	@ (80011a8 <HAL_UART_MspInit+0x154>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a4:	4b40      	ldr	r3, [pc, #256]	@ (80011a8 <HAL_UART_MspInit+0x154>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b0:	230c      	movs	r3, #12
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c0:	2307      	movs	r3, #7
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4838      	ldr	r0, [pc, #224]	@ (80011ac <HAL_UART_MspInit+0x158>)
 80010cc:	f000 fee2 	bl	8001e94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010d0:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010d2:	4a38      	ldr	r2, [pc, #224]	@ (80011b4 <HAL_UART_MspInit+0x160>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80010d6:	4b36      	ldr	r3, [pc, #216]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001112:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 8001114:	f000 fabc 	bl	8001690 <HAL_DMA_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800111e:	f7ff ff6b 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a22      	ldr	r2, [pc, #136]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 8001126:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001128:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <HAL_UART_MspInit+0x15c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001130:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <HAL_UART_MspInit+0x168>)
 8001132:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001136:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800113a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 800113e:	2240      	movs	r2, #64	@ 0x40
 8001140:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 800114a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001170:	f000 fa8e 	bl	8001690 <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800117a:	f7ff ff3d 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001182:	639a      	str	r2, [r3, #56]	@ 0x38
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <HAL_UART_MspInit+0x164>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2026      	movs	r0, #38	@ 0x26
 8001190:	f000 fa47 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001194:	2026      	movs	r0, #38	@ 0x26
 8001196:	f000 fa60 	bl	800165a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	200003cc 	.word	0x200003cc
 80011b4:	40026088 	.word	0x40026088
 80011b8:	2000042c 	.word	0x2000042c
 80011bc:	400260a0 	.word	0x400260a0

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f8e5 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <DMA1_Stream5_IRQHandler+0x10>)
 8001226:	f000 fbcb 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200003cc 	.word	0x200003cc

08001234 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <DMA1_Stream6_IRQHandler+0x10>)
 800123a:	f000 fbc1 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000042c 	.word	0x2000042c

08001248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <USART2_IRQHandler+0x10>)
 800124e:	f001 fd6f 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000384 	.word	0x20000384

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f002 feec 	bl	8004068 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20020000 	.word	0x20020000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	200004c4 	.word	0x200004c4
 80012c4:	20000618 	.word	0x20000618

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f0:	f7ff ffea 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	@ (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	@ (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f002 feab 	bl	8004074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fc73 	bl	8000c08 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001330:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 8001334:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001338:	20000614 	.word	0x20000614

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f94f 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	200f      	movs	r0, #15
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fe46 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f967 	bl	8001676 <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f92f 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	200004c8 	.word	0x200004c8

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200004c8 	.word	0x200004c8

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	@ (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	@ (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	@ (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	@ 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	@ 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f7ff ff8e 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff29 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff3e 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff8e 	bl	8001560 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5d 	bl	800150c <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff31 	bl	80014d0 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa2 	bl	80015c8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff feb6 	bl	800140c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e099      	b.n	80017e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016cc:	e00f      	b.n	80016ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ce:	f7ff fe9d 	bl	800140c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d908      	bls.n	80016ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e078      	b.n	80017e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e8      	bne.n	80016ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <HAL_DMA_Init+0x158>)
 8001708:	4013      	ands	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	2b04      	cmp	r3, #4
 8001746:	d107      	bne.n	8001758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	4313      	orrs	r3, r2
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f023 0307 	bic.w	r3, r3, #7
 800176e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	2b04      	cmp	r3, #4
 8001780:	d117      	bne.n	80017b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4313      	orrs	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00e      	beq.n	80017b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fb01 	bl	8001d9c <DMA_CheckFifoParam>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2240      	movs	r2, #64	@ 0x40
 80017a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017ae:	2301      	movs	r3, #1
 80017b0:	e016      	b.n	80017e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fab8 	bl	8001d30 <DMA_CalcBaseAndBitshift>
 80017c0:	4603      	mov	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c8:	223f      	movs	r2, #63	@ 0x3f
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	f010803f 	.word	0xf010803f

080017ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Start_IT+0x26>
 800180e:	2302      	movs	r3, #2
 8001810:	e040      	b.n	8001894 <HAL_DMA_Start_IT+0xa8>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d12f      	bne.n	8001886 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2202      	movs	r2, #2
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fa4a 	bl	8001cd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001844:	223f      	movs	r2, #63	@ 0x3f
 8001846:	409a      	lsls	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0216 	orr.w	r2, r2, #22
 800185a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0208 	orr.w	r2, r2, #8
 8001872:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e005      	b.n	8001892 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800188e:	2302      	movs	r3, #2
 8001890:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018aa:	f7ff fdaf 	bl	800140c <HAL_GetTick>
 80018ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2280      	movs	r2, #128	@ 0x80
 80018c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e052      	b.n	8001974 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0216 	bic.w	r2, r2, #22
 80018dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <HAL_DMA_Abort+0x62>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0208 	bic.w	r2, r2, #8
 800190c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191e:	e013      	b.n	8001948 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001920:	f7ff fd74 	bl	800140c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b05      	cmp	r3, #5
 800192c:	d90c      	bls.n	8001948 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e015      	b.n	8001974 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e4      	bne.n	8001920 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195a:	223f      	movs	r2, #63	@ 0x3f
 800195c:	409a      	lsls	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d004      	beq.n	800199a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2280      	movs	r2, #128	@ 0x80
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00c      	b.n	80019b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2205      	movs	r2, #5
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001c08 <HAL_DMA_IRQHandler+0x248>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a8e      	ldr	r2, [pc, #568]	@ (8001c0c <HAL_DMA_IRQHandler+0x24c>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2208      	movs	r2, #8
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a18:	2208      	movs	r2, #8
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d012      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5a:	f043 0202 	orr.w	r2, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a66:	2204      	movs	r2, #4
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	2204      	movs	r2, #4
 8001a86:	409a      	lsls	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	f043 0204 	orr.w	r2, r3, #4
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d043      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03c      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	2210      	movs	r2, #16
 8001abc:	409a      	lsls	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d018      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d108      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d024      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
 8001aee:	e01f      	b.n	8001b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01b      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
 8001b00:	e016      	b.n	8001b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0208 	bic.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	2220      	movs	r2, #32
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 808f 	beq.w	8001c60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8087 	beq.w	8001c60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	2220      	movs	r2, #32
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d136      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0216 	bic.w	r2, r2, #22
 8001b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_DMA_IRQHandler+0x1da>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0208 	bic.w	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	223f      	movs	r2, #63	@ 0x3f
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d07e      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
        }
        return;
 8001bd6:	e079      	b.n	8001ccc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01d      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d031      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e02c      	b.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
 8001c20:	e01e      	b.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10f      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d032      	beq.n	8001cce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2205      	movs	r2, #5
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d307      	bcc.n	8001ca8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f2      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x2cc>
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ca8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e000      	b.n	8001cce <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ccc:	bf00      	nop
    }
  }
}
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b40      	cmp	r3, #64	@ 0x40
 8001d00:	d108      	bne.n	8001d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d12:	e007      	b.n	8001d24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3b10      	subs	r3, #16
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <DMA_CalcBaseAndBitshift+0x64>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d4a:	4a13      	ldr	r2, [pc, #76]	@ (8001d98 <DMA_CalcBaseAndBitshift+0x68>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d909      	bls.n	8001d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	1d1a      	adds	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d70:	e007      	b.n	8001d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	aaaaaaab 	.word	0xaaaaaaab
 8001d98:	08004b28 	.word	0x08004b28

08001d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d11f      	bne.n	8001df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d856      	bhi.n	8001e6a <DMA_CheckFifoParam+0xce>
 8001dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <DMA_CheckFifoParam+0x28>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001dd5 	.word	0x08001dd5
 8001dc8:	08001de7 	.word	0x08001de7
 8001dcc:	08001dd5 	.word	0x08001dd5
 8001dd0:	08001e6b 	.word	0x08001e6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d046      	beq.n	8001e6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de4:	e043      	b.n	8001e6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dee:	d140      	bne.n	8001e72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df4:	e03d      	b.n	8001e72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dfe:	d121      	bne.n	8001e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d837      	bhi.n	8001e76 <DMA_CheckFifoParam+0xda>
 8001e06:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <DMA_CheckFifoParam+0x70>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e23 	.word	0x08001e23
 8001e14:	08001e1d 	.word	0x08001e1d
 8001e18:	08001e35 	.word	0x08001e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e20:	e030      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d025      	beq.n	8001e7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e32:	e022      	b.n	8001e7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e3c:	d11f      	bne.n	8001e7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e42:	e01c      	b.n	8001e7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d903      	bls.n	8001e52 <DMA_CheckFifoParam+0xb6>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d003      	beq.n	8001e58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e50:	e018      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
      break;
 8001e56:	e015      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
      break;
 8001e68:	e00b      	b.n	8001e82 <DMA_CheckFifoParam+0xe6>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e00a      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e008      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e006      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e004      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e002      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
    }
  } 
  
  return status; 
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e16b      	b.n	8002188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 815a 	bne.w	8002182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d130      	bne.n	8001f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0201 	and.w	r2, r3, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d017      	beq.n	8001f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d123      	bne.n	8001fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80b4 	beq.w	8002182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b60      	ldr	r3, [pc, #384]	@ (80021a0 <HAL_GPIO_Init+0x30c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	4a5f      	ldr	r2, [pc, #380]	@ (80021a0 <HAL_GPIO_Init+0x30c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002028:	6453      	str	r3, [r2, #68]	@ 0x44
 800202a:	4b5d      	ldr	r3, [pc, #372]	@ (80021a0 <HAL_GPIO_Init+0x30c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a5b      	ldr	r2, [pc, #364]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	@ (80021a8 <HAL_GPIO_Init+0x314>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_GPIO_Init+0x318>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_GPIO_Init+0x31c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <HAL_GPIO_Init+0x320>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x21a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	@ (80021b8 <HAL_GPIO_Init+0x324>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x216>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4d      	ldr	r2, [pc, #308]	@ (80021bc <HAL_GPIO_Init+0x328>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x212>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4c      	ldr	r2, [pc, #304]	@ (80021c0 <HAL_GPIO_Init+0x32c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4b      	ldr	r2, [pc, #300]	@ (80021c4 <HAL_GPIO_Init+0x330>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x20a>
 800209a:	2307      	movs	r3, #7
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x228>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a32      	ldr	r2, [pc, #200]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b30      	ldr	r3, [pc, #192]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a27      	ldr	r2, [pc, #156]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1d      	ldr	r2, [pc, #116]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <HAL_GPIO_Init+0x334>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae90 	bls.w	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e267      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800221e:	4b88      	ldr	r3, [pc, #544]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b85      	ldr	r3, [pc, #532]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002232:	2b08      	cmp	r3, #8
 8002234:	d112      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b82      	ldr	r3, [pc, #520]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b7e      	ldr	r3, [pc, #504]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e242      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x74>
 8002266:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b70      	ldr	r3, [pc, #448]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6f      	ldr	r2, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6c      	ldr	r2, [pc, #432]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b66      	ldr	r3, [pc, #408]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a65      	ldr	r2, [pc, #404]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f8a8 	bl	800140c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff f8a4 	bl	800140c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e207      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff f894 	bl	800140c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff f890 	bl	800140c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1f3      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002316:	4b4a      	ldr	r3, [pc, #296]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b44      	ldr	r3, [pc, #272]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1c7      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e03a      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_RCC_OscConfig+0x244>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7ff f849 	bl	800140c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237e:	f7ff f845 	bl	800140c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1a8      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4925      	ldr	r1, [pc, #148]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_RCC_OscConfig+0x244>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f828 	bl	800140c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff f824 	bl	800140c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e187      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d036      	beq.n	8002458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_RCC_OscConfig+0x248>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7ff f808 	bl	800140c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002400:	f7ff f804 	bl	800140c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e167      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x200>
 800241e:	e01b      	b.n	8002458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_OscConfig+0x248>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fff1 	bl	800140c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00e      	b.n	800244c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe ffed 	bl	800140c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d907      	bls.n	800244c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e150      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ea      	bne.n	800242e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8097 	beq.w	8002594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b81      	ldr	r3, [pc, #516]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b7d      	ldr	r3, [pc, #500]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a7c      	ldr	r2, [pc, #496]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b7a      	ldr	r3, [pc, #488]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b77      	ldr	r3, [pc, #476]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe ffad 	bl	800140c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe ffa9 	bl	800140c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e10c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x2ea>
 80024dc:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e0:	4a63      	ldr	r2, [pc, #396]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x30c>
 80024f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	4a5b      	ldr	r2, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	@ 0x70
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 800250c:	4b58      	ldr	r3, [pc, #352]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	@ 0x70
 8002518:	4b55      	ldr	r3, [pc, #340]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	4a54      	ldr	r2, [pc, #336]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe ff6e 	bl	800140c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe ff6a 	bl	800140c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0cb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCC_OscConfig+0x334>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe ff58 	bl	800140c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe ff54 	bl	800140c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0b5      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	4a38      	ldr	r2, [pc, #224]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a1 	beq.w	80026e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d05c      	beq.n	8002664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d141      	bne.n	8002636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe ff28 	bl	800140c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe ff24 	bl	800140c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e087      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	491b      	ldr	r1, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fefd 	bl	800140c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fef9 	bl	800140c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e05c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x416>
 8002634:	e054      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fee6 	bl	800140c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fee2 	bl	800140c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e045      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
 8002662:	e03d      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e038      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
 8002678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x4ec>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d028      	beq.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d121      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11a      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fe14 	bl	800140c <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fe10 	bl	800140c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fd74 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08004b10 	.word	0x08004b10
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b094      	sub	sp, #80	@ 0x50
 80028c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b79      	ldr	r3, [pc, #484]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d00d      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x40>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	f200 80e1 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ee:	e0db      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f4:	e0db      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b73      	ldr	r3, [pc, #460]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028fa:	e0d8      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b6f      	ldr	r3, [pc, #444]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002904:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b6d      	ldr	r3, [pc, #436]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b6a      	ldr	r3, [pc, #424]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800291c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	633b      	str	r3, [r7, #48]	@ 0x30
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	@ 0x34
 800292a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	6139      	str	r1, [r7, #16]
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002960:	4659      	mov	r1, fp
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4651      	mov	r1, sl
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4651      	mov	r1, sl
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4651      	mov	r1, sl
 8002970:	ebb2 0801 	subs.w	r8, r2, r1
 8002974:	4659      	mov	r1, fp
 8002976:	eb63 0901 	sbc.w	r9, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800298a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb18 0303 	adds.w	r3, r8, r3
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	462b      	mov	r3, r5
 800299c:	eb49 0303 	adc.w	r3, r9, r3
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ae:	4629      	mov	r1, r5
 80029b0:	024b      	lsls	r3, r1, #9
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b8:	4621      	mov	r1, r4
 80029ba:	024a      	lsls	r2, r1, #9
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c2:	2200      	movs	r2, #0
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029cc:	f7fd fc68 	bl	80002a0 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d8:	e058      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	4611      	mov	r1, r2
 80029e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0159      	lsls	r1, r3, #5
 8002a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a06:	0150      	lsls	r0, r2, #5
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a12:	4649      	mov	r1, r9
 8002a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a30:	eb63 050b 	sbc.w	r5, r3, fp
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	00eb      	lsls	r3, r5, #3
 8002a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a42:	00e2      	lsls	r2, r4, #3
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	4643      	mov	r3, r8
 8002a4a:	18e3      	adds	r3, r4, r3
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	464b      	mov	r3, r9
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	028b      	lsls	r3, r1, #10
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	028a      	lsls	r2, r1, #10
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a76:	2200      	movs	r2, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	61fa      	str	r2, [r7, #28]
 8002a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a80:	f7fd fc0e 	bl	80002a0 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3750      	adds	r7, #80	@ 0x50
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	@ (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08004b20 	.word	0x08004b20

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	f7ff ffdc 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0b5b      	lsrs	r3, r3, #13
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08004b20 	.word	0x08004b20

08002b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e042      	b.n	8002bc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fa7c 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	@ 0x24
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 ff79 	bl	8003a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d175      	bne.n	8002cdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_UART_Transmit+0x2c>
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e06e      	b.n	8002cde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2221      	movs	r2, #33	@ 0x21
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fbfd 	bl	800140c <HAL_GetTick>
 8002c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c28:	d108      	bne.n	8002c3c <HAL_UART_Transmit+0x6c>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e003      	b.n	8002c44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c44:	e02e      	b.n	8002ca4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2180      	movs	r1, #128	@ 0x80
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fc49 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e03a      	b.n	8002cde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3302      	adds	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e007      	b.n	8002c96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1cb      	bne.n	8002c46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2140      	movs	r1, #64	@ 0x40
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fc15 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e006      	b.n	8002cde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d112      	bne.n	8002d26 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_UART_Receive_DMA+0x26>
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e00b      	b.n	8002d28 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fc3d 	bl	800359c <UART_Start_Receive_DMA>
 8002d22:	4603      	mov	r3, r0
 8002d24:	e000      	b.n	8002d28 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0ba      	sub	sp, #232	@ 0xe8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fdae 	bl	80038f0 <UART_Receive_IT>
      return;
 8002d94:	e273      	b.n	800327e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80de 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80d1 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
 8002dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
 8002e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d011      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0208 	orr.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 820a 	beq.w	8003274 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fd39 	bl	80038f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_UART_IRQHandler+0x17a>
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04f      	beq.n	8002f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fc44 	bl	8003738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b40      	cmp	r3, #64	@ 0x40
 8002ebc:	d141      	bne.n	8002f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002eea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d9      	bne.n	8002ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d013      	beq.n	8002f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	4a8a      	ldr	r2, [pc, #552]	@ (8003140 <HAL_UART_IRQHandler+0x410>)
 8002f18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fd2c 	bl	800197c <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f9c0 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00a      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f9bc 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e006      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9b8 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f56:	e18d      	b.n	8003274 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	bf00      	nop
    return;
 8002f5a:	e18b      	b.n	8003274 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 8167 	bne.w	8003234 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8160 	beq.w	8003234 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8159 	beq.w	8003234 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b40      	cmp	r3, #64	@ 0x40
 8002fa4:	f040 80ce 	bne.w	8003144 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a9 	beq.w	8003110 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	f080 80a2 	bcs.w	8003110 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fde:	f000 8088 	beq.w	80030f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800300e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800301a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1d9      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800303e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003052:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003056:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800305a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e1      	bne.n	800302e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3314      	adds	r3, #20
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800307a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800307c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800308e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800309c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c2:	f023 0310 	bic.w	r3, r3, #16
 80030c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e3      	bne.n	80030b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe fbd5 	bl	800189c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003100:	b29b      	uxth	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8e3 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800310e:	e0b3      	b.n	8003278 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 80ad 	bne.w	8003278 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003128:	f040 80a6 	bne.w	8003278 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8cb 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
      return;
 800313e:	e09b      	b.n	8003278 <HAL_UART_IRQHandler+0x548>
 8003140:	080037ff 	.word	0x080037ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800314c:	b29b      	uxth	r3, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 808e 	beq.w	800327c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8089 	beq.w	800327c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800318e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800319c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e3      	bne.n	800316a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3314      	adds	r3, #20
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	623b      	str	r3, [r7, #32]
   return(result);
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3314      	adds	r3, #20
 80031c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e3      	bne.n	80031a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0310 	bic.w	r3, r3, #16
 80031fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800320c:	61fa      	str	r2, [r7, #28]
 800320e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	617b      	str	r3, [r7, #20]
   return(result);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e3      	bne.n	80031e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f851 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003232:	e023      	b.n	800327c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_UART_IRQHandler+0x524>
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fae7 	bl	8003820 <UART_Transmit_IT>
    return;
 8003252:	e014      	b.n	800327e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00e      	beq.n	800327e <HAL_UART_IRQHandler+0x54e>
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fb27 	bl	80038c0 <UART_EndTransmit_IT>
    return;
 8003272:	e004      	b.n	800327e <HAL_UART_IRQHandler+0x54e>
    return;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <HAL_UART_IRQHandler+0x54e>
      return;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_UART_IRQHandler+0x54e>
      return;
 800327c:	bf00      	nop
  }
}
 800327e:	37e8      	adds	r7, #232	@ 0xe8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09c      	sub	sp, #112	@ 0x70
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d172      	bne.n	80033ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800330a:	2200      	movs	r2, #0
 800330c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800330e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800331e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800332e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003330:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800333c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e5      	bne.n	800330e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
 800335a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3314      	adds	r3, #20
 8003360:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003362:	647a      	str	r2, [r7, #68]	@ 0x44
 8003364:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e5      	bne.n	8003342 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	623b      	str	r3, [r7, #32]
   return(result);
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338c:	663b      	str	r3, [r7, #96]	@ 0x60
 800338e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003396:	633a      	str	r2, [r7, #48]	@ 0x30
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800339c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d119      	bne.n	80033ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f023 0310 	bic.w	r3, r3, #16
 80033d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033da:	61fa      	str	r2, [r7, #28]
 80033dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	617b      	str	r3, [r7, #20]
   return(result);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f0:	2200      	movs	r2, #0
 80033f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003400:	4619      	mov	r1, r3
 8003402:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003404:	f7ff ff66 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003408:	e002      	b.n	8003410 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800340a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800340c:	f7ff ff44 	bl	8003298 <HAL_UART_RxCpltCallback>
}
 8003410:	bf00      	nop
 8003412:	3770      	adds	r7, #112	@ 0x70
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	d108      	bne.n	8003446 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	b29b      	uxth	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff ff48 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003444:	e002      	b.n	800344c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff30 	bl	80032ac <HAL_UART_RxHalfCpltCallback>
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b21      	cmp	r3, #33	@ 0x21
 8003486:	d108      	bne.n	800349a <UART_DMAError+0x46>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f000 f927 	bl	80036e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b40      	cmp	r3, #64	@ 0x40
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b22      	cmp	r3, #34	@ 0x22
 80034ba:	d108      	bne.n	80034ce <UART_DMAError+0x7a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2200      	movs	r2, #0
 80034c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80034c8:	68b8      	ldr	r0, [r7, #8]
 80034ca:	f000 f935 	bl	8003738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f7ff fef0 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	e03b      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d037      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fd ff83 	bl	800140c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <UART_WaitOnFlagUntilTimeout+0x30>
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e03a      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d023      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b80      	cmp	r3, #128	@ 0x80
 800352e:	d020      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d01d      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d116      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8ec 	bl	8003738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2208      	movs	r2, #8
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e00f      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	429a      	cmp	r2, r3
 800358e:	d0b4      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b098      	sub	sp, #96	@ 0x60
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2222      	movs	r2, #34	@ 0x22
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	4a44      	ldr	r2, [pc, #272]	@ (80036dc <UART_Start_Receive_DMA+0x140>)
 80035ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	4a43      	ldr	r2, [pc, #268]	@ (80036e0 <UART_Start_Receive_DMA+0x144>)
 80035d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	4a42      	ldr	r2, [pc, #264]	@ (80036e4 <UART_Start_Receive_DMA+0x148>)
 80035da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	2200      	movs	r2, #0
 80035e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80035e4:	f107 0308 	add.w	r3, r7, #8
 80035e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	f7fe f8f6 	bl	80017ec <HAL_DMA_Start_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2210      	movs	r2, #16
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e05d      	b.n	80036d4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d019      	beq.n	800366a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003656:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800365c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	657b      	str	r3, [r7, #84]	@ 0x54
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800368a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800368c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	617b      	str	r3, [r7, #20]
   return(result);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80036be:	627a      	str	r2, [r7, #36]	@ 0x24
 80036c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6a39      	ldr	r1, [r7, #32]
 80036c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e5      	bne.n	800369e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3760      	adds	r7, #96	@ 0x60
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	080032ed 	.word	0x080032ed
 80036e0:	08003419 	.word	0x08003419
 80036e4:	08003455 	.word	0x08003455

080036e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	@ 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	61ba      	str	r2, [r7, #24]
 8003712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6979      	ldr	r1, [r7, #20]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	613b      	str	r3, [r7, #16]
   return(result);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e5      	bne.n	80036f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800372c:	bf00      	nop
 800372e:	3724      	adds	r7, #36	@ 0x24
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b095      	sub	sp, #84	@ 0x54
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003760:	643a      	str	r2, [r7, #64]	@ 0x40
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	61fb      	str	r3, [r7, #28]
   return(result);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800379a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d119      	bne.n	80037e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037d0:	61ba      	str	r2, [r7, #24]
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	613b      	str	r3, [r7, #16]
   return(result);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037f2:	bf00      	nop
 80037f4:	3754      	adds	r7, #84	@ 0x54
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff fd54 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b21      	cmp	r3, #33	@ 0x21
 8003832:	d13e      	bne.n	80038b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383c:	d114      	bne.n	8003868 <UART_Transmit_IT+0x48>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d110      	bne.n	8003868 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800385a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	621a      	str	r2, [r3, #32]
 8003866:	e008      	b.n	800387a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	1c59      	adds	r1, r3, #1
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6211      	str	r1, [r2, #32]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29b      	uxth	r3, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800389c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
  }
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fccf 	bl	8003284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	@ 0x30
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b22      	cmp	r3, #34	@ 0x22
 800390a:	f040 80aa 	bne.w	8003a62 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003916:	d115      	bne.n	8003944 <UART_Receive_IT+0x54>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	b29a      	uxth	r2, r3
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
 8003942:	e024      	b.n	800398e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003952:	d007      	beq.n	8003964 <UART_Receive_IT+0x74>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <UART_Receive_IT+0x82>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e008      	b.n	8003984 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800397e:	b2da      	uxtb	r2, r3
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29b      	uxth	r3, r3
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4619      	mov	r1, r3
 800399c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15d      	bne.n	8003a5e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0220 	bic.w	r2, r2, #32
 80039b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d135      	bne.n	8003a54 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	613b      	str	r3, [r7, #16]
   return(result);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0e:	623a      	str	r2, [r7, #32]
 8003a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	69f9      	ldr	r1, [r7, #28]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d10a      	bne.n	8003a46 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fc41 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
 8003a52:	e002      	b.n	8003a5a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fc1f 	bl	8003298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e002      	b.n	8003a64 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3730      	adds	r7, #48	@ 0x30
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b0c0      	sub	sp, #256	@ 0x100
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	68d9      	ldr	r1, [r3, #12]
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	ea40 0301 	orr.w	r3, r0, r1
 8003a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ac4:	f021 010c 	bic.w	r1, r1, #12
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	6999      	ldr	r1, [r3, #24]
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	ea40 0301 	orr.w	r3, r0, r1
 8003af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b8f      	ldr	r3, [pc, #572]	@ (8003d38 <UART_SetConfig+0x2cc>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d005      	beq.n	8003b0c <UART_SetConfig+0xa0>
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b8d      	ldr	r3, [pc, #564]	@ (8003d3c <UART_SetConfig+0x2d0>)
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d104      	bne.n	8003b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0c:	f7fe fffc 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8003b10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b14:	e003      	b.n	8003b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b16:	f7fe ffe3 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b28:	f040 810c 	bne.w	8003d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b46:	415b      	adcs	r3, r3
 8003b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b4e:	4621      	mov	r1, r4
 8003b50:	eb12 0801 	adds.w	r8, r2, r1
 8003b54:	4629      	mov	r1, r5
 8003b56:	eb43 0901 	adc.w	r9, r3, r1
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b6e:	4690      	mov	r8, r2
 8003b70:	4699      	mov	r9, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	eb18 0303 	adds.w	r3, r8, r3
 8003b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	eb49 0303 	adc.w	r3, r9, r3
 8003b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	18db      	adds	r3, r3, r3
 8003b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	eb42 0303 	adc.w	r3, r2, r3
 8003ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bb0:	f7fc fb76 	bl	80002a0 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4b61      	ldr	r3, [pc, #388]	@ (8003d40 <UART_SetConfig+0x2d4>)
 8003bba:	fba3 2302 	umull	r2, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	011c      	lsls	r4, r3, #4
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003be4:	4641      	mov	r1, r8
 8003be6:	eb12 0a01 	adds.w	sl, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb43 0b01 	adc.w	fp, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c04:	4692      	mov	sl, r2
 8003c06:	469b      	mov	fp, r3
 8003c08:	4643      	mov	r3, r8
 8003c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c12:	464b      	mov	r3, r9
 8003c14:	eb4b 0303 	adc.w	r3, fp, r3
 8003c18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c30:	460b      	mov	r3, r1
 8003c32:	18db      	adds	r3, r3, r3
 8003c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c36:	4613      	mov	r3, r2
 8003c38:	eb42 0303 	adc.w	r3, r2, r3
 8003c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c46:	f7fc fb2b 	bl	80002a0 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4b3b      	ldr	r3, [pc, #236]	@ (8003d40 <UART_SetConfig+0x2d4>)
 8003c52:	fba3 2301 	umull	r2, r3, r3, r1
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2264      	movs	r2, #100	@ 0x64
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	1acb      	subs	r3, r1, r3
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c66:	4b36      	ldr	r3, [pc, #216]	@ (8003d40 <UART_SetConfig+0x2d4>)
 8003c68:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c74:	441c      	add	r4, r3
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c90:	415b      	adcs	r3, r3
 8003c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c98:	4641      	mov	r1, r8
 8003c9a:	1851      	adds	r1, r2, r1
 8003c9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	414b      	adcs	r3, r1
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	00cb      	lsls	r3, r1, #3
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cba:	4651      	mov	r1, sl
 8003cbc:	00ca      	lsls	r2, r1, #3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ccc:	464b      	mov	r3, r9
 8003cce:	460a      	mov	r2, r1
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cec:	460b      	mov	r3, r1
 8003cee:	18db      	adds	r3, r3, r3
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d02:	f7fc facd 	bl	80002a0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <UART_SetConfig+0x2d4>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	@ 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	3332      	adds	r3, #50	@ 0x32
 8003d1e:	4a08      	ldr	r2, [pc, #32]	@ (8003d40 <UART_SetConfig+0x2d4>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 0207 	and.w	r2, r3, #7
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4422      	add	r2, r4
 8003d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d34:	e106      	b.n	8003f44 <UART_SetConfig+0x4d8>
 8003d36:	bf00      	nop
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d56:	4642      	mov	r2, r8
 8003d58:	464b      	mov	r3, r9
 8003d5a:	1891      	adds	r1, r2, r2
 8003d5c:	6239      	str	r1, [r7, #32]
 8003d5e:	415b      	adcs	r3, r3
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d66:	4641      	mov	r1, r8
 8003d68:	1854      	adds	r4, r2, r1
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	eb43 0501 	adc.w	r5, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	00eb      	lsls	r3, r5, #3
 8003d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d7e:	00e2      	lsls	r2, r4, #3
 8003d80:	4614      	mov	r4, r2
 8003d82:	461d      	mov	r5, r3
 8003d84:	4643      	mov	r3, r8
 8003d86:	18e3      	adds	r3, r4, r3
 8003d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	eb45 0303 	adc.w	r3, r5, r3
 8003d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003da2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003db2:	4629      	mov	r1, r5
 8003db4:	008b      	lsls	r3, r1, #2
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	008a      	lsls	r2, r1, #2
 8003dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003dc4:	f7fc fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4b60      	ldr	r3, [pc, #384]	@ (8003f50 <UART_SetConfig+0x4e4>)
 8003dce:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	011c      	lsls	r4, r3, #4
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003de0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	61b9      	str	r1, [r7, #24]
 8003df0:	415b      	adcs	r3, r3
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df8:	4641      	mov	r1, r8
 8003dfa:	1851      	adds	r1, r2, r1
 8003dfc:	6139      	str	r1, [r7, #16]
 8003dfe:	4649      	mov	r1, r9
 8003e00:	414b      	adcs	r3, r1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e10:	4659      	mov	r1, fp
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4642      	mov	r2, r8
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	460a      	mov	r2, r1
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e50:	4649      	mov	r1, r9
 8003e52:	008b      	lsls	r3, r1, #2
 8003e54:	4641      	mov	r1, r8
 8003e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	008a      	lsls	r2, r1, #2
 8003e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e62:	f7fc fa1d 	bl	80002a0 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4b38      	ldr	r3, [pc, #224]	@ (8003f50 <UART_SetConfig+0x4e4>)
 8003e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2264      	movs	r2, #100	@ 0x64
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	3332      	adds	r3, #50	@ 0x32
 8003e80:	4a33      	ldr	r2, [pc, #204]	@ (8003f50 <UART_SetConfig+0x4e4>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e8c:	441c      	add	r4, r3
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e96:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ede:	464b      	mov	r3, r9
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	eb42 0303 	adc.w	r3, r2, r3
 8003ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ef2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f00:	4649      	mov	r1, r9
 8003f02:	008b      	lsls	r3, r1, #2
 8003f04:	4641      	mov	r1, r8
 8003f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	008a      	lsls	r2, r1, #2
 8003f0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f12:	f7fc f9c5 	bl	80002a0 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <UART_SetConfig+0x4e4>)
 8003f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	2164      	movs	r1, #100	@ 0x64
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	3332      	adds	r3, #50	@ 0x32
 8003f2e:	4a08      	ldr	r2, [pc, #32]	@ (8003f50 <UART_SetConfig+0x4e4>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	f003 020f 	and.w	r2, r3, #15
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4422      	add	r2, r4
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f50:	51eb851f 	.word	0x51eb851f

08003f54 <sniprintf>:
 8003f54:	b40c      	push	{r2, r3}
 8003f56:	b530      	push	{r4, r5, lr}
 8003f58:	4b18      	ldr	r3, [pc, #96]	@ (8003fbc <sniprintf+0x68>)
 8003f5a:	1e0c      	subs	r4, r1, #0
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	b09d      	sub	sp, #116	@ 0x74
 8003f60:	da08      	bge.n	8003f74 <sniprintf+0x20>
 8003f62:	238b      	movs	r3, #139	@ 0x8b
 8003f64:	602b      	str	r3, [r5, #0]
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	b01d      	add	sp, #116	@ 0x74
 8003f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f70:	b002      	add	sp, #8
 8003f72:	4770      	bx	lr
 8003f74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003f78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003f82:	bf14      	ite	ne
 8003f84:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f88:	4623      	moveq	r3, r4
 8003f8a:	9304      	str	r3, [sp, #16]
 8003f8c:	9307      	str	r3, [sp, #28]
 8003f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f92:	9002      	str	r0, [sp, #8]
 8003f94:	9006      	str	r0, [sp, #24]
 8003f96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f9c:	ab21      	add	r3, sp, #132	@ 0x84
 8003f9e:	a902      	add	r1, sp, #8
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	f000 f9e0 	bl	8004368 <_svfiprintf_r>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	bfbc      	itt	lt
 8003fac:	238b      	movlt	r3, #139	@ 0x8b
 8003fae:	602b      	strlt	r3, [r5, #0]
 8003fb0:	2c00      	cmp	r4, #0
 8003fb2:	d0da      	beq.n	8003f6a <sniprintf+0x16>
 8003fb4:	9b02      	ldr	r3, [sp, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e7d6      	b.n	8003f6a <sniprintf+0x16>
 8003fbc:	2000000c 	.word	0x2000000c

08003fc0 <memset>:
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <strchr>:
 8003fd0:	b2c9      	uxtb	r1, r1
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fda:	b112      	cbz	r2, 8003fe2 <strchr+0x12>
 8003fdc:	428a      	cmp	r2, r1
 8003fde:	d1f9      	bne.n	8003fd4 <strchr+0x4>
 8003fe0:	4770      	bx	lr
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	bf18      	it	ne
 8003fe6:	2000      	movne	r0, #0
 8003fe8:	4770      	bx	lr

08003fea <strncpy>:
 8003fea:	b510      	push	{r4, lr}
 8003fec:	3901      	subs	r1, #1
 8003fee:	4603      	mov	r3, r0
 8003ff0:	b132      	cbz	r2, 8004000 <strncpy+0x16>
 8003ff2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003ff6:	f803 4b01 	strb.w	r4, [r3], #1
 8003ffa:	3a01      	subs	r2, #1
 8003ffc:	2c00      	cmp	r4, #0
 8003ffe:	d1f7      	bne.n	8003ff0 <strncpy+0x6>
 8004000:	441a      	add	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <strncpy+0x20>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <strncpy+0x1a>

08004010 <strrchr>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8004016:	4603      	mov	r3, r0
 8004018:	d10e      	bne.n	8004038 <strrchr+0x28>
 800401a:	4621      	mov	r1, r4
 800401c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004020:	f7ff bfd6 	b.w	8003fd0 <strchr>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	4605      	mov	r5, r0
 8004028:	4621      	mov	r1, r4
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ffd0 	bl	8003fd0 <strchr>
 8004030:	2800      	cmp	r0, #0
 8004032:	d1f7      	bne.n	8004024 <strrchr+0x14>
 8004034:	4628      	mov	r0, r5
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	2500      	movs	r5, #0
 800403a:	e7f5      	b.n	8004028 <strrchr+0x18>

0800403c <strstr>:
 800403c:	780a      	ldrb	r2, [r1, #0]
 800403e:	b570      	push	{r4, r5, r6, lr}
 8004040:	b96a      	cbnz	r2, 800405e <strstr+0x22>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	429a      	cmp	r2, r3
 8004046:	d109      	bne.n	800405c <strstr+0x20>
 8004048:	460c      	mov	r4, r1
 800404a:	4605      	mov	r5, r0
 800404c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f6      	beq.n	8004042 <strstr+0x6>
 8004054:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004058:	429e      	cmp	r6, r3
 800405a:	d0f7      	beq.n	800404c <strstr+0x10>
 800405c:	3001      	adds	r0, #1
 800405e:	7803      	ldrb	r3, [r0, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ef      	bne.n	8004044 <strstr+0x8>
 8004064:	4618      	mov	r0, r3
 8004066:	e7ec      	b.n	8004042 <strstr+0x6>

08004068 <__errno>:
 8004068:	4b01      	ldr	r3, [pc, #4]	@ (8004070 <__errno+0x8>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c

08004074 <__libc_init_array>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	4d0d      	ldr	r5, [pc, #52]	@ (80040ac <__libc_init_array+0x38>)
 8004078:	4c0d      	ldr	r4, [pc, #52]	@ (80040b0 <__libc_init_array+0x3c>)
 800407a:	1b64      	subs	r4, r4, r5
 800407c:	10a4      	asrs	r4, r4, #2
 800407e:	2600      	movs	r6, #0
 8004080:	42a6      	cmp	r6, r4
 8004082:	d109      	bne.n	8004098 <__libc_init_array+0x24>
 8004084:	4d0b      	ldr	r5, [pc, #44]	@ (80040b4 <__libc_init_array+0x40>)
 8004086:	4c0c      	ldr	r4, [pc, #48]	@ (80040b8 <__libc_init_array+0x44>)
 8004088:	f000 fc64 	bl	8004954 <_init>
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	10a4      	asrs	r4, r4, #2
 8004090:	2600      	movs	r6, #0
 8004092:	42a6      	cmp	r6, r4
 8004094:	d105      	bne.n	80040a2 <__libc_init_array+0x2e>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	f855 3b04 	ldr.w	r3, [r5], #4
 800409c:	4798      	blx	r3
 800409e:	3601      	adds	r6, #1
 80040a0:	e7ee      	b.n	8004080 <__libc_init_array+0xc>
 80040a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a6:	4798      	blx	r3
 80040a8:	3601      	adds	r6, #1
 80040aa:	e7f2      	b.n	8004092 <__libc_init_array+0x1e>
 80040ac:	08004b6c 	.word	0x08004b6c
 80040b0:	08004b6c 	.word	0x08004b6c
 80040b4:	08004b6c 	.word	0x08004b6c
 80040b8:	08004b70 	.word	0x08004b70

080040bc <__retarget_lock_acquire_recursive>:
 80040bc:	4770      	bx	lr

080040be <__retarget_lock_release_recursive>:
 80040be:	4770      	bx	lr

080040c0 <_free_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d041      	beq.n	800414c <_free_r+0x8c>
 80040c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040cc:	1f0c      	subs	r4, r1, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	18e4      	addlt	r4, r4, r3
 80040d4:	f000 f8e0 	bl	8004298 <__malloc_lock>
 80040d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004150 <_free_r+0x90>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	b933      	cbnz	r3, 80040ec <_free_r+0x2c>
 80040de:	6063      	str	r3, [r4, #4]
 80040e0:	6014      	str	r4, [r2, #0]
 80040e2:	4628      	mov	r0, r5
 80040e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e8:	f000 b8dc 	b.w	80042a4 <__malloc_unlock>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d908      	bls.n	8004102 <_free_r+0x42>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	1821      	adds	r1, r4, r0
 80040f4:	428b      	cmp	r3, r1
 80040f6:	bf01      	itttt	eq
 80040f8:	6819      	ldreq	r1, [r3, #0]
 80040fa:	685b      	ldreq	r3, [r3, #4]
 80040fc:	1809      	addeq	r1, r1, r0
 80040fe:	6021      	streq	r1, [r4, #0]
 8004100:	e7ed      	b.n	80040de <_free_r+0x1e>
 8004102:	461a      	mov	r2, r3
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b10b      	cbz	r3, 800410c <_free_r+0x4c>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d9fa      	bls.n	8004102 <_free_r+0x42>
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	1850      	adds	r0, r2, r1
 8004110:	42a0      	cmp	r0, r4
 8004112:	d10b      	bne.n	800412c <_free_r+0x6c>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	4401      	add	r1, r0
 8004118:	1850      	adds	r0, r2, r1
 800411a:	4283      	cmp	r3, r0
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	d1e0      	bne.n	80040e2 <_free_r+0x22>
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	6053      	str	r3, [r2, #4]
 8004126:	4408      	add	r0, r1
 8004128:	6010      	str	r0, [r2, #0]
 800412a:	e7da      	b.n	80040e2 <_free_r+0x22>
 800412c:	d902      	bls.n	8004134 <_free_r+0x74>
 800412e:	230c      	movs	r3, #12
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	e7d6      	b.n	80040e2 <_free_r+0x22>
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	1821      	adds	r1, r4, r0
 8004138:	428b      	cmp	r3, r1
 800413a:	bf04      	itt	eq
 800413c:	6819      	ldreq	r1, [r3, #0]
 800413e:	685b      	ldreq	r3, [r3, #4]
 8004140:	6063      	str	r3, [r4, #4]
 8004142:	bf04      	itt	eq
 8004144:	1809      	addeq	r1, r1, r0
 8004146:	6021      	streq	r1, [r4, #0]
 8004148:	6054      	str	r4, [r2, #4]
 800414a:	e7ca      	b.n	80040e2 <_free_r+0x22>
 800414c:	bd38      	pop	{r3, r4, r5, pc}
 800414e:	bf00      	nop
 8004150:	20000610 	.word	0x20000610

08004154 <sbrk_aligned>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4e0f      	ldr	r6, [pc, #60]	@ (8004194 <sbrk_aligned+0x40>)
 8004158:	460c      	mov	r4, r1
 800415a:	6831      	ldr	r1, [r6, #0]
 800415c:	4605      	mov	r5, r0
 800415e:	b911      	cbnz	r1, 8004166 <sbrk_aligned+0x12>
 8004160:	f000 fba4 	bl	80048ac <_sbrk_r>
 8004164:	6030      	str	r0, [r6, #0]
 8004166:	4621      	mov	r1, r4
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fb9f 	bl	80048ac <_sbrk_r>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	d103      	bne.n	800417a <sbrk_aligned+0x26>
 8004172:	f04f 34ff 	mov.w	r4, #4294967295
 8004176:	4620      	mov	r0, r4
 8004178:	bd70      	pop	{r4, r5, r6, pc}
 800417a:	1cc4      	adds	r4, r0, #3
 800417c:	f024 0403 	bic.w	r4, r4, #3
 8004180:	42a0      	cmp	r0, r4
 8004182:	d0f8      	beq.n	8004176 <sbrk_aligned+0x22>
 8004184:	1a21      	subs	r1, r4, r0
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fb90 	bl	80048ac <_sbrk_r>
 800418c:	3001      	adds	r0, #1
 800418e:	d1f2      	bne.n	8004176 <sbrk_aligned+0x22>
 8004190:	e7ef      	b.n	8004172 <sbrk_aligned+0x1e>
 8004192:	bf00      	nop
 8004194:	2000060c 	.word	0x2000060c

08004198 <_malloc_r>:
 8004198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800419c:	1ccd      	adds	r5, r1, #3
 800419e:	f025 0503 	bic.w	r5, r5, #3
 80041a2:	3508      	adds	r5, #8
 80041a4:	2d0c      	cmp	r5, #12
 80041a6:	bf38      	it	cc
 80041a8:	250c      	movcc	r5, #12
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	4606      	mov	r6, r0
 80041ae:	db01      	blt.n	80041b4 <_malloc_r+0x1c>
 80041b0:	42a9      	cmp	r1, r5
 80041b2:	d904      	bls.n	80041be <_malloc_r+0x26>
 80041b4:	230c      	movs	r3, #12
 80041b6:	6033      	str	r3, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004294 <_malloc_r+0xfc>
 80041c2:	f000 f869 	bl	8004298 <__malloc_lock>
 80041c6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ca:	461c      	mov	r4, r3
 80041cc:	bb44      	cbnz	r4, 8004220 <_malloc_r+0x88>
 80041ce:	4629      	mov	r1, r5
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff ffbf 	bl	8004154 <sbrk_aligned>
 80041d6:	1c43      	adds	r3, r0, #1
 80041d8:	4604      	mov	r4, r0
 80041da:	d158      	bne.n	800428e <_malloc_r+0xf6>
 80041dc:	f8d8 4000 	ldr.w	r4, [r8]
 80041e0:	4627      	mov	r7, r4
 80041e2:	2f00      	cmp	r7, #0
 80041e4:	d143      	bne.n	800426e <_malloc_r+0xd6>
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	d04b      	beq.n	8004282 <_malloc_r+0xea>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	4639      	mov	r1, r7
 80041ee:	4630      	mov	r0, r6
 80041f0:	eb04 0903 	add.w	r9, r4, r3
 80041f4:	f000 fb5a 	bl	80048ac <_sbrk_r>
 80041f8:	4581      	cmp	r9, r0
 80041fa:	d142      	bne.n	8004282 <_malloc_r+0xea>
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	1a6d      	subs	r5, r5, r1
 8004200:	4629      	mov	r1, r5
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff ffa6 	bl	8004154 <sbrk_aligned>
 8004208:	3001      	adds	r0, #1
 800420a:	d03a      	beq.n	8004282 <_malloc_r+0xea>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	442b      	add	r3, r5
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	f8d8 3000 	ldr.w	r3, [r8]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	bb62      	cbnz	r2, 8004274 <_malloc_r+0xdc>
 800421a:	f8c8 7000 	str.w	r7, [r8]
 800421e:	e00f      	b.n	8004240 <_malloc_r+0xa8>
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	1b52      	subs	r2, r2, r5
 8004224:	d420      	bmi.n	8004268 <_malloc_r+0xd0>
 8004226:	2a0b      	cmp	r2, #11
 8004228:	d917      	bls.n	800425a <_malloc_r+0xc2>
 800422a:	1961      	adds	r1, r4, r5
 800422c:	42a3      	cmp	r3, r4
 800422e:	6025      	str	r5, [r4, #0]
 8004230:	bf18      	it	ne
 8004232:	6059      	strne	r1, [r3, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	bf08      	it	eq
 8004238:	f8c8 1000 	streq.w	r1, [r8]
 800423c:	5162      	str	r2, [r4, r5]
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	4630      	mov	r0, r6
 8004242:	f000 f82f 	bl	80042a4 <__malloc_unlock>
 8004246:	f104 000b 	add.w	r0, r4, #11
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	f020 0007 	bic.w	r0, r0, #7
 8004250:	1ac2      	subs	r2, r0, r3
 8004252:	bf1c      	itt	ne
 8004254:	1a1b      	subne	r3, r3, r0
 8004256:	50a3      	strne	r3, [r4, r2]
 8004258:	e7af      	b.n	80041ba <_malloc_r+0x22>
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	42a3      	cmp	r3, r4
 800425e:	bf0c      	ite	eq
 8004260:	f8c8 2000 	streq.w	r2, [r8]
 8004264:	605a      	strne	r2, [r3, #4]
 8004266:	e7eb      	b.n	8004240 <_malloc_r+0xa8>
 8004268:	4623      	mov	r3, r4
 800426a:	6864      	ldr	r4, [r4, #4]
 800426c:	e7ae      	b.n	80041cc <_malloc_r+0x34>
 800426e:	463c      	mov	r4, r7
 8004270:	687f      	ldr	r7, [r7, #4]
 8004272:	e7b6      	b.n	80041e2 <_malloc_r+0x4a>
 8004274:	461a      	mov	r2, r3
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	42a3      	cmp	r3, r4
 800427a:	d1fb      	bne.n	8004274 <_malloc_r+0xdc>
 800427c:	2300      	movs	r3, #0
 800427e:	6053      	str	r3, [r2, #4]
 8004280:	e7de      	b.n	8004240 <_malloc_r+0xa8>
 8004282:	230c      	movs	r3, #12
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	4630      	mov	r0, r6
 8004288:	f000 f80c 	bl	80042a4 <__malloc_unlock>
 800428c:	e794      	b.n	80041b8 <_malloc_r+0x20>
 800428e:	6005      	str	r5, [r0, #0]
 8004290:	e7d6      	b.n	8004240 <_malloc_r+0xa8>
 8004292:	bf00      	nop
 8004294:	20000610 	.word	0x20000610

08004298 <__malloc_lock>:
 8004298:	4801      	ldr	r0, [pc, #4]	@ (80042a0 <__malloc_lock+0x8>)
 800429a:	f7ff bf0f 	b.w	80040bc <__retarget_lock_acquire_recursive>
 800429e:	bf00      	nop
 80042a0:	20000608 	.word	0x20000608

080042a4 <__malloc_unlock>:
 80042a4:	4801      	ldr	r0, [pc, #4]	@ (80042ac <__malloc_unlock+0x8>)
 80042a6:	f7ff bf0a 	b.w	80040be <__retarget_lock_release_recursive>
 80042aa:	bf00      	nop
 80042ac:	20000608 	.word	0x20000608

080042b0 <__ssputs_r>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	688e      	ldr	r6, [r1, #8]
 80042b6:	461f      	mov	r7, r3
 80042b8:	42be      	cmp	r6, r7
 80042ba:	680b      	ldr	r3, [r1, #0]
 80042bc:	4682      	mov	sl, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	4690      	mov	r8, r2
 80042c2:	d82d      	bhi.n	8004320 <__ssputs_r+0x70>
 80042c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042cc:	d026      	beq.n	800431c <__ssputs_r+0x6c>
 80042ce:	6965      	ldr	r5, [r4, #20]
 80042d0:	6909      	ldr	r1, [r1, #16]
 80042d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042d6:	eba3 0901 	sub.w	r9, r3, r1
 80042da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042de:	1c7b      	adds	r3, r7, #1
 80042e0:	444b      	add	r3, r9
 80042e2:	106d      	asrs	r5, r5, #1
 80042e4:	429d      	cmp	r5, r3
 80042e6:	bf38      	it	cc
 80042e8:	461d      	movcc	r5, r3
 80042ea:	0553      	lsls	r3, r2, #21
 80042ec:	d527      	bpl.n	800433e <__ssputs_r+0x8e>
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7ff ff52 	bl	8004198 <_malloc_r>
 80042f4:	4606      	mov	r6, r0
 80042f6:	b360      	cbz	r0, 8004352 <__ssputs_r+0xa2>
 80042f8:	6921      	ldr	r1, [r4, #16]
 80042fa:	464a      	mov	r2, r9
 80042fc:	f000 fae6 	bl	80048cc <memcpy>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	6126      	str	r6, [r4, #16]
 800430e:	6165      	str	r5, [r4, #20]
 8004310:	444e      	add	r6, r9
 8004312:	eba5 0509 	sub.w	r5, r5, r9
 8004316:	6026      	str	r6, [r4, #0]
 8004318:	60a5      	str	r5, [r4, #8]
 800431a:	463e      	mov	r6, r7
 800431c:	42be      	cmp	r6, r7
 800431e:	d900      	bls.n	8004322 <__ssputs_r+0x72>
 8004320:	463e      	mov	r6, r7
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	4632      	mov	r2, r6
 8004326:	4641      	mov	r1, r8
 8004328:	f000 faa6 	bl	8004878 <memmove>
 800432c:	68a3      	ldr	r3, [r4, #8]
 800432e:	1b9b      	subs	r3, r3, r6
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	4433      	add	r3, r6
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	2000      	movs	r0, #0
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433e:	462a      	mov	r2, r5
 8004340:	f000 fad2 	bl	80048e8 <_realloc_r>
 8004344:	4606      	mov	r6, r0
 8004346:	2800      	cmp	r0, #0
 8004348:	d1e0      	bne.n	800430c <__ssputs_r+0x5c>
 800434a:	6921      	ldr	r1, [r4, #16]
 800434c:	4650      	mov	r0, sl
 800434e:	f7ff feb7 	bl	80040c0 <_free_r>
 8004352:	230c      	movs	r3, #12
 8004354:	f8ca 3000 	str.w	r3, [sl]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	e7e9      	b.n	800433a <__ssputs_r+0x8a>
	...

08004368 <_svfiprintf_r>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	4698      	mov	r8, r3
 800436e:	898b      	ldrh	r3, [r1, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	b09d      	sub	sp, #116	@ 0x74
 8004374:	4607      	mov	r7, r0
 8004376:	460d      	mov	r5, r1
 8004378:	4614      	mov	r4, r2
 800437a:	d510      	bpl.n	800439e <_svfiprintf_r+0x36>
 800437c:	690b      	ldr	r3, [r1, #16]
 800437e:	b973      	cbnz	r3, 800439e <_svfiprintf_r+0x36>
 8004380:	2140      	movs	r1, #64	@ 0x40
 8004382:	f7ff ff09 	bl	8004198 <_malloc_r>
 8004386:	6028      	str	r0, [r5, #0]
 8004388:	6128      	str	r0, [r5, #16]
 800438a:	b930      	cbnz	r0, 800439a <_svfiprintf_r+0x32>
 800438c:	230c      	movs	r3, #12
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	b01d      	add	sp, #116	@ 0x74
 8004396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439a:	2340      	movs	r3, #64	@ 0x40
 800439c:	616b      	str	r3, [r5, #20]
 800439e:	2300      	movs	r3, #0
 80043a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a2:	2320      	movs	r3, #32
 80043a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ac:	2330      	movs	r3, #48	@ 0x30
 80043ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800454c <_svfiprintf_r+0x1e4>
 80043b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043b6:	f04f 0901 	mov.w	r9, #1
 80043ba:	4623      	mov	r3, r4
 80043bc:	469a      	mov	sl, r3
 80043be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043c2:	b10a      	cbz	r2, 80043c8 <_svfiprintf_r+0x60>
 80043c4:	2a25      	cmp	r2, #37	@ 0x25
 80043c6:	d1f9      	bne.n	80043bc <_svfiprintf_r+0x54>
 80043c8:	ebba 0b04 	subs.w	fp, sl, r4
 80043cc:	d00b      	beq.n	80043e6 <_svfiprintf_r+0x7e>
 80043ce:	465b      	mov	r3, fp
 80043d0:	4622      	mov	r2, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff ff6b 	bl	80042b0 <__ssputs_r>
 80043da:	3001      	adds	r0, #1
 80043dc:	f000 80a7 	beq.w	800452e <_svfiprintf_r+0x1c6>
 80043e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043e2:	445a      	add	r2, fp
 80043e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80043e6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 809f 	beq.w	800452e <_svfiprintf_r+0x1c6>
 80043f0:	2300      	movs	r3, #0
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043fa:	f10a 0a01 	add.w	sl, sl, #1
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004406:	931a      	str	r3, [sp, #104]	@ 0x68
 8004408:	4654      	mov	r4, sl
 800440a:	2205      	movs	r2, #5
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	484e      	ldr	r0, [pc, #312]	@ (800454c <_svfiprintf_r+0x1e4>)
 8004412:	f7fb fef5 	bl	8000200 <memchr>
 8004416:	9a04      	ldr	r2, [sp, #16]
 8004418:	b9d8      	cbnz	r0, 8004452 <_svfiprintf_r+0xea>
 800441a:	06d0      	lsls	r0, r2, #27
 800441c:	bf44      	itt	mi
 800441e:	2320      	movmi	r3, #32
 8004420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004424:	0711      	lsls	r1, r2, #28
 8004426:	bf44      	itt	mi
 8004428:	232b      	movmi	r3, #43	@ 0x2b
 800442a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800442e:	f89a 3000 	ldrb.w	r3, [sl]
 8004432:	2b2a      	cmp	r3, #42	@ 0x2a
 8004434:	d015      	beq.n	8004462 <_svfiprintf_r+0xfa>
 8004436:	9a07      	ldr	r2, [sp, #28]
 8004438:	4654      	mov	r4, sl
 800443a:	2000      	movs	r0, #0
 800443c:	f04f 0c0a 	mov.w	ip, #10
 8004440:	4621      	mov	r1, r4
 8004442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004446:	3b30      	subs	r3, #48	@ 0x30
 8004448:	2b09      	cmp	r3, #9
 800444a:	d94b      	bls.n	80044e4 <_svfiprintf_r+0x17c>
 800444c:	b1b0      	cbz	r0, 800447c <_svfiprintf_r+0x114>
 800444e:	9207      	str	r2, [sp, #28]
 8004450:	e014      	b.n	800447c <_svfiprintf_r+0x114>
 8004452:	eba0 0308 	sub.w	r3, r0, r8
 8004456:	fa09 f303 	lsl.w	r3, r9, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	9304      	str	r3, [sp, #16]
 800445e:	46a2      	mov	sl, r4
 8004460:	e7d2      	b.n	8004408 <_svfiprintf_r+0xa0>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	9103      	str	r1, [sp, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	bfbb      	ittet	lt
 800446e:	425b      	neglt	r3, r3
 8004470:	f042 0202 	orrlt.w	r2, r2, #2
 8004474:	9307      	strge	r3, [sp, #28]
 8004476:	9307      	strlt	r3, [sp, #28]
 8004478:	bfb8      	it	lt
 800447a:	9204      	strlt	r2, [sp, #16]
 800447c:	7823      	ldrb	r3, [r4, #0]
 800447e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004480:	d10a      	bne.n	8004498 <_svfiprintf_r+0x130>
 8004482:	7863      	ldrb	r3, [r4, #1]
 8004484:	2b2a      	cmp	r3, #42	@ 0x2a
 8004486:	d132      	bne.n	80044ee <_svfiprintf_r+0x186>
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	9203      	str	r2, [sp, #12]
 8004490:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004494:	3402      	adds	r4, #2
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800455c <_svfiprintf_r+0x1f4>
 800449c:	7821      	ldrb	r1, [r4, #0]
 800449e:	2203      	movs	r2, #3
 80044a0:	4650      	mov	r0, sl
 80044a2:	f7fb fead 	bl	8000200 <memchr>
 80044a6:	b138      	cbz	r0, 80044b8 <_svfiprintf_r+0x150>
 80044a8:	9b04      	ldr	r3, [sp, #16]
 80044aa:	eba0 000a 	sub.w	r0, r0, sl
 80044ae:	2240      	movs	r2, #64	@ 0x40
 80044b0:	4082      	lsls	r2, r0
 80044b2:	4313      	orrs	r3, r2
 80044b4:	3401      	adds	r4, #1
 80044b6:	9304      	str	r3, [sp, #16]
 80044b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044bc:	4824      	ldr	r0, [pc, #144]	@ (8004550 <_svfiprintf_r+0x1e8>)
 80044be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044c2:	2206      	movs	r2, #6
 80044c4:	f7fb fe9c 	bl	8000200 <memchr>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d036      	beq.n	800453a <_svfiprintf_r+0x1d2>
 80044cc:	4b21      	ldr	r3, [pc, #132]	@ (8004554 <_svfiprintf_r+0x1ec>)
 80044ce:	bb1b      	cbnz	r3, 8004518 <_svfiprintf_r+0x1b0>
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	3307      	adds	r3, #7
 80044d4:	f023 0307 	bic.w	r3, r3, #7
 80044d8:	3308      	adds	r3, #8
 80044da:	9303      	str	r3, [sp, #12]
 80044dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044de:	4433      	add	r3, r6
 80044e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80044e2:	e76a      	b.n	80043ba <_svfiprintf_r+0x52>
 80044e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e8:	460c      	mov	r4, r1
 80044ea:	2001      	movs	r0, #1
 80044ec:	e7a8      	b.n	8004440 <_svfiprintf_r+0xd8>
 80044ee:	2300      	movs	r3, #0
 80044f0:	3401      	adds	r4, #1
 80044f2:	9305      	str	r3, [sp, #20]
 80044f4:	4619      	mov	r1, r3
 80044f6:	f04f 0c0a 	mov.w	ip, #10
 80044fa:	4620      	mov	r0, r4
 80044fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004500:	3a30      	subs	r2, #48	@ 0x30
 8004502:	2a09      	cmp	r2, #9
 8004504:	d903      	bls.n	800450e <_svfiprintf_r+0x1a6>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0c6      	beq.n	8004498 <_svfiprintf_r+0x130>
 800450a:	9105      	str	r1, [sp, #20]
 800450c:	e7c4      	b.n	8004498 <_svfiprintf_r+0x130>
 800450e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004512:	4604      	mov	r4, r0
 8004514:	2301      	movs	r3, #1
 8004516:	e7f0      	b.n	80044fa <_svfiprintf_r+0x192>
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	462a      	mov	r2, r5
 800451e:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <_svfiprintf_r+0x1f0>)
 8004520:	a904      	add	r1, sp, #16
 8004522:	4638      	mov	r0, r7
 8004524:	f3af 8000 	nop.w
 8004528:	1c42      	adds	r2, r0, #1
 800452a:	4606      	mov	r6, r0
 800452c:	d1d6      	bne.n	80044dc <_svfiprintf_r+0x174>
 800452e:	89ab      	ldrh	r3, [r5, #12]
 8004530:	065b      	lsls	r3, r3, #25
 8004532:	f53f af2d 	bmi.w	8004390 <_svfiprintf_r+0x28>
 8004536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004538:	e72c      	b.n	8004394 <_svfiprintf_r+0x2c>
 800453a:	ab03      	add	r3, sp, #12
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	462a      	mov	r2, r5
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <_svfiprintf_r+0x1f0>)
 8004542:	a904      	add	r1, sp, #16
 8004544:	4638      	mov	r0, r7
 8004546:	f000 f879 	bl	800463c <_printf_i>
 800454a:	e7ed      	b.n	8004528 <_svfiprintf_r+0x1c0>
 800454c:	08004b30 	.word	0x08004b30
 8004550:	08004b3a 	.word	0x08004b3a
 8004554:	00000000 	.word	0x00000000
 8004558:	080042b1 	.word	0x080042b1
 800455c:	08004b36 	.word	0x08004b36

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	4698      	mov	r8, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004570:	4293      	cmp	r3, r2
 8004572:	bfb8      	it	lt
 8004574:	4613      	movlt	r3, r2
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800457c:	4607      	mov	r7, r0
 800457e:	460c      	mov	r4, r1
 8004580:	b10a      	cbz	r2, 8004586 <_printf_common+0x26>
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	6833      	ldrmi	r3, [r6, #0]
 800458e:	3302      	addmi	r3, #2
 8004590:	6033      	strmi	r3, [r6, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	f015 0506 	ands.w	r5, r5, #6
 8004598:	d106      	bne.n	80045a8 <_printf_common+0x48>
 800459a:	f104 0a19 	add.w	sl, r4, #25
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	6832      	ldr	r2, [r6, #0]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dc26      	bgt.n	80045f6 <_printf_common+0x96>
 80045a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	3b00      	subs	r3, #0
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	0692      	lsls	r2, r2, #26
 80045b6:	d42b      	bmi.n	8004610 <_printf_common+0xb0>
 80045b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045bc:	4641      	mov	r1, r8
 80045be:	4638      	mov	r0, r7
 80045c0:	47c8      	blx	r9
 80045c2:	3001      	adds	r0, #1
 80045c4:	d01e      	beq.n	8004604 <_printf_common+0xa4>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	6922      	ldr	r2, [r4, #16]
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	bf02      	ittt	eq
 80045d2:	68e5      	ldreq	r5, [r4, #12]
 80045d4:	6833      	ldreq	r3, [r6, #0]
 80045d6:	1aed      	subeq	r5, r5, r3
 80045d8:	68a3      	ldr	r3, [r4, #8]
 80045da:	bf0c      	ite	eq
 80045dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e0:	2500      	movne	r5, #0
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bfc4      	itt	gt
 80045e6:	1a9b      	subgt	r3, r3, r2
 80045e8:	18ed      	addgt	r5, r5, r3
 80045ea:	2600      	movs	r6, #0
 80045ec:	341a      	adds	r4, #26
 80045ee:	42b5      	cmp	r5, r6
 80045f0:	d11a      	bne.n	8004628 <_printf_common+0xc8>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e008      	b.n	8004608 <_printf_common+0xa8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4652      	mov	r2, sl
 80045fa:	4641      	mov	r1, r8
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c8      	blx	r9
 8004600:	3001      	adds	r0, #1
 8004602:	d103      	bne.n	800460c <_printf_common+0xac>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	3501      	adds	r5, #1
 800460e:	e7c6      	b.n	800459e <_printf_common+0x3e>
 8004610:	18e1      	adds	r1, r4, r3
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	2030      	movs	r0, #48	@ 0x30
 8004616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800461a:	4422      	add	r2, r4
 800461c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004624:	3302      	adds	r3, #2
 8004626:	e7c7      	b.n	80045b8 <_printf_common+0x58>
 8004628:	2301      	movs	r3, #1
 800462a:	4622      	mov	r2, r4
 800462c:	4641      	mov	r1, r8
 800462e:	4638      	mov	r0, r7
 8004630:	47c8      	blx	r9
 8004632:	3001      	adds	r0, #1
 8004634:	d0e6      	beq.n	8004604 <_printf_common+0xa4>
 8004636:	3601      	adds	r6, #1
 8004638:	e7d9      	b.n	80045ee <_printf_common+0x8e>
	...

0800463c <_printf_i>:
 800463c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	7e0f      	ldrb	r7, [r1, #24]
 8004642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004644:	2f78      	cmp	r7, #120	@ 0x78
 8004646:	4691      	mov	r9, r2
 8004648:	4680      	mov	r8, r0
 800464a:	460c      	mov	r4, r1
 800464c:	469a      	mov	sl, r3
 800464e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004652:	d807      	bhi.n	8004664 <_printf_i+0x28>
 8004654:	2f62      	cmp	r7, #98	@ 0x62
 8004656:	d80a      	bhi.n	800466e <_printf_i+0x32>
 8004658:	2f00      	cmp	r7, #0
 800465a:	f000 80d1 	beq.w	8004800 <_printf_i+0x1c4>
 800465e:	2f58      	cmp	r7, #88	@ 0x58
 8004660:	f000 80b8 	beq.w	80047d4 <_printf_i+0x198>
 8004664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800466c:	e03a      	b.n	80046e4 <_printf_i+0xa8>
 800466e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004672:	2b15      	cmp	r3, #21
 8004674:	d8f6      	bhi.n	8004664 <_printf_i+0x28>
 8004676:	a101      	add	r1, pc, #4	@ (adr r1, 800467c <_printf_i+0x40>)
 8004678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046e9 	.word	0x080046e9
 8004684:	08004665 	.word	0x08004665
 8004688:	08004665 	.word	0x08004665
 800468c:	08004665 	.word	0x08004665
 8004690:	08004665 	.word	0x08004665
 8004694:	080046e9 	.word	0x080046e9
 8004698:	08004665 	.word	0x08004665
 800469c:	08004665 	.word	0x08004665
 80046a0:	08004665 	.word	0x08004665
 80046a4:	08004665 	.word	0x08004665
 80046a8:	080047e7 	.word	0x080047e7
 80046ac:	08004713 	.word	0x08004713
 80046b0:	080047a1 	.word	0x080047a1
 80046b4:	08004665 	.word	0x08004665
 80046b8:	08004665 	.word	0x08004665
 80046bc:	08004809 	.word	0x08004809
 80046c0:	08004665 	.word	0x08004665
 80046c4:	08004713 	.word	0x08004713
 80046c8:	08004665 	.word	0x08004665
 80046cc:	08004665 	.word	0x08004665
 80046d0:	080047a9 	.word	0x080047a9
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6032      	str	r2, [r6, #0]
 80046dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046e4:	2301      	movs	r3, #1
 80046e6:	e09c      	b.n	8004822 <_printf_i+0x1e6>
 80046e8:	6833      	ldr	r3, [r6, #0]
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	1d19      	adds	r1, r3, #4
 80046ee:	6031      	str	r1, [r6, #0]
 80046f0:	0606      	lsls	r6, r0, #24
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0xbc>
 80046f4:	681d      	ldr	r5, [r3, #0]
 80046f6:	e003      	b.n	8004700 <_printf_i+0xc4>
 80046f8:	0645      	lsls	r5, r0, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0xb8>
 80046fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004700:	2d00      	cmp	r5, #0
 8004702:	da03      	bge.n	800470c <_printf_i+0xd0>
 8004704:	232d      	movs	r3, #45	@ 0x2d
 8004706:	426d      	negs	r5, r5
 8004708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800470c:	4858      	ldr	r0, [pc, #352]	@ (8004870 <_printf_i+0x234>)
 800470e:	230a      	movs	r3, #10
 8004710:	e011      	b.n	8004736 <_printf_i+0xfa>
 8004712:	6821      	ldr	r1, [r4, #0]
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	0608      	lsls	r0, r1, #24
 8004718:	f853 5b04 	ldr.w	r5, [r3], #4
 800471c:	d402      	bmi.n	8004724 <_printf_i+0xe8>
 800471e:	0649      	lsls	r1, r1, #25
 8004720:	bf48      	it	mi
 8004722:	b2ad      	uxthmi	r5, r5
 8004724:	2f6f      	cmp	r7, #111	@ 0x6f
 8004726:	4852      	ldr	r0, [pc, #328]	@ (8004870 <_printf_i+0x234>)
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	bf14      	ite	ne
 800472c:	230a      	movne	r3, #10
 800472e:	2308      	moveq	r3, #8
 8004730:	2100      	movs	r1, #0
 8004732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004736:	6866      	ldr	r6, [r4, #4]
 8004738:	60a6      	str	r6, [r4, #8]
 800473a:	2e00      	cmp	r6, #0
 800473c:	db05      	blt.n	800474a <_printf_i+0x10e>
 800473e:	6821      	ldr	r1, [r4, #0]
 8004740:	432e      	orrs	r6, r5
 8004742:	f021 0104 	bic.w	r1, r1, #4
 8004746:	6021      	str	r1, [r4, #0]
 8004748:	d04b      	beq.n	80047e2 <_printf_i+0x1a6>
 800474a:	4616      	mov	r6, r2
 800474c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004750:	fb03 5711 	mls	r7, r3, r1, r5
 8004754:	5dc7      	ldrb	r7, [r0, r7]
 8004756:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800475a:	462f      	mov	r7, r5
 800475c:	42bb      	cmp	r3, r7
 800475e:	460d      	mov	r5, r1
 8004760:	d9f4      	bls.n	800474c <_printf_i+0x110>
 8004762:	2b08      	cmp	r3, #8
 8004764:	d10b      	bne.n	800477e <_printf_i+0x142>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	07df      	lsls	r7, r3, #31
 800476a:	d508      	bpl.n	800477e <_printf_i+0x142>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	6861      	ldr	r1, [r4, #4]
 8004770:	4299      	cmp	r1, r3
 8004772:	bfde      	ittt	le
 8004774:	2330      	movle	r3, #48	@ 0x30
 8004776:	f806 3c01 	strble.w	r3, [r6, #-1]
 800477a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800477e:	1b92      	subs	r2, r2, r6
 8004780:	6122      	str	r2, [r4, #16]
 8004782:	f8cd a000 	str.w	sl, [sp]
 8004786:	464b      	mov	r3, r9
 8004788:	aa03      	add	r2, sp, #12
 800478a:	4621      	mov	r1, r4
 800478c:	4640      	mov	r0, r8
 800478e:	f7ff fee7 	bl	8004560 <_printf_common>
 8004792:	3001      	adds	r0, #1
 8004794:	d14a      	bne.n	800482c <_printf_i+0x1f0>
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	b004      	add	sp, #16
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	f043 0320 	orr.w	r3, r3, #32
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	4832      	ldr	r0, [pc, #200]	@ (8004874 <_printf_i+0x238>)
 80047aa:	2778      	movs	r7, #120	@ 0x78
 80047ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	6831      	ldr	r1, [r6, #0]
 80047b4:	061f      	lsls	r7, r3, #24
 80047b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ba:	d402      	bmi.n	80047c2 <_printf_i+0x186>
 80047bc:	065f      	lsls	r7, r3, #25
 80047be:	bf48      	it	mi
 80047c0:	b2ad      	uxthmi	r5, r5
 80047c2:	6031      	str	r1, [r6, #0]
 80047c4:	07d9      	lsls	r1, r3, #31
 80047c6:	bf44      	itt	mi
 80047c8:	f043 0320 	orrmi.w	r3, r3, #32
 80047cc:	6023      	strmi	r3, [r4, #0]
 80047ce:	b11d      	cbz	r5, 80047d8 <_printf_i+0x19c>
 80047d0:	2310      	movs	r3, #16
 80047d2:	e7ad      	b.n	8004730 <_printf_i+0xf4>
 80047d4:	4826      	ldr	r0, [pc, #152]	@ (8004870 <_printf_i+0x234>)
 80047d6:	e7e9      	b.n	80047ac <_printf_i+0x170>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f023 0320 	bic.w	r3, r3, #32
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	e7f6      	b.n	80047d0 <_printf_i+0x194>
 80047e2:	4616      	mov	r6, r2
 80047e4:	e7bd      	b.n	8004762 <_printf_i+0x126>
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	6961      	ldr	r1, [r4, #20]
 80047ec:	1d18      	adds	r0, r3, #4
 80047ee:	6030      	str	r0, [r6, #0]
 80047f0:	062e      	lsls	r6, r5, #24
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	d501      	bpl.n	80047fa <_printf_i+0x1be>
 80047f6:	6019      	str	r1, [r3, #0]
 80047f8:	e002      	b.n	8004800 <_printf_i+0x1c4>
 80047fa:	0668      	lsls	r0, r5, #25
 80047fc:	d5fb      	bpl.n	80047f6 <_printf_i+0x1ba>
 80047fe:	8019      	strh	r1, [r3, #0]
 8004800:	2300      	movs	r3, #0
 8004802:	6123      	str	r3, [r4, #16]
 8004804:	4616      	mov	r6, r2
 8004806:	e7bc      	b.n	8004782 <_printf_i+0x146>
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	1d1a      	adds	r2, r3, #4
 800480c:	6032      	str	r2, [r6, #0]
 800480e:	681e      	ldr	r6, [r3, #0]
 8004810:	6862      	ldr	r2, [r4, #4]
 8004812:	2100      	movs	r1, #0
 8004814:	4630      	mov	r0, r6
 8004816:	f7fb fcf3 	bl	8000200 <memchr>
 800481a:	b108      	cbz	r0, 8004820 <_printf_i+0x1e4>
 800481c:	1b80      	subs	r0, r0, r6
 800481e:	6060      	str	r0, [r4, #4]
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	2300      	movs	r3, #0
 8004826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800482a:	e7aa      	b.n	8004782 <_printf_i+0x146>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	4632      	mov	r2, r6
 8004830:	4649      	mov	r1, r9
 8004832:	4640      	mov	r0, r8
 8004834:	47d0      	blx	sl
 8004836:	3001      	adds	r0, #1
 8004838:	d0ad      	beq.n	8004796 <_printf_i+0x15a>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	079b      	lsls	r3, r3, #30
 800483e:	d413      	bmi.n	8004868 <_printf_i+0x22c>
 8004840:	68e0      	ldr	r0, [r4, #12]
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	4298      	cmp	r0, r3
 8004846:	bfb8      	it	lt
 8004848:	4618      	movlt	r0, r3
 800484a:	e7a6      	b.n	800479a <_printf_i+0x15e>
 800484c:	2301      	movs	r3, #1
 800484e:	4632      	mov	r2, r6
 8004850:	4649      	mov	r1, r9
 8004852:	4640      	mov	r0, r8
 8004854:	47d0      	blx	sl
 8004856:	3001      	adds	r0, #1
 8004858:	d09d      	beq.n	8004796 <_printf_i+0x15a>
 800485a:	3501      	adds	r5, #1
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	9903      	ldr	r1, [sp, #12]
 8004860:	1a5b      	subs	r3, r3, r1
 8004862:	42ab      	cmp	r3, r5
 8004864:	dcf2      	bgt.n	800484c <_printf_i+0x210>
 8004866:	e7eb      	b.n	8004840 <_printf_i+0x204>
 8004868:	2500      	movs	r5, #0
 800486a:	f104 0619 	add.w	r6, r4, #25
 800486e:	e7f5      	b.n	800485c <_printf_i+0x220>
 8004870:	08004b41 	.word	0x08004b41
 8004874:	08004b52 	.word	0x08004b52

08004878 <memmove>:
 8004878:	4288      	cmp	r0, r1
 800487a:	b510      	push	{r4, lr}
 800487c:	eb01 0402 	add.w	r4, r1, r2
 8004880:	d902      	bls.n	8004888 <memmove+0x10>
 8004882:	4284      	cmp	r4, r0
 8004884:	4623      	mov	r3, r4
 8004886:	d807      	bhi.n	8004898 <memmove+0x20>
 8004888:	1e43      	subs	r3, r0, #1
 800488a:	42a1      	cmp	r1, r4
 800488c:	d008      	beq.n	80048a0 <memmove+0x28>
 800488e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004896:	e7f8      	b.n	800488a <memmove+0x12>
 8004898:	4402      	add	r2, r0
 800489a:	4601      	mov	r1, r0
 800489c:	428a      	cmp	r2, r1
 800489e:	d100      	bne.n	80048a2 <memmove+0x2a>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048aa:	e7f7      	b.n	800489c <memmove+0x24>

080048ac <_sbrk_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d06      	ldr	r5, [pc, #24]	@ (80048c8 <_sbrk_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fc fcd0 	bl	800125c <_sbrk>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_sbrk_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_sbrk_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20000604 	.word	0x20000604

080048cc <memcpy>:
 80048cc:	440a      	add	r2, r1
 80048ce:	4291      	cmp	r1, r2
 80048d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d4:	d100      	bne.n	80048d8 <memcpy+0xc>
 80048d6:	4770      	bx	lr
 80048d8:	b510      	push	{r4, lr}
 80048da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e2:	4291      	cmp	r1, r2
 80048e4:	d1f9      	bne.n	80048da <memcpy+0xe>
 80048e6:	bd10      	pop	{r4, pc}

080048e8 <_realloc_r>:
 80048e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ec:	4607      	mov	r7, r0
 80048ee:	4614      	mov	r4, r2
 80048f0:	460d      	mov	r5, r1
 80048f2:	b921      	cbnz	r1, 80048fe <_realloc_r+0x16>
 80048f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	4611      	mov	r1, r2
 80048fa:	f7ff bc4d 	b.w	8004198 <_malloc_r>
 80048fe:	b92a      	cbnz	r2, 800490c <_realloc_r+0x24>
 8004900:	f7ff fbde 	bl	80040c0 <_free_r>
 8004904:	4625      	mov	r5, r4
 8004906:	4628      	mov	r0, r5
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	f000 f81a 	bl	8004944 <_malloc_usable_size_r>
 8004910:	4284      	cmp	r4, r0
 8004912:	4606      	mov	r6, r0
 8004914:	d802      	bhi.n	800491c <_realloc_r+0x34>
 8004916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800491a:	d8f4      	bhi.n	8004906 <_realloc_r+0x1e>
 800491c:	4621      	mov	r1, r4
 800491e:	4638      	mov	r0, r7
 8004920:	f7ff fc3a 	bl	8004198 <_malloc_r>
 8004924:	4680      	mov	r8, r0
 8004926:	b908      	cbnz	r0, 800492c <_realloc_r+0x44>
 8004928:	4645      	mov	r5, r8
 800492a:	e7ec      	b.n	8004906 <_realloc_r+0x1e>
 800492c:	42b4      	cmp	r4, r6
 800492e:	4622      	mov	r2, r4
 8004930:	4629      	mov	r1, r5
 8004932:	bf28      	it	cs
 8004934:	4632      	movcs	r2, r6
 8004936:	f7ff ffc9 	bl	80048cc <memcpy>
 800493a:	4629      	mov	r1, r5
 800493c:	4638      	mov	r0, r7
 800493e:	f7ff fbbf 	bl	80040c0 <_free_r>
 8004942:	e7f1      	b.n	8004928 <_realloc_r+0x40>

08004944 <_malloc_usable_size_r>:
 8004944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004948:	1f18      	subs	r0, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbc      	itt	lt
 800494e:	580b      	ldrlt	r3, [r1, r0]
 8004950:	18c0      	addlt	r0, r0, r3
 8004952:	4770      	bx	lr

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
