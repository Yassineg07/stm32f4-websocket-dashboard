
mqtt_dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08003cdc  08003cdc  00004cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eb4  08003eb4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb4  08003eb4  00004eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eb8  08003eb8  00004eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ebc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000003f4  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f9f  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019de  00000000  00000000  0000e02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0000fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b5  00000000  00000000  00010190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205d7  00000000  00000000  00010745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009803  00000000  00000000  00030d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3149  00000000  00000000  0003a51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd668  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002364  00000000  00000000  000fd6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000ffa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cc4 	.word	0x08003cc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003cc4 	.word	0x08003cc4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ESP8266_Init>:
/**
  * @brief  Initialize ESP8266 module
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    ESP8266_ClearBuffer();
 80005d0:	f000 f946 	bl	8000860 <ESP8266_ClearBuffer>
    
    // Start UART interrupt receiving
    HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	491a      	ldr	r1, [pc, #104]	@ (8000640 <ESP8266_Init+0x74>)
 80005d8:	481a      	ldr	r0, [pc, #104]	@ (8000644 <ESP8266_Init+0x78>)
 80005da:	f001 fee2 	bl	80023a2 <HAL_UART_Receive_IT>
    
    // Reset ESP8266 to ensure clean state
    ESP8266_UART_Transmit("AT+RST\r\n");
 80005de:	481a      	ldr	r0, [pc, #104]	@ (8000648 <ESP8266_Init+0x7c>)
 80005e0:	f000 f994 	bl	800090c <ESP8266_UART_Transmit>

    HAL_Delay(5000);
 80005e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005e8:	f000 fdea 	bl	80011c0 <HAL_Delay>

    // Disconnect from any existing WiFi connection
    ESP8266_SendCommand("AT+CWQAP\r\n", "OK", 1000);
 80005ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f0:	4916      	ldr	r1, [pc, #88]	@ (800064c <ESP8266_Init+0x80>)
 80005f2:	4817      	ldr	r0, [pc, #92]	@ (8000650 <ESP8266_Init+0x84>)
 80005f4:	f000 f902 	bl	80007fc <ESP8266_SendCommand>

    // Simple initialization - just test basic communication
    if (ESP8266_SendCommand("AT\r\n", "OK", 1000) != ESP8266_OK) {
 80005f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005fc:	4913      	ldr	r1, [pc, #76]	@ (800064c <ESP8266_Init+0x80>)
 80005fe:	4815      	ldr	r0, [pc, #84]	@ (8000654 <ESP8266_Init+0x88>)
 8000600:	f000 f8fc 	bl	80007fc <ESP8266_SendCommand>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <ESP8266_Init+0x42>
        return ESP8266_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	e016      	b.n	800063c <ESP8266_Init+0x70>
    }

    // Disable echo first to reduce noise
    if (ESP8266_SendCommand("ATE0\r\n", "OK", 1000) != ESP8266_OK) {
 800060e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000612:	490e      	ldr	r1, [pc, #56]	@ (800064c <ESP8266_Init+0x80>)
 8000614:	4810      	ldr	r0, [pc, #64]	@ (8000658 <ESP8266_Init+0x8c>)
 8000616:	f000 f8f1 	bl	80007fc <ESP8266_SendCommand>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <ESP8266_Init+0x58>
        return ESP8266_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	e00b      	b.n	800063c <ESP8266_Init+0x70>
    }
    

    // Set WiFi mode to station mode
    if (ESP8266_SendCommand("AT+CWMODE=1\r\n", "OK", 1000) != ESP8266_OK) {
 8000624:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000628:	4908      	ldr	r1, [pc, #32]	@ (800064c <ESP8266_Init+0x80>)
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <ESP8266_Init+0x90>)
 800062c:	f000 f8e6 	bl	80007fc <ESP8266_SendCommand>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <ESP8266_Init+0x6e>
        return ESP8266_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <ESP8266_Init+0x70>
    }
    
    return ESP8266_OK;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200002c8 	.word	0x200002c8
 8000644:	2000027c 	.word	0x2000027c
 8000648:	08003cdc 	.word	0x08003cdc
 800064c:	08003ce8 	.word	0x08003ce8
 8000650:	08003cec 	.word	0x08003cec
 8000654:	08003cf8 	.word	0x08003cf8
 8000658:	08003d00 	.word	0x08003d00
 800065c:	08003d08 	.word	0x08003d08

08000660 <ESP8266_ConnectWiFi>:
  * @param  ssid: WiFi network name
  * @param  password: WiFi password
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_ConnectWiFi(const char* ssid, const char* password)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0a4      	sub	sp, #144	@ 0x90
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    char command[128];
    snprintf(command, sizeof(command), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 800066a:	f107 0008 	add.w	r0, r7, #8
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <ESP8266_ConnectWiFi+0x38>)
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	f002 fe24 	bl	80032c4 <sniprintf>
    
    return ESP8266_SendCommand(command, "OK", 5000);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000684:	4905      	ldr	r1, [pc, #20]	@ (800069c <ESP8266_ConnectWiFi+0x3c>)
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f8b8 	bl	80007fc <ESP8266_SendCommand>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3788      	adds	r7, #136	@ 0x88
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08003d18 	.word	0x08003d18
 800069c:	08003ce8 	.word	0x08003ce8

080006a0 <ESP8266_ConnectMQTT>:
  * @param  port: MQTT broker port
  * @param  client_id: MQTT client ID
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_ConnectMQTT(const char* broker_ip, uint16_t port, const char* client_id)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0c6      	sub	sp, #280	@ 0x118
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006be:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80006c2:	460a      	mov	r2, r1
 80006c4:	801a      	strh	r2, [r3, #0]
    char command[256];
    
    // Set MQTT user config
    snprintf(command, sizeof(command), "AT+MQTTUSERCFG=0,1,\"%s\",\"\",\"\",0,0,\"\"\r\n", client_id);
 80006c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006ce:	f107 0010 	add.w	r0, r7, #16
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <ESP8266_ConnectMQTT+0x98>)
 80006d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006da:	f002 fdf3 	bl	80032c4 <sniprintf>
    if (ESP8266_SendCommand(command, "OK", 2000) != ESP8266_OK) {
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006e6:	4915      	ldr	r1, [pc, #84]	@ (800073c <ESP8266_ConnectMQTT+0x9c>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f887 	bl	80007fc <ESP8266_SendCommand>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <ESP8266_ConnectMQTT+0x58>
        return ESP8266_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e01a      	b.n	800072e <ESP8266_ConnectMQTT+0x8e>
    }
    
    // Connect to MQTT broker
    snprintf(command, sizeof(command), "AT+MQTTCONN=0,\"%s\",%d,1\r\n", broker_ip, port);
 80006f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006fc:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000700:	881a      	ldrh	r2, [r3, #0]
 8000702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800070a:	f107 0010 	add.w	r0, r7, #16
 800070e:	9200      	str	r2, [sp, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <ESP8266_ConnectMQTT+0xa0>)
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	f002 fdd4 	bl	80032c4 <sniprintf>
    return ESP8266_SendCommand(command, "OK", 5000);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000724:	4905      	ldr	r1, [pc, #20]	@ (800073c <ESP8266_ConnectMQTT+0x9c>)
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f868 	bl	80007fc <ESP8266_SendCommand>
 800072c:	4603      	mov	r3, r0
}
 800072e:	4618      	mov	r0, r3
 8000730:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	08003d30 	.word	0x08003d30
 800073c:	08003ce8 	.word	0x08003ce8
 8000740:	08003d58 	.word	0x08003d58

08000744 <ESP8266_SubscribeMQTT>:
  * @brief  Subscribe to MQTT topic
  * @param  topic: MQTT topic to subscribe
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_SubscribeMQTT(const char* topic)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0a4      	sub	sp, #144	@ 0x90
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    char command[128];
    snprintf(command, sizeof(command), "AT+MQTTSUB=0,\"%s\",1\r\n", topic);
 800074c:	f107 000c 	add.w	r0, r7, #12
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <ESP8266_SubscribeMQTT+0x48>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	f002 fdb5 	bl	80032c4 <sniprintf>
    ESP8266_Status_t status = ESP8266_SendCommand(command, "OK", 2000);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000762:	490b      	ldr	r1, [pc, #44]	@ (8000790 <ESP8266_SubscribeMQTT+0x4c>)
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f849 	bl	80007fc <ESP8266_SendCommand>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    
    if (status == ESP8266_OK) {
 8000770:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <ESP8266_SubscribeMQTT+0x3a>
        mqtt_subscribed = true;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ESP8266_SubscribeMQTT+0x50>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
    }
    
    return status;
 800077e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8000782:	4618      	mov	r0, r3
 8000784:	3790      	adds	r7, #144	@ 0x90
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	08003d74 	.word	0x08003d74
 8000790:	08003ce8 	.word	0x08003ce8
 8000794:	2000027a 	.word	0x2000027a

08000798 <ESP8266_PublishMQTT>:
  * @param  topic: MQTT topic
  * @param  message: Message to publish
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_PublishMQTT(const char* topic, const char* message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0c4      	sub	sp, #272	@ 0x110
 800079c:	af02      	add	r7, sp, #8
 800079e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80007b0:	6019      	str	r1, [r3, #0]
    char command[256];
    snprintf(command, sizeof(command), "AT+MQTTPUB=0,\"%s\",\"%s\",1,0\r\n", topic, message);
 80007b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007ba:	f107 0008 	add.w	r0, r7, #8
 80007be:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80007c2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	9200      	str	r2, [sp, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <ESP8266_PublishMQTT+0x5c>)
 80007ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d2:	f002 fd77 	bl	80032c4 <sniprintf>
    return ESP8266_SendCommand(command, "OK", 1000);
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007de:	4906      	ldr	r1, [pc, #24]	@ (80007f8 <ESP8266_PublishMQTT+0x60>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f80b 	bl	80007fc <ESP8266_SendCommand>
 80007e6:	4603      	mov	r3, r0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08003d8c 	.word	0x08003d8c
 80007f8:	08003ce8 	.word	0x08003ce8

080007fc <ESP8266_SendCommand>:
  * @param  expected_response: Expected response
  * @param  timeout: Timeout in milliseconds
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_SendCommand(const char* command, const char* expected_response, uint32_t timeout)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
    ESP8266_ClearBuffer();
 8000808:	f000 f82a 	bl	8000860 <ESP8266_ClearBuffer>
    
    // Ensure UART RX interrupt is active
    if (huart2.RxState == HAL_UART_STATE_READY) {
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <ESP8266_SendCommand+0x40>)
 800080e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b20      	cmp	r3, #32
 8000816:	d104      	bne.n	8000822 <ESP8266_SendCommand+0x26>
        HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8000818:	2201      	movs	r2, #1
 800081a:	4909      	ldr	r1, [pc, #36]	@ (8000840 <ESP8266_SendCommand+0x44>)
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <ESP8266_SendCommand+0x40>)
 800081e:	f001 fdc0 	bl	80023a2 <HAL_UART_Receive_IT>
    }
    
    ESP8266_UART_Transmit(command);
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f872 	bl	800090c <ESP8266_UART_Transmit>
    return ESP8266_WaitForResponse(expected_response, timeout);
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f000 f836 	bl	800089c <ESP8266_WaitForResponse>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000027c 	.word	0x2000027c
 8000840:	200002c8 	.word	0x200002c8

08000844 <ESP8266_ProcessReceivedData>:
/**
  * @brief  Process received data from ESP8266
  * @retval ESP8266_Status_t
  */
ESP8266_Status_t ESP8266_ProcessReceivedData(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    // Only process MQTT messages if we're subscribed
    if (mqtt_subscribed) {
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <ESP8266_ProcessReceivedData+0x18>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <ESP8266_ProcessReceivedData+0x10>
        ESP8266_ProcessBuffer();
 8000850:	f000 f874 	bl	800093c <ESP8266_ProcessBuffer>
    }
    return ESP8266_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000027a 	.word	0x2000027a

08000860 <ESP8266_ClearBuffer>:
/**
  * @brief  Clear ESP8266 buffer
  * @retval None
  */
void ESP8266_ClearBuffer(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    memset(esp8266_buffer, 0, ESP8266_BUFFER_SIZE);
 8000864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000868:	2100      	movs	r1, #0
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <ESP8266_ClearBuffer+0x1c>)
 800086c:	f002 fd60 	bl	8003330 <memset>
    esp8266_buffer_index = 0;
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <ESP8266_ClearBuffer+0x20>)
 8000872:	2200      	movs	r2, #0
 8000874:	801a      	strh	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000078 	.word	0x20000078
 8000880:	20000278 	.word	0x20000278

08000884 <ESP8266_Delay>:
  * @brief  Delay function
  * @param  ms: Delay in milliseconds
  * @retval None
  */
static void ESP8266_Delay(uint32_t ms)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 fc97 	bl	80011c0 <HAL_Delay>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <ESP8266_WaitForResponse>:
  * @param  expected: Expected response string
  * @param  timeout: Timeout in milliseconds
  * @retval ESP8266_Status_t
  */
static ESP8266_Status_t ESP8266_WaitForResponse(const char* expected, uint32_t timeout)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    uint32_t start_time = HAL_GetTick();
 80008a6:	f000 fc7f 	bl	80011a8 <HAL_GetTick>
 80008aa:	60f8      	str	r0, [r7, #12]
    
    while ((HAL_GetTick() - start_time) < timeout) {
 80008ac:	e01b      	b.n	80008e6 <ESP8266_WaitForResponse+0x4a>
        // Check if we got the expected response
        if (strstr(esp8266_buffer, expected) != NULL) {
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4813      	ldr	r0, [pc, #76]	@ (8000900 <ESP8266_WaitForResponse+0x64>)
 80008b2:	f002 fd7b 	bl	80033ac <strstr>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <ESP8266_WaitForResponse+0x24>
            return ESP8266_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	e01b      	b.n	80008f8 <ESP8266_WaitForResponse+0x5c>
        }
        
        // Check for error responses
        if (strstr(esp8266_buffer, "ERROR") != NULL || 
 80008c0:	4910      	ldr	r1, [pc, #64]	@ (8000904 <ESP8266_WaitForResponse+0x68>)
 80008c2:	480f      	ldr	r0, [pc, #60]	@ (8000900 <ESP8266_WaitForResponse+0x64>)
 80008c4:	f002 fd72 	bl	80033ac <strstr>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d106      	bne.n	80008dc <ESP8266_WaitForResponse+0x40>
            strstr(esp8266_buffer, "FAIL") != NULL) {
 80008ce:	490e      	ldr	r1, [pc, #56]	@ (8000908 <ESP8266_WaitForResponse+0x6c>)
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <ESP8266_WaitForResponse+0x64>)
 80008d2:	f002 fd6b 	bl	80033ac <strstr>
 80008d6:	4603      	mov	r3, r0
        if (strstr(esp8266_buffer, "ERROR") != NULL || 
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <ESP8266_WaitForResponse+0x44>
            return ESP8266_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e00b      	b.n	80008f8 <ESP8266_WaitForResponse+0x5c>
        }
        
        // Shorter delay to be more responsive
        ESP8266_Delay(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f7ff ffcf 	bl	8000884 <ESP8266_Delay>
    while ((HAL_GetTick() - start_time) < timeout) {
 80008e6:	f000 fc5f 	bl	80011a8 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d8db      	bhi.n	80008ae <ESP8266_WaitForResponse+0x12>
    }
    
    return ESP8266_TIMEOUT;
 80008f6:	2302      	movs	r3, #2
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000078 	.word	0x20000078
 8000904:	08003dac 	.word	0x08003dac
 8000908:	08003db4 	.word	0x08003db4

0800090c <ESP8266_UART_Transmit>:
  * @brief  Transmit data via UART
  * @param  data: Data to transmit
  * @retval None
  */
static void ESP8266_UART_Transmit(const char* data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    // Use blocking transmit to ensure data is sent completely
    // before moving to the next command
    HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fc65 	bl	80001e4 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <ESP8266_UART_Transmit+0x2c>)
 8000926:	f001 fcb1 	bl	800228c <HAL_UART_Transmit>
    
    // Small delay to ensure ESP8266 processes the command
    ESP8266_Delay(100);
 800092a:	2064      	movs	r0, #100	@ 0x64
 800092c:	f7ff ffaa 	bl	8000884 <ESP8266_Delay>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000027c 	.word	0x2000027c

0800093c <ESP8266_ProcessBuffer>:
/**
  * @brief  Process received buffer for MQTT messages
  * @retval None
  */
static void ESP8266_ProcessBuffer(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b09e      	sub	sp, #120	@ 0x78
 8000940:	af00      	add	r7, sp, #0
    // Check for MQTT message reception: +MQTTSUBRECV:0,"led/control",2,on
    char* mqtt_msg = strstr(esp8266_buffer, "+MQTTSUBRECV:");
 8000942:	4937      	ldr	r1, [pc, #220]	@ (8000a20 <ESP8266_ProcessBuffer+0xe4>)
 8000944:	4837      	ldr	r0, [pc, #220]	@ (8000a24 <ESP8266_ProcessBuffer+0xe8>)
 8000946:	f002 fd31 	bl	80033ac <strstr>
 800094a:	6738      	str	r0, [r7, #112]	@ 0x70
    if (mqtt_msg != NULL) {
 800094c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800094e:	2b00      	cmp	r3, #0
 8000950:	d063      	beq.n	8000a1a <ESP8266_ProcessBuffer+0xde>
        // First, find the message content (after the last comma) BEFORE modifying the string
        char* msg_start = strrchr(mqtt_msg, ',');
 8000952:	212c      	movs	r1, #44	@ 0x2c
 8000954:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000956:	f002 fd13 	bl	8003380 <strrchr>
 800095a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (msg_start != NULL) {
 800095c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800095e:	2b00      	cmp	r3, #0
 8000960:	d059      	beq.n	8000a16 <ESP8266_ProcessBuffer+0xda>
            msg_start++; // Skip the comma
 8000962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000964:	3301      	adds	r3, #1
 8000966:	66fb      	str	r3, [r7, #108]	@ 0x6c
            
            // Now find the topic (first quoted string)
            char* topic_start = strchr(mqtt_msg, '"');
 8000968:	2122      	movs	r1, #34	@ 0x22
 800096a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800096c:	f002 fce8 	bl	8003340 <strchr>
 8000970:	66b8      	str	r0, [r7, #104]	@ 0x68
            if (topic_start != NULL) {
 8000972:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000974:	2b00      	cmp	r3, #0
 8000976:	d04e      	beq.n	8000a16 <ESP8266_ProcessBuffer+0xda>
                topic_start++; // Skip the opening quote
 8000978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800097a:	3301      	adds	r3, #1
 800097c:	66bb      	str	r3, [r7, #104]	@ 0x68
                char* topic_end = strchr(topic_start, '"');
 800097e:	2122      	movs	r1, #34	@ 0x22
 8000980:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000982:	f002 fcdd 	bl	8003340 <strchr>
 8000986:	6678      	str	r0, [r7, #100]	@ 0x64
                if (topic_end != NULL) {
 8000988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800098a:	2b00      	cmp	r3, #0
 800098c:	d043      	beq.n	8000a16 <ESP8266_ProcessBuffer+0xda>
                    // Temporarily null terminate topic for copying
                    char saved_char = *topic_end;
 800098e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    *topic_end = '\0';
 8000996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
                    
                    // Remove any trailing whitespace/newlines from message
                    char* msg_end = msg_start + strlen(msg_start) - 1;
 800099c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800099e:	f7ff fc21 	bl	80001e4 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	3b01      	subs	r3, #1
 80009a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009a8:	4413      	add	r3, r2
 80009aa:	677b      	str	r3, [r7, #116]	@ 0x74
                    while (msg_end > msg_start && (*msg_end == '\r' || *msg_end == '\n' || *msg_end == ' ')) {
 80009ac:	e005      	b.n	80009ba <ESP8266_ProcessBuffer+0x7e>
                        *msg_end = '\0';
 80009ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
                        msg_end--;
 80009b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009b6:	3b01      	subs	r3, #1
 80009b8:	677b      	str	r3, [r7, #116]	@ 0x74
                    while (msg_end > msg_start && (*msg_end == '\r' || *msg_end == '\n' || *msg_end == ' ')) {
 80009ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009be:	429a      	cmp	r2, r3
 80009c0:	d90b      	bls.n	80009da <ESP8266_ProcessBuffer+0x9e>
 80009c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b0d      	cmp	r3, #13
 80009c8:	d0f1      	beq.n	80009ae <ESP8266_ProcessBuffer+0x72>
 80009ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d0ed      	beq.n	80009ae <ESP8266_ProcessBuffer+0x72>
 80009d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b20      	cmp	r3, #32
 80009d8:	d0e9      	beq.n	80009ae <ESP8266_ProcessBuffer+0x72>
                    }
                    
                    // Make local copies to avoid buffer clearing issues
                    char topic_copy[64];
                    char message_copy[32];
                    strncpy(topic_copy, topic_start, sizeof(topic_copy) - 1);
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	223f      	movs	r2, #63	@ 0x3f
 80009e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fcb9 	bl	800335a <strncpy>
                    topic_copy[sizeof(topic_copy) - 1] = '\0';
 80009e8:	2300      	movs	r3, #0
 80009ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                    strncpy(message_copy, msg_start, sizeof(message_copy) - 1);
 80009ee:	463b      	mov	r3, r7
 80009f0:	221f      	movs	r2, #31
 80009f2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fcb0 	bl	800335a <strncpy>
                    message_copy[sizeof(message_copy) - 1] = '\0';
 80009fa:	2300      	movs	r3, #0
 80009fc:	77fb      	strb	r3, [r7, #31]
                    
                    // Restore the original character (good practice)
                    *topic_end = saved_char;
 80009fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a00:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8000a04:	701a      	strb	r2, [r3, #0]

                    // Clear buffer BEFORE calling callback to prevent issues
                    //ESP8266_ClearBuffer();

                    // Call callback function with safe copies
                    ESP8266_OnMQTTMessageReceived(topic_copy, message_copy);
 8000a06:	463a      	mov	r2, r7
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f9be 	bl	8000d90 <ESP8266_OnMQTTMessageReceived>
 8000a14:	e001      	b.n	8000a1a <ESP8266_ProcessBuffer+0xde>
                }
            }
        }
        
        // If we get here, parsing failed - still clear buffer
        ESP8266_ClearBuffer();
 8000a16:	f7ff ff23 	bl	8000860 <ESP8266_ClearBuffer>
    }
}
 8000a1a:	3778      	adds	r7, #120	@ 0x78
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	08003dbc 	.word	0x08003dbc
 8000a24:	20000078 	.word	0x20000078

08000a28 <ESP8266_UART_RxCallback>:
  * @brief  UART receive callback (to be called from interrupt)
  * @param  data: Received byte
  * @retval None
  */
void ESP8266_UART_RxCallback(uint8_t data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
    if (esp8266_buffer_index < ESP8266_BUFFER_SIZE - 1) {
 8000a32:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8000a3a:	d82a      	bhi.n	8000a92 <ESP8266_UART_RxCallback+0x6a>
        esp8266_buffer[esp8266_buffer_index++] = data;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	b291      	uxth	r1, r2
 8000a44:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000a46:	8011      	strh	r1, [r2, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <ESP8266_UART_RxCallback+0x9c>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	5453      	strb	r3, [r2, r1]
        esp8266_buffer[esp8266_buffer_index] = '\0';
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <ESP8266_UART_RxCallback+0x9c>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	5499      	strb	r1, [r3, r2]
        
        // Process MQTT messages when we receive a complete line
        if (data == '\n' && mqtt_subscribed) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d106      	bne.n	8000a70 <ESP8266_UART_RxCallback+0x48>
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <ESP8266_UART_RxCallback+0xa0>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <ESP8266_UART_RxCallback+0x48>
            ESP8266_ProcessReceivedData();
 8000a6a:	f7ff feeb 	bl	8000844 <ESP8266_ProcessReceivedData>
        // Buffer overflow - clear and start fresh
        ESP8266_ClearBuffer();
        esp8266_buffer[esp8266_buffer_index++] = data;
        esp8266_buffer[esp8266_buffer_index] = '\0';
    }
}
 8000a6e:	e022      	b.n	8000ab6 <ESP8266_UART_RxCallback+0x8e>
        else if (data == '\n' && !mqtt_subscribed) {
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b0a      	cmp	r3, #10
 8000a74:	d11f      	bne.n	8000ab6 <ESP8266_UART_RxCallback+0x8e>
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <ESP8266_UART_RxCallback+0xa0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f083 0301 	eor.w	r3, r3, #1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d018      	beq.n	8000ab6 <ESP8266_UART_RxCallback+0x8e>
            if (esp8266_buffer_index > 100) { // Keep some recent data for AT responses
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2b64      	cmp	r3, #100	@ 0x64
 8000a8a:	d914      	bls.n	8000ab6 <ESP8266_UART_RxCallback+0x8e>
                ESP8266_ClearBuffer();
 8000a8c:	f7ff fee8 	bl	8000860 <ESP8266_ClearBuffer>
}
 8000a90:	e011      	b.n	8000ab6 <ESP8266_UART_RxCallback+0x8e>
        ESP8266_ClearBuffer();
 8000a92:	f7ff fee5 	bl	8000860 <ESP8266_ClearBuffer>
        esp8266_buffer[esp8266_buffer_index++] = data;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	b291      	uxth	r1, r2
 8000a9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000aa0:	8011      	strh	r1, [r2, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <ESP8266_UART_RxCallback+0x9c>)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	5453      	strb	r3, [r2, r1]
        esp8266_buffer[esp8266_buffer_index] = '\0';
 8000aaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <ESP8266_UART_RxCallback+0x98>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <ESP8266_UART_RxCallback+0x9c>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	5499      	strb	r1, [r3, r2]
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000278 	.word	0x20000278
 8000ac4:	20000078 	.word	0x20000078
 8000ac8:	2000027a 	.word	0x2000027a

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 fb04 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f85e 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f000 f8e2 	bl	8000ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 f8b6 	bl	8000c4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Initialize ESP8266 WiFi module
  if (ESP8266_Init() == ESP8266_OK) {
 8000ae0:	f7ff fd74 	bl	80005cc <ESP8266_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d122      	bne.n	8000b30 <main+0x64>
    // Connect to WiFi
    if (ESP8266_ConnectWiFi(WIFI_SSID, WIFI_PASSWORD) == ESP8266_OK) {
 8000aea:	491d      	ldr	r1, [pc, #116]	@ (8000b60 <main+0x94>)
 8000aec:	481d      	ldr	r0, [pc, #116]	@ (8000b64 <main+0x98>)
 8000aee:	f7ff fdb7 	bl	8000660 <ESP8266_ConnectWiFi>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d11b      	bne.n	8000b30 <main+0x64>
      // Connect to MQTT broker
      if (ESP8266_ConnectMQTT(MQTT_BROKER_IP, MQTT_BROKER_PORT, MQTT_CLIENT_ID) == ESP8266_OK) {
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <main+0x9c>)
 8000afa:	f240 715b 	movw	r1, #1883	@ 0x75b
 8000afe:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <main+0xa0>)
 8000b00:	f7ff fdce 	bl	80006a0 <ESP8266_ConnectMQTT>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d112      	bne.n	8000b30 <main+0x64>
        // Subscribe to LED control topic
        ESP8266_SubscribeMQTT(MQTT_TOPIC_LED_CONTROL);
 8000b0a:	4819      	ldr	r0, [pc, #100]	@ (8000b70 <main+0xa4>)
 8000b0c:	f7ff fe1a 	bl	8000744 <ESP8266_SubscribeMQTT>
        
        // Publish initial status
        snprintf(status_message, sizeof(status_message), "STM32 Connected - LED: %s", led_state ? "ON" : "OFF");
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <main+0xa8>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <main+0x50>
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <main+0xac>)
 8000b1a:	e000      	b.n	8000b1e <main+0x52>
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <main+0xb0>)
 8000b1e:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <main+0xb4>)
 8000b20:	2132      	movs	r1, #50	@ 0x32
 8000b22:	4818      	ldr	r0, [pc, #96]	@ (8000b84 <main+0xb8>)
 8000b24:	f002 fbce 	bl	80032c4 <sniprintf>
        ESP8266_PublishMQTT(MQTT_TOPIC_LED_STATUS, status_message);
 8000b28:	4916      	ldr	r1, [pc, #88]	@ (8000b84 <main+0xb8>)
 8000b2a:	4817      	ldr	r0, [pc, #92]	@ (8000b88 <main+0xbc>)
 8000b2c:	f7ff fe34 	bl	8000798 <ESP8266_PublishMQTT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Handle deferred status updates (avoid sending from interrupt context)
    if (status_update_pending) {
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <main+0xc0>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0fb      	beq.n	8000b30 <main+0x64>
      status_update_pending = false;
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <main+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
      snprintf(status_message, sizeof(status_message), "LED: %s", led_state ? "ON" : "OFF");
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <main+0xa8>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <main+0x7e>
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <main+0xac>)
 8000b48:	e000      	b.n	8000b4c <main+0x80>
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <main+0xb0>)
 8000b4c:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <main+0xc4>)
 8000b4e:	2132      	movs	r1, #50	@ 0x32
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <main+0xb8>)
 8000b52:	f002 fbb7 	bl	80032c4 <sniprintf>
      ESP8266_PublishMQTT(MQTT_TOPIC_LED_STATUS, status_message);
 8000b56:	490b      	ldr	r1, [pc, #44]	@ (8000b84 <main+0xb8>)
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <main+0xbc>)
 8000b5a:	f7ff fe1d 	bl	8000798 <ESP8266_PublishMQTT>
    if (status_update_pending) {
 8000b5e:	e7e7      	b.n	8000b30 <main+0x64>
 8000b60:	08003dcc 	.word	0x08003dcc
 8000b64:	08003dd8 	.word	0x08003dd8
 8000b68:	08003de4 	.word	0x08003de4
 8000b6c:	08003dfc 	.word	0x08003dfc
 8000b70:	08003e0c 	.word	0x08003e0c
 8000b74:	200002c4 	.word	0x200002c4
 8000b78:	08003e18 	.word	0x08003e18
 8000b7c:	08003e1c 	.word	0x08003e1c
 8000b80:	08003e20 	.word	0x08003e20
 8000b84:	200002cc 	.word	0x200002cc
 8000b88:	08003e3c 	.word	0x08003e3c
 8000b8c:	200002fe 	.word	0x200002fe
 8000b90:	08003e48 	.word	0x08003e48

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	@ 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2230      	movs	r2, #48	@ 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fbc4 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <SystemClock_Config+0xb0>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	4a20      	ldr	r2, [pc, #128]	@ (8000c44 <SystemClock_Config+0xb0>)
 8000bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <SystemClock_Config+0xb0>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <SystemClock_Config+0xb4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c48 <SystemClock_Config+0xb4>)
 8000bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <SystemClock_Config+0xb4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fe5a 	bl	80018bc <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c0e:	f000 f93b 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 f8bd 	bl	8001dac <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c38:	f000 f926 	bl	8000e88 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3750      	adds	r7, #80	@ 0x50
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_USART2_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f001 fab2 	bl	80021ec <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c8e:	f000 f8fb 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000027c 	.word	0x2000027c
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_GPIO_Init+0x9c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000d10:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <MX_GPIO_Init+0xa0>)
 8000d12:	f000 fdb9 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000d16:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_GPIO_Init+0xa0>)
 8000d30:	f000 fc0e 	bl	8001550 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <LED_Control>:
  * @brief  Control LED state
  * @param  state: true to turn on, false to turn off
  * @retval None
  */
void LED_Control(bool state)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    led_state = state;
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LED_Control+0x40>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	7013      	strb	r3, [r2, #0]
    
    if (state) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <LED_Control+0x24>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <LED_Control+0x44>)
 8000d62:	f000 fd91 	bl	8001888 <HAL_GPIO_WritePin>
 8000d66:	e005      	b.n	8000d74 <LED_Control+0x30>
    } else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d6e:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <LED_Control+0x44>)
 8000d70:	f000 fd8a 	bl	8001888 <HAL_GPIO_WritePin>
    }
    
    // Set flag for deferred status update (avoid sending from interrupt context)
    status_update_pending = true;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <LED_Control+0x48>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200002c4 	.word	0x200002c4
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	200002fe 	.word	0x200002fe

08000d90 <ESP8266_OnMQTTMessageReceived>:
  * @param  topic: MQTT topic
  * @param  message: MQTT message
  * @retval None
  */
void ESP8266_OnMQTTMessageReceived(const char* topic, const char* message)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    if (strcmp(topic, MQTT_TOPIC_LED_CONTROL) == 0) {
 8000d9a:	491e      	ldr	r1, [pc, #120]	@ (8000e14 <ESP8266_OnMQTTMessageReceived+0x84>)
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fa17 	bl	80001d0 <strcmp>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d130      	bne.n	8000e0a <ESP8266_OnMQTTMessageReceived+0x7a>


        // Handle both uppercase and lowercase commands
        if (strcmp(message, "ON") == 0 || strcmp(message, "on") == 0 || 
 8000da8:	491b      	ldr	r1, [pc, #108]	@ (8000e18 <ESP8266_OnMQTTMessageReceived+0x88>)
 8000daa:	6838      	ldr	r0, [r7, #0]
 8000dac:	f7ff fa10 	bl	80001d0 <strcmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00d      	beq.n	8000dd2 <ESP8266_OnMQTTMessageReceived+0x42>
 8000db6:	4919      	ldr	r1, [pc, #100]	@ (8000e1c <ESP8266_OnMQTTMessageReceived+0x8c>)
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff fa09 	bl	80001d0 <strcmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <ESP8266_OnMQTTMessageReceived+0x42>
            strcmp(message, "1") == 0) {
 8000dc4:	4916      	ldr	r1, [pc, #88]	@ (8000e20 <ESP8266_OnMQTTMessageReceived+0x90>)
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f7ff fa02 	bl	80001d0 <strcmp>
 8000dcc:	4603      	mov	r3, r0
        if (strcmp(message, "ON") == 0 || strcmp(message, "on") == 0 || 
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <ESP8266_OnMQTTMessageReceived+0x4a>

            LED_Control(true);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff ffb6 	bl	8000d44 <LED_Control>
                   strcmp(message, "0") == 0) {

            LED_Control(false);
        }
    }
}
 8000dd8:	e017      	b.n	8000e0a <ESP8266_OnMQTTMessageReceived+0x7a>
        } else if (strcmp(message, "OFF") == 0 || strcmp(message, "off") == 0 || 
 8000dda:	4912      	ldr	r1, [pc, #72]	@ (8000e24 <ESP8266_OnMQTTMessageReceived+0x94>)
 8000ddc:	6838      	ldr	r0, [r7, #0]
 8000dde:	f7ff f9f7 	bl	80001d0 <strcmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00d      	beq.n	8000e04 <ESP8266_OnMQTTMessageReceived+0x74>
 8000de8:	490f      	ldr	r1, [pc, #60]	@ (8000e28 <ESP8266_OnMQTTMessageReceived+0x98>)
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff f9f0 	bl	80001d0 <strcmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <ESP8266_OnMQTTMessageReceived+0x74>
                   strcmp(message, "0") == 0) {
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <ESP8266_OnMQTTMessageReceived+0x9c>)
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f7ff f9e9 	bl	80001d0 <strcmp>
 8000dfe:	4603      	mov	r3, r0
        } else if (strcmp(message, "OFF") == 0 || strcmp(message, "off") == 0 || 
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <ESP8266_OnMQTTMessageReceived+0x7a>
            LED_Control(false);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff ff9d 	bl	8000d44 <LED_Control>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08003e0c 	.word	0x08003e0c
 8000e18:	08003e18 	.word	0x08003e18
 8000e1c:	08003e50 	.word	0x08003e50
 8000e20:	08003e54 	.word	0x08003e54
 8000e24:	08003e1c 	.word	0x08003e1c
 8000e28:	08003e58 	.word	0x08003e58
 8000e2c:	08003e5c 	.word	0x08003e5c

08000e30 <HAL_UART_RxCpltCallback>:
  * @brief  UART receive complete callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <HAL_UART_RxCpltCallback+0x4c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d117      	bne.n	8000e72 <HAL_UART_RxCpltCallback+0x42>
        uint8_t received_byte = uart_rx_buffer[0];
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_UART_RxCpltCallback+0x50>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	73fb      	strb	r3, [r7, #15]
        
        // Filter characters at interrupt level
        if ((received_byte >= 0x20 && received_byte <= 0x7E) || // Printable ASCII
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b1f      	cmp	r3, #31
 8000e4c:	d902      	bls.n	8000e54 <HAL_UART_RxCpltCallback+0x24>
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e52:	d905      	bls.n	8000e60 <HAL_UART_RxCpltCallback+0x30>
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b0d      	cmp	r3, #13
 8000e58:	d002      	beq.n	8000e60 <HAL_UART_RxCpltCallback+0x30>
            received_byte == '\r' || received_byte == '\n') {   // CR/LF
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b0a      	cmp	r3, #10
 8000e5e:	d103      	bne.n	8000e68 <HAL_UART_RxCpltCallback+0x38>
            ESP8266_UART_RxCallback(received_byte);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fde0 	bl	8000a28 <ESP8266_UART_RxCallback>
            // Don't process after every character - only when needed
        }
        
        // Continue receiving
        HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4905      	ldr	r1, [pc, #20]	@ (8000e80 <HAL_UART_RxCpltCallback+0x50>)
 8000e6c:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <HAL_UART_RxCpltCallback+0x54>)
 8000e6e:	f001 fa98 	bl	80023a2 <HAL_UART_Receive_IT>
    }
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	200002c8 	.word	0x200002c8
 8000e84:	2000027c 	.word	0x2000027c

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	@ (8000f78 <HAL_UART_MspInit+0x94>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d133      	bne.n	8000f6e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <HAL_UART_MspInit+0x98>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f7c <HAL_UART_MspInit+0x98>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_UART_MspInit+0x98>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_UART_MspInit+0x98>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <HAL_UART_MspInit+0x98>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_UART_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <HAL_UART_MspInit+0x9c>)
 8000f5a:	f000 faf9 	bl	8001550 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2026      	movs	r0, #38	@ 0x26
 8000f64:	f000 fa2b 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f68:	2026      	movs	r0, #38	@ 0x26
 8000f6a:	f000 fa44 	bl	80013f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	@ 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f8d1 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <USART2_IRQHandler+0x10>)
 8000fea:	f001 f9ff 	bl	80023ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000027c 	.word	0x2000027c

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f002 f9d6 	bl	80033d8 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20020000 	.word	0x20020000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000300 	.word	0x20000300
 8001060:	20000450 	.word	0x20000450

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800108c:	f7ff ffea 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	@ (80010c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 f995 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fd07 	bl	8000acc <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010cc:	08003ebc 	.word	0x08003ebc
  ldr r2, =_sbss
 80010d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010d4:	20000450 	.word	0x20000450

080010d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	@ (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f94f 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fec0 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f967 	bl	8001412 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f92f 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	@ (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000304 	.word	0x20000304

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000304 	.word	0x20000304

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff29 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff3e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff31 	bl	800126c <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff feb6 	bl	80011a8 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d008      	beq.n	800145c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e052      	b.n	8001502 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0216 	bic.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800147a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <HAL_DMA_Abort+0x62>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0208 	bic.w	r2, r2, #8
 800149a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ac:	e013      	b.n	80014d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ae:	f7ff fe7b 	bl	80011a8 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d90c      	bls.n	80014d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e015      	b.n	8001502 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e4      	bne.n	80014ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	223f      	movs	r2, #63	@ 0x3f
 80014ea:	409a      	lsls	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d004      	beq.n	8001528 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e00c      	b.n	8001542 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2205      	movs	r2, #5
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	@ 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e16b      	b.n	8001844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 815a 	bne.w	800183e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d005      	beq.n	80015a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d130      	bne.n	8001604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 0201 	and.w	r2, r3, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b03      	cmp	r3, #3
 800160e:	d017      	beq.n	8001640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d123      	bne.n	8001694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	69b9      	ldr	r1, [r7, #24]
 8001690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80b4 	beq.w	800183e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b60      	ldr	r3, [pc, #384]	@ (800185c <HAL_GPIO_Init+0x30c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a5f      	ldr	r2, [pc, #380]	@ (800185c <HAL_GPIO_Init+0x30c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b5d      	ldr	r3, [pc, #372]	@ (800185c <HAL_GPIO_Init+0x30c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001860 <HAL_GPIO_Init+0x310>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	@ (8001864 <HAL_GPIO_Init+0x314>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d02b      	beq.n	8001776 <HAL_GPIO_Init+0x226>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a51      	ldr	r2, [pc, #324]	@ (8001868 <HAL_GPIO_Init+0x318>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d025      	beq.n	8001772 <HAL_GPIO_Init+0x222>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a50      	ldr	r2, [pc, #320]	@ (800186c <HAL_GPIO_Init+0x31c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d01f      	beq.n	800176e <HAL_GPIO_Init+0x21e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	@ (8001870 <HAL_GPIO_Init+0x320>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x21a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4e      	ldr	r2, [pc, #312]	@ (8001874 <HAL_GPIO_Init+0x324>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x216>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4d      	ldr	r2, [pc, #308]	@ (8001878 <HAL_GPIO_Init+0x328>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x212>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4c      	ldr	r2, [pc, #304]	@ (800187c <HAL_GPIO_Init+0x32c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4b      	ldr	r2, [pc, #300]	@ (8001880 <HAL_GPIO_Init+0x330>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x20a>
 8001756:	2307      	movs	r3, #7
 8001758:	e00e      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800175a:	2308      	movs	r3, #8
 800175c:	e00c      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800175e:	2306      	movs	r3, #6
 8001760:	e00a      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001762:	2305      	movs	r3, #5
 8001764:	e008      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001766:	2304      	movs	r3, #4
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001776:	2300      	movs	r3, #0
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001788:	4935      	ldr	r1, [pc, #212]	@ (8001860 <HAL_GPIO_Init+0x310>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_GPIO_Init+0x334>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a32      	ldr	r2, [pc, #200]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180e:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <HAL_GPIO_Init+0x334>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_GPIO_Init+0x334>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001838:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <HAL_GPIO_Init+0x334>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	f67f ae90 	bls.w	800156c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40021400 	.word	0x40021400
 800187c:	40021800 	.word	0x40021800
 8001880:	40021c00 	.word	0x40021c00
 8001884:	40013c00 	.word	0x40013c00

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e267      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d075      	beq.n	80019c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018da:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d00c      	beq.n	8001900 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e6:	4b85      	ldr	r3, [pc, #532]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d112      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b82      	ldr	r3, [pc, #520]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018fe:	d10b      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4b7e      	ldr	r3, [pc, #504]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d05b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x108>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d157      	bne.n	80019c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e242      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x74>
 8001922:	4b76      	ldr	r3, [pc, #472]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a75      	ldr	r2, [pc, #468]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e01d      	b.n	800196c <HAL_RCC_OscConfig+0xb0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x98>
 800193a:	4b70      	ldr	r3, [pc, #448]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6f      	ldr	r2, [pc, #444]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6c      	ldr	r2, [pc, #432]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0xb0>
 8001954:	4b69      	ldr	r3, [pc, #420]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a68      	ldr	r2, [pc, #416]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a65      	ldr	r2, [pc, #404]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fc18 	bl	80011a8 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fc14 	bl	80011a8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	@ 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e207      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b5b      	ldr	r3, [pc, #364]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0xc0>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fc04 	bl	80011a8 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fc00 	bl	80011a8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1f3      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	4b51      	ldr	r3, [pc, #324]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0xe8>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019d2:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x152>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1c7      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4937      	ldr	r1, [pc, #220]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCC_OscConfig+0x244>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff fbb9 	bl	80011a8 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fbb5 	bl	80011a8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1a8      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4925      	ldr	r1, [pc, #148]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_RCC_OscConfig+0x244>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb98 	bl	80011a8 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fb94 	bl	80011a8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e187      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d016      	beq.n	8001adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_RCC_OscConfig+0x248>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fb78 	bl	80011a8 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fb74 	bl	80011a8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e167      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_OscConfig+0x240>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x200>
 8001ada:	e01b      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0x248>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fb61 	bl	80011a8 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	e00e      	b.n	8001b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff fb5d 	bl	80011a8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d907      	bls.n	8001b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e150      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	42470000 	.word	0x42470000
 8001b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ea      	bne.n	8001aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8097 	beq.w	8001c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b81      	ldr	r3, [pc, #516]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b7d      	ldr	r3, [pc, #500]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b42:	4b7a      	ldr	r3, [pc, #488]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b77      	ldr	r3, [pc, #476]	@ (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a73      	ldr	r2, [pc, #460]	@ (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb1d 	bl	80011a8 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff fb19 	bl	80011a8 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e10c      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b6a      	ldr	r3, [pc, #424]	@ (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2ea>
 8001b98:	4b64      	ldr	r3, [pc, #400]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a63      	ldr	r2, [pc, #396]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x324>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x30c>
 8001bae:	4b5f      	ldr	r3, [pc, #380]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bba:	4b5c      	ldr	r3, [pc, #368]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x324>
 8001bc8:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd4:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a54      	ldr	r2, [pc, #336]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff fade 	bl	80011a8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fada 	bl	80011a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0cb      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	4b49      	ldr	r3, [pc, #292]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0ee      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x334>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fac8 	bl	80011a8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fac4 	bl	80011a8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0b5      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ee      	bne.n	8001c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	4a38      	ldr	r2, [pc, #224]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a1 	beq.w	8001d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d05c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d141      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCC_OscConfig+0x478>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fa98 	bl	80011a8 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff fa94 	bl	80011a8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e087      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	491b      	ldr	r1, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x478>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fa6d 	bl	80011a8 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fa69 	bl	80011a8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e05c      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x416>
 8001cf0:	e054      	b.n	8001d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fa56 	bl	80011a8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff fa52 	bl	80011a8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e045      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x444>
 8001d1e:	e03d      	b.n	8001d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e038      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x4ec>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d028      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d121      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11a      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d111      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0cc      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b68      	ldr	r3, [pc, #416]	@ (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d90c      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b65      	ldr	r3, [pc, #404]	@ (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b8      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e00:	4b59      	ldr	r3, [pc, #356]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a58      	ldr	r2, [pc, #352]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b50      	ldr	r3, [pc, #320]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	494d      	ldr	r1, [pc, #308]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d044      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b47      	ldr	r3, [pc, #284]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d119      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e067      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b37      	ldr	r3, [pc, #220]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4934      	ldr	r1, [pc, #208]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff f984 	bl	80011a8 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f980 	bl	80011a8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d20c      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4916      	ldr	r1, [pc, #88]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490e      	ldr	r1, [pc, #56]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f32:	f000 f821 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	490a      	ldr	r1, [pc, #40]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f8e4 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08003e60 	.word	0x08003e60
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f7c:	b094      	sub	sp, #80	@ 0x50
 8001f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f90:	4b79      	ldr	r3, [pc, #484]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	f200 80e1 	bhi.w	8002164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x34>
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001faa:	e0db      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b73      	ldr	r3, [pc, #460]	@ (800217c <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb0:	e0db      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb2:	4b73      	ldr	r3, [pc, #460]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb6:	e0d8      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fce:	4b6a      	ldr	r3, [pc, #424]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fea:	4622      	mov	r2, r4
 8001fec:	462b      	mov	r3, r5
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0159      	lsls	r1, r3, #5
 8001ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffc:	0150      	lsls	r0, r2, #5
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4621      	mov	r1, r4
 8002004:	1a51      	subs	r1, r2, r1
 8002006:	6139      	str	r1, [r7, #16]
 8002008:	4629      	mov	r1, r5
 800200a:	eb63 0301 	sbc.w	r3, r3, r1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800201c:	4659      	mov	r1, fp
 800201e:	018b      	lsls	r3, r1, #6
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002026:	4651      	mov	r1, sl
 8002028:	018a      	lsls	r2, r1, #6
 800202a:	4651      	mov	r1, sl
 800202c:	ebb2 0801 	subs.w	r8, r2, r1
 8002030:	4659      	mov	r1, fp
 8002032:	eb63 0901 	sbc.w	r9, r3, r1
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800204a:	4690      	mov	r8, r2
 800204c:	4699      	mov	r9, r3
 800204e:	4623      	mov	r3, r4
 8002050:	eb18 0303 	adds.w	r3, r8, r3
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	462b      	mov	r3, r5
 8002058:	eb49 0303 	adc.w	r3, r9, r3
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800206a:	4629      	mov	r1, r5
 800206c:	024b      	lsls	r3, r1, #9
 800206e:	4621      	mov	r1, r4
 8002070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002074:	4621      	mov	r1, r4
 8002076:	024a      	lsls	r2, r1, #9
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207e:	2200      	movs	r2, #0
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002088:	f7fe f90a 	bl	80002a0 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002094:	e058      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	2200      	movs	r2, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	4611      	mov	r1, r2
 80020a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	0159      	lsls	r1, r3, #5
 80020be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c2:	0150      	lsls	r0, r2, #5
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4641      	mov	r1, r8
 80020ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ce:	4649      	mov	r1, r9
 80020d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e8:	ebb2 040a 	subs.w	r4, r2, sl
 80020ec:	eb63 050b 	sbc.w	r5, r3, fp
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	00eb      	lsls	r3, r5, #3
 80020fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fe:	00e2      	lsls	r2, r4, #3
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	4643      	mov	r3, r8
 8002106:	18e3      	adds	r3, r4, r3
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	464b      	mov	r3, r9
 800210c:	eb45 0303 	adc.w	r3, r5, r3
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211e:	4629      	mov	r1, r5
 8002120:	028b      	lsls	r3, r1, #10
 8002122:	4621      	mov	r1, r4
 8002124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002128:	4621      	mov	r1, r4
 800212a:	028a      	lsls	r2, r1, #10
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002132:	2200      	movs	r2, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	61fa      	str	r2, [r7, #28]
 8002138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213c:	f7fe f8b0 	bl	80002a0 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4613      	mov	r3, r2
 8002146:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	3301      	adds	r3, #1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800215a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002162:	e002      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_RCC_GetSysClockFreq+0x204>)
 8002166:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800216c:	4618      	mov	r0, r3
 800216e:	3750      	adds	r7, #80	@ 0x50
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	00f42400 	.word	0x00f42400
 8002180:	007a1200 	.word	0x007a1200

08002184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_RCC_GetHCLKFreq+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000000 	.word	0x20000000

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff0 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0a9b      	lsrs	r3, r3, #10
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	08003e70 	.word	0x08003e70

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffdc 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0b5b      	lsrs	r3, r3, #13
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08003e70 	.word	0x08003e70

080021ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e042      	b.n	8002284 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fe66 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2224      	movs	r2, #36	@ 0x24
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800222e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fdd3 	bl	8002ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d175      	bne.n	8002398 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_UART_Transmit+0x2c>
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e06e      	b.n	800239a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2221      	movs	r2, #33	@ 0x21
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ca:	f7fe ff6d 	bl	80011a8 <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e4:	d108      	bne.n	80022f8 <HAL_UART_Transmit+0x6c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d104      	bne.n	80022f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e003      	b.n	8002300 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002300:	e02e      	b.n	8002360 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fb37 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e03a      	b.n	800239a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002338:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	3302      	adds	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e007      	b.n	8002352 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1cb      	bne.n	8002302 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	2140      	movs	r1, #64	@ 0x40
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fb03 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d112      	bne.n	80023e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_UART_Receive_IT+0x26>
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e00b      	b.n	80023e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	461a      	mov	r2, r3
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fb2a 	bl	8002a32 <UART_Start_Receive_IT>
 80023de:	4603      	mov	r3, r0
 80023e0:	e000      	b.n	80023e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0ba      	sub	sp, #232	@ 0xe8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800242a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_UART_IRQHandler+0x66>
 800243e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fc07 	bl	8002c5e <UART_Receive_IT>
      return;
 8002450:	e273      	b.n	800293a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80de 	beq.w	8002618 <HAL_UART_IRQHandler+0x22c>
 800245c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800246c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80d1 	beq.w	8002618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_UART_IRQHandler+0xae>
 8002482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_UART_IRQHandler+0xd2>
 80024a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_UART_IRQHandler+0xf6>
 80024ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d011      	beq.n	8002512 <HAL_UART_IRQHandler+0x126>
 80024ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0208 	orr.w	r2, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 820a 	beq.w	8002930 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_UART_IRQHandler+0x14e>
 8002528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb92 	bl	8002c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002544:	2b40      	cmp	r3, #64	@ 0x40
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <HAL_UART_IRQHandler+0x17a>
 800255e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04f      	beq.n	8002606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa9d 	bl	8002aa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b40      	cmp	r3, #64	@ 0x40
 8002578:	d141      	bne.n	80025fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3314      	adds	r3, #20
 8002580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1d9      	bne.n	800257a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d2:	4a8a      	ldr	r2, [pc, #552]	@ (80027fc <HAL_UART_IRQHandler+0x410>)
 80025d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ff95 	bl	800150a <HAL_DMA_Abort_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025f0:	4610      	mov	r0, r2
 80025f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	e00e      	b.n	8002614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f9ac 	bl	8002954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e00a      	b.n	8002614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f9a8 	bl	8002954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	e006      	b.n	8002614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9a4 	bl	8002954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002612:	e18d      	b.n	8002930 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002614:	bf00      	nop
    return;
 8002616:	e18b      	b.n	8002930 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 8167 	bne.w	80028f0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8160 	beq.w	80028f0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8159 	beq.w	80028f0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	f040 80ce 	bne.w	8002800 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a9 	beq.w	80027cc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800267e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002682:	429a      	cmp	r2, r3
 8002684:	f080 80a2 	bcs.w	80027cc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800268e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800269a:	f000 8088 	beq.w	80027ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026da:	e841 2300 	strex	r3, r2, [r1]
 80026de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1d9      	bne.n	800269e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80026fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800270e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002712:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002714:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002716:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800271a:	e841 2300 	strex	r3, r2, [r1]
 800271e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e1      	bne.n	80026ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3314      	adds	r3, #20
 800272c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800273c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800274a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800274c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002750:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002752:	e841 2300 	strex	r3, r2, [r1]
 8002756:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e3      	bne.n	8002726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800277c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800277e:	f023 0310 	bic.w	r3, r3, #16
 8002782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002790:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002792:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002794:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002796:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002798:	e841 2300 	strex	r3, r2, [r1]
 800279c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800279e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e3      	bne.n	800276c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fe3e 	bl	800142a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8cf 	bl	8002968 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80027ca:	e0b3      	b.n	8002934 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 80ad 	bne.w	8002934 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e4:	f040 80a6 	bne.w	8002934 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8b7 	bl	8002968 <HAL_UARTEx_RxEventCallback>
      return;
 80027fa:	e09b      	b.n	8002934 <HAL_UART_IRQHandler+0x548>
 80027fc:	08002b6d 	.word	0x08002b6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 808e 	beq.w	8002938 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800281c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8089 	beq.w	8002938 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800284a:	647a      	str	r2, [r7, #68]	@ 0x44
 800284c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e3      	bne.n	8002826 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	623b      	str	r3, [r7, #32]
   return(result);
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3314      	adds	r3, #20
 800287e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002882:	633a      	str	r2, [r7, #48]	@ 0x30
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e3      	bne.n	800285e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0310 	bic.w	r3, r3, #16
 80028ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	69b9      	ldr	r1, [r7, #24]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	e841 2300 	strex	r3, r2, [r1]
 80028d4:	617b      	str	r3, [r7, #20]
   return(result);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e3      	bne.n	80028a4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f83d 	bl	8002968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ee:	e023      	b.n	8002938 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_UART_IRQHandler+0x524>
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f940 	bl	8002b8e <UART_Transmit_IT>
    return;
 800290e:	e014      	b.n	800293a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <HAL_UART_IRQHandler+0x54e>
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f980 	bl	8002c2e <UART_EndTransmit_IT>
    return;
 800292e:	e004      	b.n	800293a <HAL_UART_IRQHandler+0x54e>
    return;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <HAL_UART_IRQHandler+0x54e>
      return;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_UART_IRQHandler+0x54e>
      return;
 8002938:	bf00      	nop
  }
}
 800293a:	37e8      	adds	r7, #232	@ 0xe8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	e03b      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d037      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe fc05 	bl	80011a8 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e03a      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d023      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b80      	cmp	r3, #128	@ 0x80
 80029c6:	d020      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d01d      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d116      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f857 	bl	8002aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2208      	movs	r2, #8
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d0b4      	beq.n	8002992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2222      	movs	r2, #34	@ 0x22
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b095      	sub	sp, #84	@ 0x54
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ace:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d119      	bne.n	8002b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f023 0310 	bic.w	r3, r3, #16
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b3e:	61ba      	str	r2, [r7, #24]
 8002b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e5      	bne.n	8002b1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b60:	bf00      	nop
 8002b62:	3754      	adds	r7, #84	@ 0x54
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff fee7 	bl	8002954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b21      	cmp	r3, #33	@ 0x21
 8002ba0:	d13e      	bne.n	8002c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002baa:	d114      	bne.n	8002bd6 <UART_Transmit_IT+0x48>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d110      	bne.n	8002bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	621a      	str	r2, [r3, #32]
 8002bd4:	e008      	b.n	8002be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	1c59      	adds	r1, r3, #1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6211      	str	r1, [r2, #32]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fe76 	bl	8002940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08c      	sub	sp, #48	@ 0x30
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b22      	cmp	r3, #34	@ 0x22
 8002c78:	f040 80aa 	bne.w	8002dd0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c84:	d115      	bne.n	8002cb2 <UART_Receive_IT+0x54>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d111      	bne.n	8002cb2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	1c9a      	adds	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cb0:	e024      	b.n	8002cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc0:	d007      	beq.n	8002cd2 <UART_Receive_IT+0x74>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <UART_Receive_IT+0x82>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e008      	b.n	8002cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d15d      	bne.n	8002dcc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0220 	bic.w	r2, r2, #32
 8002d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d135      	bne.n	8002dc2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 0310 	bic.w	r3, r3, #16
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	623a      	str	r2, [r7, #32]
 8002d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	69f9      	ldr	r1, [r7, #28]
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	e841 2300 	strex	r3, r2, [r1]
 8002d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e5      	bne.n	8002d5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d10a      	bne.n	8002db4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fdd4 	bl	8002968 <HAL_UARTEx_RxEventCallback>
 8002dc0:	e002      	b.n	8002dc8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe f834 	bl	8000e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e002      	b.n	8002dd2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3730      	adds	r7, #48	@ 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b0c0      	sub	sp, #256	@ 0x100
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	ea40 0301 	orr.w	r3, r0, r1
 8002e04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e34:	f021 010c 	bic.w	r1, r1, #12
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e42:	430b      	orrs	r3, r1
 8002e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e56:	6999      	ldr	r1, [r3, #24]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	ea40 0301 	orr.w	r3, r0, r1
 8002e62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b8f      	ldr	r3, [pc, #572]	@ (80030a8 <UART_SetConfig+0x2cc>)
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d005      	beq.n	8002e7c <UART_SetConfig+0xa0>
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b8d      	ldr	r3, [pc, #564]	@ (80030ac <UART_SetConfig+0x2d0>)
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d104      	bne.n	8002e86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e7c:	f7ff f9a2 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8002e80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e84:	e003      	b.n	8002e8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e86:	f7ff f989 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8002e8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e98:	f040 810c 	bne.w	80030b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ea6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eae:	4622      	mov	r2, r4
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	eb12 0801 	adds.w	r8, r2, r1
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	eb43 0901 	adc.w	r9, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ede:	4690      	mov	r8, r2
 8002ee0:	4699      	mov	r9, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	eb18 0303 	adds.w	r3, r8, r3
 8002ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002eec:	462b      	mov	r3, r5
 8002eee:	eb49 0303 	adc.w	r3, r9, r3
 8002ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	18db      	adds	r3, r3, r3
 8002f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f10:	4613      	mov	r3, r2
 8002f12:	eb42 0303 	adc.w	r3, r2, r3
 8002f16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f20:	f7fd f9be 	bl	80002a0 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8002f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	011c      	lsls	r4, r3, #4
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f54:	4641      	mov	r1, r8
 8002f56:	eb12 0a01 	adds.w	sl, r2, r1
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f74:	4692      	mov	sl, r2
 8002f76:	469b      	mov	fp, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f82:	464b      	mov	r3, r9
 8002f84:	eb4b 0303 	adc.w	r3, fp, r3
 8002f88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	18db      	adds	r3, r3, r3
 8002fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fb6:	f7fd f973 	bl	80002a0 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8002fc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2264      	movs	r2, #100	@ 0x64
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fd6:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8002fd8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fe4:	441c      	add	r4, r3
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ff0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ff4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1891      	adds	r1, r2, r2
 8002ffe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003000:	415b      	adcs	r3, r3
 8003002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003008:	4641      	mov	r1, r8
 800300a:	1851      	adds	r1, r2, r1
 800300c:	6339      	str	r1, [r7, #48]	@ 0x30
 800300e:	4649      	mov	r1, r9
 8003010:	414b      	adcs	r3, r1
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003020:	4659      	mov	r1, fp
 8003022:	00cb      	lsls	r3, r1, #3
 8003024:	4651      	mov	r1, sl
 8003026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302a:	4651      	mov	r1, sl
 800302c:	00ca      	lsls	r2, r1, #3
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	4603      	mov	r3, r0
 8003034:	4642      	mov	r2, r8
 8003036:	189b      	adds	r3, r3, r2
 8003038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800303c:	464b      	mov	r3, r9
 800303e:	460a      	mov	r2, r1
 8003040:	eb42 0303 	adc.w	r3, r2, r3
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003054:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003058:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800305c:	460b      	mov	r3, r1
 800305e:	18db      	adds	r3, r3, r3
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003062:	4613      	mov	r3, r2
 8003064:	eb42 0303 	adc.w	r3, r2, r3
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800306e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003072:	f7fd f915 	bl	80002a0 <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <UART_SetConfig+0x2d4>)
 800307c:	fba3 1302 	umull	r1, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2164      	movs	r1, #100	@ 0x64
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	3332      	adds	r3, #50	@ 0x32
 800308e:	4a08      	ldr	r2, [pc, #32]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 0207 	and.w	r2, r3, #7
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4422      	add	r2, r4
 80030a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030a4:	e106      	b.n	80032b4 <UART_SetConfig+0x4d8>
 80030a6:	bf00      	nop
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030c6:	4642      	mov	r2, r8
 80030c8:	464b      	mov	r3, r9
 80030ca:	1891      	adds	r1, r2, r2
 80030cc:	6239      	str	r1, [r7, #32]
 80030ce:	415b      	adcs	r3, r3
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030d6:	4641      	mov	r1, r8
 80030d8:	1854      	adds	r4, r2, r1
 80030da:	4649      	mov	r1, r9
 80030dc:	eb43 0501 	adc.w	r5, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	00eb      	lsls	r3, r5, #3
 80030ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	4614      	mov	r4, r2
 80030f2:	461d      	mov	r5, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	18e3      	adds	r3, r4, r3
 80030f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030fc:	464b      	mov	r3, r9
 80030fe:	eb45 0303 	adc.w	r3, r5, r3
 8003102:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003122:	4629      	mov	r1, r5
 8003124:	008b      	lsls	r3, r1, #2
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312c:	4621      	mov	r1, r4
 800312e:	008a      	lsls	r2, r1, #2
 8003130:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003134:	f7fd f8b4 	bl	80002a0 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b60      	ldr	r3, [pc, #384]	@ (80032c0 <UART_SetConfig+0x4e4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011c      	lsls	r4, r3, #4
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003150:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003154:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	61b9      	str	r1, [r7, #24]
 8003160:	415b      	adcs	r3, r3
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003168:	4641      	mov	r1, r8
 800316a:	1851      	adds	r1, r2, r1
 800316c:	6139      	str	r1, [r7, #16]
 800316e:	4649      	mov	r1, r9
 8003170:	414b      	adcs	r3, r1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003180:	4659      	mov	r1, fp
 8003182:	00cb      	lsls	r3, r1, #3
 8003184:	4651      	mov	r1, sl
 8003186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318a:	4651      	mov	r1, sl
 800318c:	00ca      	lsls	r2, r1, #3
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	4603      	mov	r3, r0
 8003194:	4642      	mov	r2, r8
 8003196:	189b      	adds	r3, r3, r2
 8003198:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800319c:	464b      	mov	r3, r9
 800319e:	460a      	mov	r2, r1
 80031a0:	eb42 0303 	adc.w	r3, r2, r3
 80031a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031c0:	4649      	mov	r1, r9
 80031c2:	008b      	lsls	r3, r1, #2
 80031c4:	4641      	mov	r1, r8
 80031c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ca:	4641      	mov	r1, r8
 80031cc:	008a      	lsls	r2, r1, #2
 80031ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031d2:	f7fd f865 	bl	80002a0 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	4b38      	ldr	r3, [pc, #224]	@ (80032c0 <UART_SetConfig+0x4e4>)
 80031de:	fba3 2301 	umull	r2, r3, r3, r1
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	@ 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1acb      	subs	r3, r1, r3
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	3332      	adds	r3, #50	@ 0x32
 80031f0:	4a33      	ldr	r2, [pc, #204]	@ (80032c0 <UART_SetConfig+0x4e4>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031fc:	441c      	add	r4, r3
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	673b      	str	r3, [r7, #112]	@ 0x70
 8003206:	677a      	str	r2, [r7, #116]	@ 0x74
 8003208:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	415b      	adcs	r3, r3
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800324e:	464b      	mov	r3, r9
 8003250:	460a      	mov	r2, r1
 8003252:	eb42 0303 	adc.w	r3, r2, r3
 8003256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	663b      	str	r3, [r7, #96]	@ 0x60
 8003262:	667a      	str	r2, [r7, #100]	@ 0x64
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003270:	4649      	mov	r1, r9
 8003272:	008b      	lsls	r3, r1, #2
 8003274:	4641      	mov	r1, r8
 8003276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327a:	4641      	mov	r1, r8
 800327c:	008a      	lsls	r2, r1, #2
 800327e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003282:	f7fd f80d 	bl	80002a0 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <UART_SetConfig+0x4e4>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	@ 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	3332      	adds	r3, #50	@ 0x32
 800329e:	4a08      	ldr	r2, [pc, #32]	@ (80032c0 <UART_SetConfig+0x4e4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 020f 	and.w	r2, r3, #15
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4422      	add	r2, r4
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032ba:	46bd      	mov	sp, r7
 80032bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <sniprintf>:
 80032c4:	b40c      	push	{r2, r3}
 80032c6:	b530      	push	{r4, r5, lr}
 80032c8:	4b18      	ldr	r3, [pc, #96]	@ (800332c <sniprintf+0x68>)
 80032ca:	1e0c      	subs	r4, r1, #0
 80032cc:	681d      	ldr	r5, [r3, #0]
 80032ce:	b09d      	sub	sp, #116	@ 0x74
 80032d0:	da08      	bge.n	80032e4 <sniprintf+0x20>
 80032d2:	238b      	movs	r3, #139	@ 0x8b
 80032d4:	602b      	str	r3, [r5, #0]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	b01d      	add	sp, #116	@ 0x74
 80032dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032e0:	b002      	add	sp, #8
 80032e2:	4770      	bx	lr
 80032e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80032e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80032f2:	bf14      	ite	ne
 80032f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032f8:	4623      	moveq	r3, r4
 80032fa:	9304      	str	r3, [sp, #16]
 80032fc:	9307      	str	r3, [sp, #28]
 80032fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003302:	9002      	str	r0, [sp, #8]
 8003304:	9006      	str	r0, [sp, #24]
 8003306:	f8ad 3016 	strh.w	r3, [sp, #22]
 800330a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800330c:	ab21      	add	r3, sp, #132	@ 0x84
 800330e:	a902      	add	r1, sp, #8
 8003310:	4628      	mov	r0, r5
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	f000 f9e0 	bl	80036d8 <_svfiprintf_r>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	bfbc      	itt	lt
 800331c:	238b      	movlt	r3, #139	@ 0x8b
 800331e:	602b      	strlt	r3, [r5, #0]
 8003320:	2c00      	cmp	r4, #0
 8003322:	d0da      	beq.n	80032da <sniprintf+0x16>
 8003324:	9b02      	ldr	r3, [sp, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e7d6      	b.n	80032da <sniprintf+0x16>
 800332c:	2000000c 	.word	0x2000000c

08003330 <memset>:
 8003330:	4402      	add	r2, r0
 8003332:	4603      	mov	r3, r0
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	f803 1b01 	strb.w	r1, [r3], #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <strchr>:
 8003340:	b2c9      	uxtb	r1, r1
 8003342:	4603      	mov	r3, r0
 8003344:	4618      	mov	r0, r3
 8003346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800334a:	b112      	cbz	r2, 8003352 <strchr+0x12>
 800334c:	428a      	cmp	r2, r1
 800334e:	d1f9      	bne.n	8003344 <strchr+0x4>
 8003350:	4770      	bx	lr
 8003352:	2900      	cmp	r1, #0
 8003354:	bf18      	it	ne
 8003356:	2000      	movne	r0, #0
 8003358:	4770      	bx	lr

0800335a <strncpy>:
 800335a:	b510      	push	{r4, lr}
 800335c:	3901      	subs	r1, #1
 800335e:	4603      	mov	r3, r0
 8003360:	b132      	cbz	r2, 8003370 <strncpy+0x16>
 8003362:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003366:	f803 4b01 	strb.w	r4, [r3], #1
 800336a:	3a01      	subs	r2, #1
 800336c:	2c00      	cmp	r4, #0
 800336e:	d1f7      	bne.n	8003360 <strncpy+0x6>
 8003370:	441a      	add	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <strncpy+0x20>
 8003378:	bd10      	pop	{r4, pc}
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <strncpy+0x1a>

08003380 <strrchr>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8003386:	4603      	mov	r3, r0
 8003388:	d10e      	bne.n	80033a8 <strrchr+0x28>
 800338a:	4621      	mov	r1, r4
 800338c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003390:	f7ff bfd6 	b.w	8003340 <strchr>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	4605      	mov	r5, r0
 8003398:	4621      	mov	r1, r4
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ffd0 	bl	8003340 <strchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1f7      	bne.n	8003394 <strrchr+0x14>
 80033a4:	4628      	mov	r0, r5
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
 80033a8:	2500      	movs	r5, #0
 80033aa:	e7f5      	b.n	8003398 <strrchr+0x18>

080033ac <strstr>:
 80033ac:	780a      	ldrb	r2, [r1, #0]
 80033ae:	b570      	push	{r4, r5, r6, lr}
 80033b0:	b96a      	cbnz	r2, 80033ce <strstr+0x22>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d109      	bne.n	80033cc <strstr+0x20>
 80033b8:	460c      	mov	r4, r1
 80033ba:	4605      	mov	r5, r0
 80033bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f6      	beq.n	80033b2 <strstr+0x6>
 80033c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80033c8:	429e      	cmp	r6, r3
 80033ca:	d0f7      	beq.n	80033bc <strstr+0x10>
 80033cc:	3001      	adds	r0, #1
 80033ce:	7803      	ldrb	r3, [r0, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ef      	bne.n	80033b4 <strstr+0x8>
 80033d4:	4618      	mov	r0, r3
 80033d6:	e7ec      	b.n	80033b2 <strstr+0x6>

080033d8 <__errno>:
 80033d8:	4b01      	ldr	r3, [pc, #4]	@ (80033e0 <__errno+0x8>)
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	2000000c 	.word	0x2000000c

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	4d0d      	ldr	r5, [pc, #52]	@ (800341c <__libc_init_array+0x38>)
 80033e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003420 <__libc_init_array+0x3c>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	2600      	movs	r6, #0
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003424 <__libc_init_array+0x40>)
 80033f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003428 <__libc_init_array+0x44>)
 80033f8:	f000 fc64 	bl	8003cc4 <_init>
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	2600      	movs	r6, #0
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	f855 3b04 	ldr.w	r3, [r5], #4
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	f855 3b04 	ldr.w	r3, [r5], #4
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	08003eb4 	.word	0x08003eb4
 8003420:	08003eb4 	.word	0x08003eb4
 8003424:	08003eb4 	.word	0x08003eb4
 8003428:	08003eb8 	.word	0x08003eb8

0800342c <__retarget_lock_acquire_recursive>:
 800342c:	4770      	bx	lr

0800342e <__retarget_lock_release_recursive>:
 800342e:	4770      	bx	lr

08003430 <_free_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4605      	mov	r5, r0
 8003434:	2900      	cmp	r1, #0
 8003436:	d041      	beq.n	80034bc <_free_r+0x8c>
 8003438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800343c:	1f0c      	subs	r4, r1, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	bfb8      	it	lt
 8003442:	18e4      	addlt	r4, r4, r3
 8003444:	f000 f8e0 	bl	8003608 <__malloc_lock>
 8003448:	4a1d      	ldr	r2, [pc, #116]	@ (80034c0 <_free_r+0x90>)
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	b933      	cbnz	r3, 800345c <_free_r+0x2c>
 800344e:	6063      	str	r3, [r4, #4]
 8003450:	6014      	str	r4, [r2, #0]
 8003452:	4628      	mov	r0, r5
 8003454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003458:	f000 b8dc 	b.w	8003614 <__malloc_unlock>
 800345c:	42a3      	cmp	r3, r4
 800345e:	d908      	bls.n	8003472 <_free_r+0x42>
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	1821      	adds	r1, r4, r0
 8003464:	428b      	cmp	r3, r1
 8003466:	bf01      	itttt	eq
 8003468:	6819      	ldreq	r1, [r3, #0]
 800346a:	685b      	ldreq	r3, [r3, #4]
 800346c:	1809      	addeq	r1, r1, r0
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	e7ed      	b.n	800344e <_free_r+0x1e>
 8003472:	461a      	mov	r2, r3
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	b10b      	cbz	r3, 800347c <_free_r+0x4c>
 8003478:	42a3      	cmp	r3, r4
 800347a:	d9fa      	bls.n	8003472 <_free_r+0x42>
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	1850      	adds	r0, r2, r1
 8003480:	42a0      	cmp	r0, r4
 8003482:	d10b      	bne.n	800349c <_free_r+0x6c>
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	4401      	add	r1, r0
 8003488:	1850      	adds	r0, r2, r1
 800348a:	4283      	cmp	r3, r0
 800348c:	6011      	str	r1, [r2, #0]
 800348e:	d1e0      	bne.n	8003452 <_free_r+0x22>
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	6053      	str	r3, [r2, #4]
 8003496:	4408      	add	r0, r1
 8003498:	6010      	str	r0, [r2, #0]
 800349a:	e7da      	b.n	8003452 <_free_r+0x22>
 800349c:	d902      	bls.n	80034a4 <_free_r+0x74>
 800349e:	230c      	movs	r3, #12
 80034a0:	602b      	str	r3, [r5, #0]
 80034a2:	e7d6      	b.n	8003452 <_free_r+0x22>
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	1821      	adds	r1, r4, r0
 80034a8:	428b      	cmp	r3, r1
 80034aa:	bf04      	itt	eq
 80034ac:	6819      	ldreq	r1, [r3, #0]
 80034ae:	685b      	ldreq	r3, [r3, #4]
 80034b0:	6063      	str	r3, [r4, #4]
 80034b2:	bf04      	itt	eq
 80034b4:	1809      	addeq	r1, r1, r0
 80034b6:	6021      	streq	r1, [r4, #0]
 80034b8:	6054      	str	r4, [r2, #4]
 80034ba:	e7ca      	b.n	8003452 <_free_r+0x22>
 80034bc:	bd38      	pop	{r3, r4, r5, pc}
 80034be:	bf00      	nop
 80034c0:	2000044c 	.word	0x2000044c

080034c4 <sbrk_aligned>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003504 <sbrk_aligned+0x40>)
 80034c8:	460c      	mov	r4, r1
 80034ca:	6831      	ldr	r1, [r6, #0]
 80034cc:	4605      	mov	r5, r0
 80034ce:	b911      	cbnz	r1, 80034d6 <sbrk_aligned+0x12>
 80034d0:	f000 fba4 	bl	8003c1c <_sbrk_r>
 80034d4:	6030      	str	r0, [r6, #0]
 80034d6:	4621      	mov	r1, r4
 80034d8:	4628      	mov	r0, r5
 80034da:	f000 fb9f 	bl	8003c1c <_sbrk_r>
 80034de:	1c43      	adds	r3, r0, #1
 80034e0:	d103      	bne.n	80034ea <sbrk_aligned+0x26>
 80034e2:	f04f 34ff 	mov.w	r4, #4294967295
 80034e6:	4620      	mov	r0, r4
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	1cc4      	adds	r4, r0, #3
 80034ec:	f024 0403 	bic.w	r4, r4, #3
 80034f0:	42a0      	cmp	r0, r4
 80034f2:	d0f8      	beq.n	80034e6 <sbrk_aligned+0x22>
 80034f4:	1a21      	subs	r1, r4, r0
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 fb90 	bl	8003c1c <_sbrk_r>
 80034fc:	3001      	adds	r0, #1
 80034fe:	d1f2      	bne.n	80034e6 <sbrk_aligned+0x22>
 8003500:	e7ef      	b.n	80034e2 <sbrk_aligned+0x1e>
 8003502:	bf00      	nop
 8003504:	20000448 	.word	0x20000448

08003508 <_malloc_r>:
 8003508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800350c:	1ccd      	adds	r5, r1, #3
 800350e:	f025 0503 	bic.w	r5, r5, #3
 8003512:	3508      	adds	r5, #8
 8003514:	2d0c      	cmp	r5, #12
 8003516:	bf38      	it	cc
 8003518:	250c      	movcc	r5, #12
 800351a:	2d00      	cmp	r5, #0
 800351c:	4606      	mov	r6, r0
 800351e:	db01      	blt.n	8003524 <_malloc_r+0x1c>
 8003520:	42a9      	cmp	r1, r5
 8003522:	d904      	bls.n	800352e <_malloc_r+0x26>
 8003524:	230c      	movs	r3, #12
 8003526:	6033      	str	r3, [r6, #0]
 8003528:	2000      	movs	r0, #0
 800352a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800352e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003604 <_malloc_r+0xfc>
 8003532:	f000 f869 	bl	8003608 <__malloc_lock>
 8003536:	f8d8 3000 	ldr.w	r3, [r8]
 800353a:	461c      	mov	r4, r3
 800353c:	bb44      	cbnz	r4, 8003590 <_malloc_r+0x88>
 800353e:	4629      	mov	r1, r5
 8003540:	4630      	mov	r0, r6
 8003542:	f7ff ffbf 	bl	80034c4 <sbrk_aligned>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	4604      	mov	r4, r0
 800354a:	d158      	bne.n	80035fe <_malloc_r+0xf6>
 800354c:	f8d8 4000 	ldr.w	r4, [r8]
 8003550:	4627      	mov	r7, r4
 8003552:	2f00      	cmp	r7, #0
 8003554:	d143      	bne.n	80035de <_malloc_r+0xd6>
 8003556:	2c00      	cmp	r4, #0
 8003558:	d04b      	beq.n	80035f2 <_malloc_r+0xea>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	4639      	mov	r1, r7
 800355e:	4630      	mov	r0, r6
 8003560:	eb04 0903 	add.w	r9, r4, r3
 8003564:	f000 fb5a 	bl	8003c1c <_sbrk_r>
 8003568:	4581      	cmp	r9, r0
 800356a:	d142      	bne.n	80035f2 <_malloc_r+0xea>
 800356c:	6821      	ldr	r1, [r4, #0]
 800356e:	1a6d      	subs	r5, r5, r1
 8003570:	4629      	mov	r1, r5
 8003572:	4630      	mov	r0, r6
 8003574:	f7ff ffa6 	bl	80034c4 <sbrk_aligned>
 8003578:	3001      	adds	r0, #1
 800357a:	d03a      	beq.n	80035f2 <_malloc_r+0xea>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	442b      	add	r3, r5
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	f8d8 3000 	ldr.w	r3, [r8]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	bb62      	cbnz	r2, 80035e4 <_malloc_r+0xdc>
 800358a:	f8c8 7000 	str.w	r7, [r8]
 800358e:	e00f      	b.n	80035b0 <_malloc_r+0xa8>
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	1b52      	subs	r2, r2, r5
 8003594:	d420      	bmi.n	80035d8 <_malloc_r+0xd0>
 8003596:	2a0b      	cmp	r2, #11
 8003598:	d917      	bls.n	80035ca <_malloc_r+0xc2>
 800359a:	1961      	adds	r1, r4, r5
 800359c:	42a3      	cmp	r3, r4
 800359e:	6025      	str	r5, [r4, #0]
 80035a0:	bf18      	it	ne
 80035a2:	6059      	strne	r1, [r3, #4]
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	bf08      	it	eq
 80035a8:	f8c8 1000 	streq.w	r1, [r8]
 80035ac:	5162      	str	r2, [r4, r5]
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 f82f 	bl	8003614 <__malloc_unlock>
 80035b6:	f104 000b 	add.w	r0, r4, #11
 80035ba:	1d23      	adds	r3, r4, #4
 80035bc:	f020 0007 	bic.w	r0, r0, #7
 80035c0:	1ac2      	subs	r2, r0, r3
 80035c2:	bf1c      	itt	ne
 80035c4:	1a1b      	subne	r3, r3, r0
 80035c6:	50a3      	strne	r3, [r4, r2]
 80035c8:	e7af      	b.n	800352a <_malloc_r+0x22>
 80035ca:	6862      	ldr	r2, [r4, #4]
 80035cc:	42a3      	cmp	r3, r4
 80035ce:	bf0c      	ite	eq
 80035d0:	f8c8 2000 	streq.w	r2, [r8]
 80035d4:	605a      	strne	r2, [r3, #4]
 80035d6:	e7eb      	b.n	80035b0 <_malloc_r+0xa8>
 80035d8:	4623      	mov	r3, r4
 80035da:	6864      	ldr	r4, [r4, #4]
 80035dc:	e7ae      	b.n	800353c <_malloc_r+0x34>
 80035de:	463c      	mov	r4, r7
 80035e0:	687f      	ldr	r7, [r7, #4]
 80035e2:	e7b6      	b.n	8003552 <_malloc_r+0x4a>
 80035e4:	461a      	mov	r2, r3
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	d1fb      	bne.n	80035e4 <_malloc_r+0xdc>
 80035ec:	2300      	movs	r3, #0
 80035ee:	6053      	str	r3, [r2, #4]
 80035f0:	e7de      	b.n	80035b0 <_malloc_r+0xa8>
 80035f2:	230c      	movs	r3, #12
 80035f4:	6033      	str	r3, [r6, #0]
 80035f6:	4630      	mov	r0, r6
 80035f8:	f000 f80c 	bl	8003614 <__malloc_unlock>
 80035fc:	e794      	b.n	8003528 <_malloc_r+0x20>
 80035fe:	6005      	str	r5, [r0, #0]
 8003600:	e7d6      	b.n	80035b0 <_malloc_r+0xa8>
 8003602:	bf00      	nop
 8003604:	2000044c 	.word	0x2000044c

08003608 <__malloc_lock>:
 8003608:	4801      	ldr	r0, [pc, #4]	@ (8003610 <__malloc_lock+0x8>)
 800360a:	f7ff bf0f 	b.w	800342c <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	20000444 	.word	0x20000444

08003614 <__malloc_unlock>:
 8003614:	4801      	ldr	r0, [pc, #4]	@ (800361c <__malloc_unlock+0x8>)
 8003616:	f7ff bf0a 	b.w	800342e <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	20000444 	.word	0x20000444

08003620 <__ssputs_r>:
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	688e      	ldr	r6, [r1, #8]
 8003626:	461f      	mov	r7, r3
 8003628:	42be      	cmp	r6, r7
 800362a:	680b      	ldr	r3, [r1, #0]
 800362c:	4682      	mov	sl, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4690      	mov	r8, r2
 8003632:	d82d      	bhi.n	8003690 <__ssputs_r+0x70>
 8003634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800363c:	d026      	beq.n	800368c <__ssputs_r+0x6c>
 800363e:	6965      	ldr	r5, [r4, #20]
 8003640:	6909      	ldr	r1, [r1, #16]
 8003642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003646:	eba3 0901 	sub.w	r9, r3, r1
 800364a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800364e:	1c7b      	adds	r3, r7, #1
 8003650:	444b      	add	r3, r9
 8003652:	106d      	asrs	r5, r5, #1
 8003654:	429d      	cmp	r5, r3
 8003656:	bf38      	it	cc
 8003658:	461d      	movcc	r5, r3
 800365a:	0553      	lsls	r3, r2, #21
 800365c:	d527      	bpl.n	80036ae <__ssputs_r+0x8e>
 800365e:	4629      	mov	r1, r5
 8003660:	f7ff ff52 	bl	8003508 <_malloc_r>
 8003664:	4606      	mov	r6, r0
 8003666:	b360      	cbz	r0, 80036c2 <__ssputs_r+0xa2>
 8003668:	6921      	ldr	r1, [r4, #16]
 800366a:	464a      	mov	r2, r9
 800366c:	f000 fae6 	bl	8003c3c <memcpy>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	6126      	str	r6, [r4, #16]
 800367e:	6165      	str	r5, [r4, #20]
 8003680:	444e      	add	r6, r9
 8003682:	eba5 0509 	sub.w	r5, r5, r9
 8003686:	6026      	str	r6, [r4, #0]
 8003688:	60a5      	str	r5, [r4, #8]
 800368a:	463e      	mov	r6, r7
 800368c:	42be      	cmp	r6, r7
 800368e:	d900      	bls.n	8003692 <__ssputs_r+0x72>
 8003690:	463e      	mov	r6, r7
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	4632      	mov	r2, r6
 8003696:	4641      	mov	r1, r8
 8003698:	f000 faa6 	bl	8003be8 <memmove>
 800369c:	68a3      	ldr	r3, [r4, #8]
 800369e:	1b9b      	subs	r3, r3, r6
 80036a0:	60a3      	str	r3, [r4, #8]
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	4433      	add	r3, r6
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	2000      	movs	r0, #0
 80036aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ae:	462a      	mov	r2, r5
 80036b0:	f000 fad2 	bl	8003c58 <_realloc_r>
 80036b4:	4606      	mov	r6, r0
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d1e0      	bne.n	800367c <__ssputs_r+0x5c>
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	4650      	mov	r0, sl
 80036be:	f7ff feb7 	bl	8003430 <_free_r>
 80036c2:	230c      	movs	r3, #12
 80036c4:	f8ca 3000 	str.w	r3, [sl]
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ce:	81a3      	strh	r3, [r4, #12]
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	e7e9      	b.n	80036aa <__ssputs_r+0x8a>
	...

080036d8 <_svfiprintf_r>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	4698      	mov	r8, r3
 80036de:	898b      	ldrh	r3, [r1, #12]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	b09d      	sub	sp, #116	@ 0x74
 80036e4:	4607      	mov	r7, r0
 80036e6:	460d      	mov	r5, r1
 80036e8:	4614      	mov	r4, r2
 80036ea:	d510      	bpl.n	800370e <_svfiprintf_r+0x36>
 80036ec:	690b      	ldr	r3, [r1, #16]
 80036ee:	b973      	cbnz	r3, 800370e <_svfiprintf_r+0x36>
 80036f0:	2140      	movs	r1, #64	@ 0x40
 80036f2:	f7ff ff09 	bl	8003508 <_malloc_r>
 80036f6:	6028      	str	r0, [r5, #0]
 80036f8:	6128      	str	r0, [r5, #16]
 80036fa:	b930      	cbnz	r0, 800370a <_svfiprintf_r+0x32>
 80036fc:	230c      	movs	r3, #12
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	b01d      	add	sp, #116	@ 0x74
 8003706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370a:	2340      	movs	r3, #64	@ 0x40
 800370c:	616b      	str	r3, [r5, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	9309      	str	r3, [sp, #36]	@ 0x24
 8003712:	2320      	movs	r3, #32
 8003714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003718:	f8cd 800c 	str.w	r8, [sp, #12]
 800371c:	2330      	movs	r3, #48	@ 0x30
 800371e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80038bc <_svfiprintf_r+0x1e4>
 8003722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003726:	f04f 0901 	mov.w	r9, #1
 800372a:	4623      	mov	r3, r4
 800372c:	469a      	mov	sl, r3
 800372e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003732:	b10a      	cbz	r2, 8003738 <_svfiprintf_r+0x60>
 8003734:	2a25      	cmp	r2, #37	@ 0x25
 8003736:	d1f9      	bne.n	800372c <_svfiprintf_r+0x54>
 8003738:	ebba 0b04 	subs.w	fp, sl, r4
 800373c:	d00b      	beq.n	8003756 <_svfiprintf_r+0x7e>
 800373e:	465b      	mov	r3, fp
 8003740:	4622      	mov	r2, r4
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff6b 	bl	8003620 <__ssputs_r>
 800374a:	3001      	adds	r0, #1
 800374c:	f000 80a7 	beq.w	800389e <_svfiprintf_r+0x1c6>
 8003750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003752:	445a      	add	r2, fp
 8003754:	9209      	str	r2, [sp, #36]	@ 0x24
 8003756:	f89a 3000 	ldrb.w	r3, [sl]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 809f 	beq.w	800389e <_svfiprintf_r+0x1c6>
 8003760:	2300      	movs	r3, #0
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376a:	f10a 0a01 	add.w	sl, sl, #1
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003776:	931a      	str	r3, [sp, #104]	@ 0x68
 8003778:	4654      	mov	r4, sl
 800377a:	2205      	movs	r2, #5
 800377c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003780:	484e      	ldr	r0, [pc, #312]	@ (80038bc <_svfiprintf_r+0x1e4>)
 8003782:	f7fc fd3d 	bl	8000200 <memchr>
 8003786:	9a04      	ldr	r2, [sp, #16]
 8003788:	b9d8      	cbnz	r0, 80037c2 <_svfiprintf_r+0xea>
 800378a:	06d0      	lsls	r0, r2, #27
 800378c:	bf44      	itt	mi
 800378e:	2320      	movmi	r3, #32
 8003790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003794:	0711      	lsls	r1, r2, #28
 8003796:	bf44      	itt	mi
 8003798:	232b      	movmi	r3, #43	@ 0x2b
 800379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800379e:	f89a 3000 	ldrb.w	r3, [sl]
 80037a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80037a4:	d015      	beq.n	80037d2 <_svfiprintf_r+0xfa>
 80037a6:	9a07      	ldr	r2, [sp, #28]
 80037a8:	4654      	mov	r4, sl
 80037aa:	2000      	movs	r0, #0
 80037ac:	f04f 0c0a 	mov.w	ip, #10
 80037b0:	4621      	mov	r1, r4
 80037b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b6:	3b30      	subs	r3, #48	@ 0x30
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d94b      	bls.n	8003854 <_svfiprintf_r+0x17c>
 80037bc:	b1b0      	cbz	r0, 80037ec <_svfiprintf_r+0x114>
 80037be:	9207      	str	r2, [sp, #28]
 80037c0:	e014      	b.n	80037ec <_svfiprintf_r+0x114>
 80037c2:	eba0 0308 	sub.w	r3, r0, r8
 80037c6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	9304      	str	r3, [sp, #16]
 80037ce:	46a2      	mov	sl, r4
 80037d0:	e7d2      	b.n	8003778 <_svfiprintf_r+0xa0>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	9103      	str	r1, [sp, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfbb      	ittet	lt
 80037de:	425b      	neglt	r3, r3
 80037e0:	f042 0202 	orrlt.w	r2, r2, #2
 80037e4:	9307      	strge	r3, [sp, #28]
 80037e6:	9307      	strlt	r3, [sp, #28]
 80037e8:	bfb8      	it	lt
 80037ea:	9204      	strlt	r2, [sp, #16]
 80037ec:	7823      	ldrb	r3, [r4, #0]
 80037ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80037f0:	d10a      	bne.n	8003808 <_svfiprintf_r+0x130>
 80037f2:	7863      	ldrb	r3, [r4, #1]
 80037f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80037f6:	d132      	bne.n	800385e <_svfiprintf_r+0x186>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9203      	str	r2, [sp, #12]
 8003800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003804:	3402      	adds	r4, #2
 8003806:	9305      	str	r3, [sp, #20]
 8003808:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038cc <_svfiprintf_r+0x1f4>
 800380c:	7821      	ldrb	r1, [r4, #0]
 800380e:	2203      	movs	r2, #3
 8003810:	4650      	mov	r0, sl
 8003812:	f7fc fcf5 	bl	8000200 <memchr>
 8003816:	b138      	cbz	r0, 8003828 <_svfiprintf_r+0x150>
 8003818:	9b04      	ldr	r3, [sp, #16]
 800381a:	eba0 000a 	sub.w	r0, r0, sl
 800381e:	2240      	movs	r2, #64	@ 0x40
 8003820:	4082      	lsls	r2, r0
 8003822:	4313      	orrs	r3, r2
 8003824:	3401      	adds	r4, #1
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800382c:	4824      	ldr	r0, [pc, #144]	@ (80038c0 <_svfiprintf_r+0x1e8>)
 800382e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003832:	2206      	movs	r2, #6
 8003834:	f7fc fce4 	bl	8000200 <memchr>
 8003838:	2800      	cmp	r0, #0
 800383a:	d036      	beq.n	80038aa <_svfiprintf_r+0x1d2>
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <_svfiprintf_r+0x1ec>)
 800383e:	bb1b      	cbnz	r3, 8003888 <_svfiprintf_r+0x1b0>
 8003840:	9b03      	ldr	r3, [sp, #12]
 8003842:	3307      	adds	r3, #7
 8003844:	f023 0307 	bic.w	r3, r3, #7
 8003848:	3308      	adds	r3, #8
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800384e:	4433      	add	r3, r6
 8003850:	9309      	str	r3, [sp, #36]	@ 0x24
 8003852:	e76a      	b.n	800372a <_svfiprintf_r+0x52>
 8003854:	fb0c 3202 	mla	r2, ip, r2, r3
 8003858:	460c      	mov	r4, r1
 800385a:	2001      	movs	r0, #1
 800385c:	e7a8      	b.n	80037b0 <_svfiprintf_r+0xd8>
 800385e:	2300      	movs	r3, #0
 8003860:	3401      	adds	r4, #1
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 0c0a 	mov.w	ip, #10
 800386a:	4620      	mov	r0, r4
 800386c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003870:	3a30      	subs	r2, #48	@ 0x30
 8003872:	2a09      	cmp	r2, #9
 8003874:	d903      	bls.n	800387e <_svfiprintf_r+0x1a6>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0c6      	beq.n	8003808 <_svfiprintf_r+0x130>
 800387a:	9105      	str	r1, [sp, #20]
 800387c:	e7c4      	b.n	8003808 <_svfiprintf_r+0x130>
 800387e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003882:	4604      	mov	r4, r0
 8003884:	2301      	movs	r3, #1
 8003886:	e7f0      	b.n	800386a <_svfiprintf_r+0x192>
 8003888:	ab03      	add	r3, sp, #12
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	462a      	mov	r2, r5
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <_svfiprintf_r+0x1f0>)
 8003890:	a904      	add	r1, sp, #16
 8003892:	4638      	mov	r0, r7
 8003894:	f3af 8000 	nop.w
 8003898:	1c42      	adds	r2, r0, #1
 800389a:	4606      	mov	r6, r0
 800389c:	d1d6      	bne.n	800384c <_svfiprintf_r+0x174>
 800389e:	89ab      	ldrh	r3, [r5, #12]
 80038a0:	065b      	lsls	r3, r3, #25
 80038a2:	f53f af2d 	bmi.w	8003700 <_svfiprintf_r+0x28>
 80038a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038a8:	e72c      	b.n	8003704 <_svfiprintf_r+0x2c>
 80038aa:	ab03      	add	r3, sp, #12
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	462a      	mov	r2, r5
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <_svfiprintf_r+0x1f0>)
 80038b2:	a904      	add	r1, sp, #16
 80038b4:	4638      	mov	r0, r7
 80038b6:	f000 f879 	bl	80039ac <_printf_i>
 80038ba:	e7ed      	b.n	8003898 <_svfiprintf_r+0x1c0>
 80038bc:	08003e78 	.word	0x08003e78
 80038c0:	08003e82 	.word	0x08003e82
 80038c4:	00000000 	.word	0x00000000
 80038c8:	08003621 	.word	0x08003621
 80038cc:	08003e7e 	.word	0x08003e7e

080038d0 <_printf_common>:
 80038d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d4:	4616      	mov	r6, r2
 80038d6:	4698      	mov	r8, r3
 80038d8:	688a      	ldr	r2, [r1, #8]
 80038da:	690b      	ldr	r3, [r1, #16]
 80038dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bfb8      	it	lt
 80038e4:	4613      	movlt	r3, r2
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038ec:	4607      	mov	r7, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	b10a      	cbz	r2, 80038f6 <_printf_common+0x26>
 80038f2:	3301      	adds	r3, #1
 80038f4:	6033      	str	r3, [r6, #0]
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	0699      	lsls	r1, r3, #26
 80038fa:	bf42      	ittt	mi
 80038fc:	6833      	ldrmi	r3, [r6, #0]
 80038fe:	3302      	addmi	r3, #2
 8003900:	6033      	strmi	r3, [r6, #0]
 8003902:	6825      	ldr	r5, [r4, #0]
 8003904:	f015 0506 	ands.w	r5, r5, #6
 8003908:	d106      	bne.n	8003918 <_printf_common+0x48>
 800390a:	f104 0a19 	add.w	sl, r4, #25
 800390e:	68e3      	ldr	r3, [r4, #12]
 8003910:	6832      	ldr	r2, [r6, #0]
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	42ab      	cmp	r3, r5
 8003916:	dc26      	bgt.n	8003966 <_printf_common+0x96>
 8003918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	3b00      	subs	r3, #0
 8003920:	bf18      	it	ne
 8003922:	2301      	movne	r3, #1
 8003924:	0692      	lsls	r2, r2, #26
 8003926:	d42b      	bmi.n	8003980 <_printf_common+0xb0>
 8003928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800392c:	4641      	mov	r1, r8
 800392e:	4638      	mov	r0, r7
 8003930:	47c8      	blx	r9
 8003932:	3001      	adds	r0, #1
 8003934:	d01e      	beq.n	8003974 <_printf_common+0xa4>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	6922      	ldr	r2, [r4, #16]
 800393a:	f003 0306 	and.w	r3, r3, #6
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf02      	ittt	eq
 8003942:	68e5      	ldreq	r5, [r4, #12]
 8003944:	6833      	ldreq	r3, [r6, #0]
 8003946:	1aed      	subeq	r5, r5, r3
 8003948:	68a3      	ldr	r3, [r4, #8]
 800394a:	bf0c      	ite	eq
 800394c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003950:	2500      	movne	r5, #0
 8003952:	4293      	cmp	r3, r2
 8003954:	bfc4      	itt	gt
 8003956:	1a9b      	subgt	r3, r3, r2
 8003958:	18ed      	addgt	r5, r5, r3
 800395a:	2600      	movs	r6, #0
 800395c:	341a      	adds	r4, #26
 800395e:	42b5      	cmp	r5, r6
 8003960:	d11a      	bne.n	8003998 <_printf_common+0xc8>
 8003962:	2000      	movs	r0, #0
 8003964:	e008      	b.n	8003978 <_printf_common+0xa8>
 8003966:	2301      	movs	r3, #1
 8003968:	4652      	mov	r2, sl
 800396a:	4641      	mov	r1, r8
 800396c:	4638      	mov	r0, r7
 800396e:	47c8      	blx	r9
 8003970:	3001      	adds	r0, #1
 8003972:	d103      	bne.n	800397c <_printf_common+0xac>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397c:	3501      	adds	r5, #1
 800397e:	e7c6      	b.n	800390e <_printf_common+0x3e>
 8003980:	18e1      	adds	r1, r4, r3
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	2030      	movs	r0, #48	@ 0x30
 8003986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800398a:	4422      	add	r2, r4
 800398c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003994:	3302      	adds	r3, #2
 8003996:	e7c7      	b.n	8003928 <_printf_common+0x58>
 8003998:	2301      	movs	r3, #1
 800399a:	4622      	mov	r2, r4
 800399c:	4641      	mov	r1, r8
 800399e:	4638      	mov	r0, r7
 80039a0:	47c8      	blx	r9
 80039a2:	3001      	adds	r0, #1
 80039a4:	d0e6      	beq.n	8003974 <_printf_common+0xa4>
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7d9      	b.n	800395e <_printf_common+0x8e>
	...

080039ac <_printf_i>:
 80039ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b0:	7e0f      	ldrb	r7, [r1, #24]
 80039b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039b4:	2f78      	cmp	r7, #120	@ 0x78
 80039b6:	4691      	mov	r9, r2
 80039b8:	4680      	mov	r8, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	469a      	mov	sl, r3
 80039be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039c2:	d807      	bhi.n	80039d4 <_printf_i+0x28>
 80039c4:	2f62      	cmp	r7, #98	@ 0x62
 80039c6:	d80a      	bhi.n	80039de <_printf_i+0x32>
 80039c8:	2f00      	cmp	r7, #0
 80039ca:	f000 80d1 	beq.w	8003b70 <_printf_i+0x1c4>
 80039ce:	2f58      	cmp	r7, #88	@ 0x58
 80039d0:	f000 80b8 	beq.w	8003b44 <_printf_i+0x198>
 80039d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039dc:	e03a      	b.n	8003a54 <_printf_i+0xa8>
 80039de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039e2:	2b15      	cmp	r3, #21
 80039e4:	d8f6      	bhi.n	80039d4 <_printf_i+0x28>
 80039e6:	a101      	add	r1, pc, #4	@ (adr r1, 80039ec <_printf_i+0x40>)
 80039e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039ec:	08003a45 	.word	0x08003a45
 80039f0:	08003a59 	.word	0x08003a59
 80039f4:	080039d5 	.word	0x080039d5
 80039f8:	080039d5 	.word	0x080039d5
 80039fc:	080039d5 	.word	0x080039d5
 8003a00:	080039d5 	.word	0x080039d5
 8003a04:	08003a59 	.word	0x08003a59
 8003a08:	080039d5 	.word	0x080039d5
 8003a0c:	080039d5 	.word	0x080039d5
 8003a10:	080039d5 	.word	0x080039d5
 8003a14:	080039d5 	.word	0x080039d5
 8003a18:	08003b57 	.word	0x08003b57
 8003a1c:	08003a83 	.word	0x08003a83
 8003a20:	08003b11 	.word	0x08003b11
 8003a24:	080039d5 	.word	0x080039d5
 8003a28:	080039d5 	.word	0x080039d5
 8003a2c:	08003b79 	.word	0x08003b79
 8003a30:	080039d5 	.word	0x080039d5
 8003a34:	08003a83 	.word	0x08003a83
 8003a38:	080039d5 	.word	0x080039d5
 8003a3c:	080039d5 	.word	0x080039d5
 8003a40:	08003b19 	.word	0x08003b19
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6032      	str	r2, [r6, #0]
 8003a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a54:	2301      	movs	r3, #1
 8003a56:	e09c      	b.n	8003b92 <_printf_i+0x1e6>
 8003a58:	6833      	ldr	r3, [r6, #0]
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	1d19      	adds	r1, r3, #4
 8003a5e:	6031      	str	r1, [r6, #0]
 8003a60:	0606      	lsls	r6, r0, #24
 8003a62:	d501      	bpl.n	8003a68 <_printf_i+0xbc>
 8003a64:	681d      	ldr	r5, [r3, #0]
 8003a66:	e003      	b.n	8003a70 <_printf_i+0xc4>
 8003a68:	0645      	lsls	r5, r0, #25
 8003a6a:	d5fb      	bpl.n	8003a64 <_printf_i+0xb8>
 8003a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a70:	2d00      	cmp	r5, #0
 8003a72:	da03      	bge.n	8003a7c <_printf_i+0xd0>
 8003a74:	232d      	movs	r3, #45	@ 0x2d
 8003a76:	426d      	negs	r5, r5
 8003a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a7c:	4858      	ldr	r0, [pc, #352]	@ (8003be0 <_printf_i+0x234>)
 8003a7e:	230a      	movs	r3, #10
 8003a80:	e011      	b.n	8003aa6 <_printf_i+0xfa>
 8003a82:	6821      	ldr	r1, [r4, #0]
 8003a84:	6833      	ldr	r3, [r6, #0]
 8003a86:	0608      	lsls	r0, r1, #24
 8003a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a8c:	d402      	bmi.n	8003a94 <_printf_i+0xe8>
 8003a8e:	0649      	lsls	r1, r1, #25
 8003a90:	bf48      	it	mi
 8003a92:	b2ad      	uxthmi	r5, r5
 8003a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a96:	4852      	ldr	r0, [pc, #328]	@ (8003be0 <_printf_i+0x234>)
 8003a98:	6033      	str	r3, [r6, #0]
 8003a9a:	bf14      	ite	ne
 8003a9c:	230a      	movne	r3, #10
 8003a9e:	2308      	moveq	r3, #8
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003aa6:	6866      	ldr	r6, [r4, #4]
 8003aa8:	60a6      	str	r6, [r4, #8]
 8003aaa:	2e00      	cmp	r6, #0
 8003aac:	db05      	blt.n	8003aba <_printf_i+0x10e>
 8003aae:	6821      	ldr	r1, [r4, #0]
 8003ab0:	432e      	orrs	r6, r5
 8003ab2:	f021 0104 	bic.w	r1, r1, #4
 8003ab6:	6021      	str	r1, [r4, #0]
 8003ab8:	d04b      	beq.n	8003b52 <_printf_i+0x1a6>
 8003aba:	4616      	mov	r6, r2
 8003abc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ac0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ac4:	5dc7      	ldrb	r7, [r0, r7]
 8003ac6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003aca:	462f      	mov	r7, r5
 8003acc:	42bb      	cmp	r3, r7
 8003ace:	460d      	mov	r5, r1
 8003ad0:	d9f4      	bls.n	8003abc <_printf_i+0x110>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d10b      	bne.n	8003aee <_printf_i+0x142>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	07df      	lsls	r7, r3, #31
 8003ada:	d508      	bpl.n	8003aee <_printf_i+0x142>
 8003adc:	6923      	ldr	r3, [r4, #16]
 8003ade:	6861      	ldr	r1, [r4, #4]
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	bfde      	ittt	le
 8003ae4:	2330      	movle	r3, #48	@ 0x30
 8003ae6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003aee:	1b92      	subs	r2, r2, r6
 8003af0:	6122      	str	r2, [r4, #16]
 8003af2:	f8cd a000 	str.w	sl, [sp]
 8003af6:	464b      	mov	r3, r9
 8003af8:	aa03      	add	r2, sp, #12
 8003afa:	4621      	mov	r1, r4
 8003afc:	4640      	mov	r0, r8
 8003afe:	f7ff fee7 	bl	80038d0 <_printf_common>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d14a      	bne.n	8003b9c <_printf_i+0x1f0>
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	b004      	add	sp, #16
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	f043 0320 	orr.w	r3, r3, #32
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	4832      	ldr	r0, [pc, #200]	@ (8003be4 <_printf_i+0x238>)
 8003b1a:	2778      	movs	r7, #120	@ 0x78
 8003b1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	6831      	ldr	r1, [r6, #0]
 8003b24:	061f      	lsls	r7, r3, #24
 8003b26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b2a:	d402      	bmi.n	8003b32 <_printf_i+0x186>
 8003b2c:	065f      	lsls	r7, r3, #25
 8003b2e:	bf48      	it	mi
 8003b30:	b2ad      	uxthmi	r5, r5
 8003b32:	6031      	str	r1, [r6, #0]
 8003b34:	07d9      	lsls	r1, r3, #31
 8003b36:	bf44      	itt	mi
 8003b38:	f043 0320 	orrmi.w	r3, r3, #32
 8003b3c:	6023      	strmi	r3, [r4, #0]
 8003b3e:	b11d      	cbz	r5, 8003b48 <_printf_i+0x19c>
 8003b40:	2310      	movs	r3, #16
 8003b42:	e7ad      	b.n	8003aa0 <_printf_i+0xf4>
 8003b44:	4826      	ldr	r0, [pc, #152]	@ (8003be0 <_printf_i+0x234>)
 8003b46:	e7e9      	b.n	8003b1c <_printf_i+0x170>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f023 0320 	bic.w	r3, r3, #32
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	e7f6      	b.n	8003b40 <_printf_i+0x194>
 8003b52:	4616      	mov	r6, r2
 8003b54:	e7bd      	b.n	8003ad2 <_printf_i+0x126>
 8003b56:	6833      	ldr	r3, [r6, #0]
 8003b58:	6825      	ldr	r5, [r4, #0]
 8003b5a:	6961      	ldr	r1, [r4, #20]
 8003b5c:	1d18      	adds	r0, r3, #4
 8003b5e:	6030      	str	r0, [r6, #0]
 8003b60:	062e      	lsls	r6, r5, #24
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	d501      	bpl.n	8003b6a <_printf_i+0x1be>
 8003b66:	6019      	str	r1, [r3, #0]
 8003b68:	e002      	b.n	8003b70 <_printf_i+0x1c4>
 8003b6a:	0668      	lsls	r0, r5, #25
 8003b6c:	d5fb      	bpl.n	8003b66 <_printf_i+0x1ba>
 8003b6e:	8019      	strh	r1, [r3, #0]
 8003b70:	2300      	movs	r3, #0
 8003b72:	6123      	str	r3, [r4, #16]
 8003b74:	4616      	mov	r6, r2
 8003b76:	e7bc      	b.n	8003af2 <_printf_i+0x146>
 8003b78:	6833      	ldr	r3, [r6, #0]
 8003b7a:	1d1a      	adds	r2, r3, #4
 8003b7c:	6032      	str	r2, [r6, #0]
 8003b7e:	681e      	ldr	r6, [r3, #0]
 8003b80:	6862      	ldr	r2, [r4, #4]
 8003b82:	2100      	movs	r1, #0
 8003b84:	4630      	mov	r0, r6
 8003b86:	f7fc fb3b 	bl	8000200 <memchr>
 8003b8a:	b108      	cbz	r0, 8003b90 <_printf_i+0x1e4>
 8003b8c:	1b80      	subs	r0, r0, r6
 8003b8e:	6060      	str	r0, [r4, #4]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	6123      	str	r3, [r4, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b9a:	e7aa      	b.n	8003af2 <_printf_i+0x146>
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	47d0      	blx	sl
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d0ad      	beq.n	8003b06 <_printf_i+0x15a>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	079b      	lsls	r3, r3, #30
 8003bae:	d413      	bmi.n	8003bd8 <_printf_i+0x22c>
 8003bb0:	68e0      	ldr	r0, [r4, #12]
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	bfb8      	it	lt
 8003bb8:	4618      	movlt	r0, r3
 8003bba:	e7a6      	b.n	8003b0a <_printf_i+0x15e>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4632      	mov	r2, r6
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	47d0      	blx	sl
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d09d      	beq.n	8003b06 <_printf_i+0x15a>
 8003bca:	3501      	adds	r5, #1
 8003bcc:	68e3      	ldr	r3, [r4, #12]
 8003bce:	9903      	ldr	r1, [sp, #12]
 8003bd0:	1a5b      	subs	r3, r3, r1
 8003bd2:	42ab      	cmp	r3, r5
 8003bd4:	dcf2      	bgt.n	8003bbc <_printf_i+0x210>
 8003bd6:	e7eb      	b.n	8003bb0 <_printf_i+0x204>
 8003bd8:	2500      	movs	r5, #0
 8003bda:	f104 0619 	add.w	r6, r4, #25
 8003bde:	e7f5      	b.n	8003bcc <_printf_i+0x220>
 8003be0:	08003e89 	.word	0x08003e89
 8003be4:	08003e9a 	.word	0x08003e9a

08003be8 <memmove>:
 8003be8:	4288      	cmp	r0, r1
 8003bea:	b510      	push	{r4, lr}
 8003bec:	eb01 0402 	add.w	r4, r1, r2
 8003bf0:	d902      	bls.n	8003bf8 <memmove+0x10>
 8003bf2:	4284      	cmp	r4, r0
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	d807      	bhi.n	8003c08 <memmove+0x20>
 8003bf8:	1e43      	subs	r3, r0, #1
 8003bfa:	42a1      	cmp	r1, r4
 8003bfc:	d008      	beq.n	8003c10 <memmove+0x28>
 8003bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c06:	e7f8      	b.n	8003bfa <memmove+0x12>
 8003c08:	4402      	add	r2, r0
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	428a      	cmp	r2, r1
 8003c0e:	d100      	bne.n	8003c12 <memmove+0x2a>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c1a:	e7f7      	b.n	8003c0c <memmove+0x24>

08003c1c <_sbrk_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d06      	ldr	r5, [pc, #24]	@ (8003c38 <_sbrk_r+0x1c>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fd f9e6 	bl	8000ff8 <_sbrk>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_sbrk_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_sbrk_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20000440 	.word	0x20000440

08003c3c <memcpy>:
 8003c3c:	440a      	add	r2, r1
 8003c3e:	4291      	cmp	r1, r2
 8003c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c44:	d100      	bne.n	8003c48 <memcpy+0xc>
 8003c46:	4770      	bx	lr
 8003c48:	b510      	push	{r4, lr}
 8003c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c52:	4291      	cmp	r1, r2
 8003c54:	d1f9      	bne.n	8003c4a <memcpy+0xe>
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <_realloc_r>:
 8003c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	4614      	mov	r4, r2
 8003c60:	460d      	mov	r5, r1
 8003c62:	b921      	cbnz	r1, 8003c6e <_realloc_r+0x16>
 8003c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c68:	4611      	mov	r1, r2
 8003c6a:	f7ff bc4d 	b.w	8003508 <_malloc_r>
 8003c6e:	b92a      	cbnz	r2, 8003c7c <_realloc_r+0x24>
 8003c70:	f7ff fbde 	bl	8003430 <_free_r>
 8003c74:	4625      	mov	r5, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	f000 f81a 	bl	8003cb4 <_malloc_usable_size_r>
 8003c80:	4284      	cmp	r4, r0
 8003c82:	4606      	mov	r6, r0
 8003c84:	d802      	bhi.n	8003c8c <_realloc_r+0x34>
 8003c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c8a:	d8f4      	bhi.n	8003c76 <_realloc_r+0x1e>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4638      	mov	r0, r7
 8003c90:	f7ff fc3a 	bl	8003508 <_malloc_r>
 8003c94:	4680      	mov	r8, r0
 8003c96:	b908      	cbnz	r0, 8003c9c <_realloc_r+0x44>
 8003c98:	4645      	mov	r5, r8
 8003c9a:	e7ec      	b.n	8003c76 <_realloc_r+0x1e>
 8003c9c:	42b4      	cmp	r4, r6
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	bf28      	it	cs
 8003ca4:	4632      	movcs	r2, r6
 8003ca6:	f7ff ffc9 	bl	8003c3c <memcpy>
 8003caa:	4629      	mov	r1, r5
 8003cac:	4638      	mov	r0, r7
 8003cae:	f7ff fbbf 	bl	8003430 <_free_r>
 8003cb2:	e7f1      	b.n	8003c98 <_realloc_r+0x40>

08003cb4 <_malloc_usable_size_r>:
 8003cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb8:	1f18      	subs	r0, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bfbc      	itt	lt
 8003cbe:	580b      	ldrlt	r3, [r1, r0]
 8003cc0:	18c0      	addlt	r0, r0, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
